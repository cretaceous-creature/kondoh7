
kondoh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e8c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800812c  0800812c  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000f0  08008340  08008340  00018340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08008438  08008438  00018438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000019c  20000000  0800843c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00004430  2000019c  080085d8  0002019c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200045cc  080085d8  000245cc  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 11 .debug_line   00010171  00000000  00000000  000201ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0003c6e8  00000000  00000000  0003033b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006c1e  00000000  00000000  0006ca23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001518  00000000  00000000  00073648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002878  00000000  00000000  00074b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001369b  00000000  00000000  000773d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a34a  00000000  00000000  0008aa73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00094dbd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004790  00000000  00000000  00094e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000076  00000000  00000000  000995cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2000019c 	.word	0x2000019c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008114 	.word	0x08008114

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001a0 	.word	0x200001a0
 80002dc:	08008114 	.word	0x08008114

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f001 b8f6 	b.w	80014e4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <selfrel_offset31>:
 80005ec:	6803      	ldr	r3, [r0, #0]
 80005ee:	005a      	lsls	r2, r3, #1
 80005f0:	bf4c      	ite	mi
 80005f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80005f6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80005fa:	4418      	add	r0, r3
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <search_EIT_table>:
 8000600:	b361      	cbz	r1, 800065c <search_EIT_table+0x5c>
 8000602:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000606:	f101 3aff 	add.w	sl, r1, #4294967295
 800060a:	4690      	mov	r8, r2
 800060c:	4606      	mov	r6, r0
 800060e:	46d1      	mov	r9, sl
 8000610:	2700      	movs	r7, #0
 8000612:	eb07 0409 	add.w	r4, r7, r9
 8000616:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800061a:	1064      	asrs	r4, r4, #1
 800061c:	00e5      	lsls	r5, r4, #3
 800061e:	1971      	adds	r1, r6, r5
 8000620:	4608      	mov	r0, r1
 8000622:	f7ff ffe3 	bl	80005ec <selfrel_offset31>
 8000626:	45a2      	cmp	sl, r4
 8000628:	4683      	mov	fp, r0
 800062a:	f105 0008 	add.w	r0, r5, #8
 800062e:	4430      	add	r0, r6
 8000630:	d009      	beq.n	8000646 <search_EIT_table+0x46>
 8000632:	f7ff ffdb 	bl	80005ec <selfrel_offset31>
 8000636:	45c3      	cmp	fp, r8
 8000638:	f100 30ff 	add.w	r0, r0, #4294967295
 800063c:	d805      	bhi.n	800064a <search_EIT_table+0x4a>
 800063e:	4540      	cmp	r0, r8
 8000640:	d209      	bcs.n	8000656 <search_EIT_table+0x56>
 8000642:	1c67      	adds	r7, r4, #1
 8000644:	e7e5      	b.n	8000612 <search_EIT_table+0x12>
 8000646:	45c3      	cmp	fp, r8
 8000648:	d905      	bls.n	8000656 <search_EIT_table+0x56>
 800064a:	42a7      	cmp	r7, r4
 800064c:	d002      	beq.n	8000654 <search_EIT_table+0x54>
 800064e:	f104 39ff 	add.w	r9, r4, #4294967295
 8000652:	e7de      	b.n	8000612 <search_EIT_table+0x12>
 8000654:	2100      	movs	r1, #0
 8000656:	4608      	mov	r0, r1
 8000658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800065c:	4608      	mov	r0, r1
 800065e:	4770      	bx	lr

08000660 <__gnu_unwind_get_pr_addr>:
 8000660:	2801      	cmp	r0, #1
 8000662:	d007      	beq.n	8000674 <__gnu_unwind_get_pr_addr+0x14>
 8000664:	2802      	cmp	r0, #2
 8000666:	d007      	beq.n	8000678 <__gnu_unwind_get_pr_addr+0x18>
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <__gnu_unwind_get_pr_addr+0x1c>)
 800066a:	2800      	cmp	r0, #0
 800066c:	bf0c      	ite	eq
 800066e:	4618      	moveq	r0, r3
 8000670:	2000      	movne	r0, #0
 8000672:	4770      	bx	lr
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <__gnu_unwind_get_pr_addr+0x20>)
 8000676:	4770      	bx	lr
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <__gnu_unwind_get_pr_addr+0x24>)
 800067a:	4770      	bx	lr
 800067c:	08000d65 	.word	0x08000d65
 8000680:	08000d69 	.word	0x08000d69
 8000684:	08000d6d 	.word	0x08000d6d

08000688 <get_eit_entry>:
 8000688:	b530      	push	{r4, r5, lr}
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <get_eit_entry+0x94>)
 800068c:	b083      	sub	sp, #12
 800068e:	4604      	mov	r4, r0
 8000690:	1e8d      	subs	r5, r1, #2
 8000692:	b37b      	cbz	r3, 80006f4 <get_eit_entry+0x6c>
 8000694:	a901      	add	r1, sp, #4
 8000696:	4628      	mov	r0, r5
 8000698:	f3af 8000 	nop.w
 800069c:	b320      	cbz	r0, 80006e8 <get_eit_entry+0x60>
 800069e:	9901      	ldr	r1, [sp, #4]
 80006a0:	462a      	mov	r2, r5
 80006a2:	f7ff ffad 	bl	8000600 <search_EIT_table>
 80006a6:	4601      	mov	r1, r0
 80006a8:	b1f0      	cbz	r0, 80006e8 <get_eit_entry+0x60>
 80006aa:	f7ff ff9f 	bl	80005ec <selfrel_offset31>
 80006ae:	684b      	ldr	r3, [r1, #4]
 80006b0:	64a0      	str	r0, [r4, #72]	; 0x48
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d012      	beq.n	80006dc <get_eit_entry+0x54>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f101 0004 	add.w	r0, r1, #4
 80006bc:	db20      	blt.n	8000700 <get_eit_entry+0x78>
 80006be:	f7ff ff95 	bl	80005ec <selfrel_offset31>
 80006c2:	2300      	movs	r3, #0
 80006c4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80006c6:	6523      	str	r3, [r4, #80]	; 0x50
 80006c8:	6803      	ldr	r3, [r0, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db1c      	blt.n	8000708 <get_eit_entry+0x80>
 80006ce:	f7ff ff8d 	bl	80005ec <selfrel_offset31>
 80006d2:	2300      	movs	r3, #0
 80006d4:	6120      	str	r0, [r4, #16]
 80006d6:	4618      	mov	r0, r3
 80006d8:	b003      	add	sp, #12
 80006da:	bd30      	pop	{r4, r5, pc}
 80006dc:	2300      	movs	r3, #0
 80006de:	6123      	str	r3, [r4, #16]
 80006e0:	2305      	movs	r3, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	b003      	add	sp, #12
 80006e6:	bd30      	pop	{r4, r5, pc}
 80006e8:	2300      	movs	r3, #0
 80006ea:	6123      	str	r3, [r4, #16]
 80006ec:	2309      	movs	r3, #9
 80006ee:	4618      	mov	r0, r3
 80006f0:	b003      	add	sp, #12
 80006f2:	bd30      	pop	{r4, r5, pc}
 80006f4:	490a      	ldr	r1, [pc, #40]	; (8000720 <get_eit_entry+0x98>)
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <get_eit_entry+0x9c>)
 80006f8:	1a09      	subs	r1, r1, r0
 80006fa:	10c9      	asrs	r1, r1, #3
 80006fc:	9101      	str	r1, [sp, #4]
 80006fe:	e7cf      	b.n	80006a0 <get_eit_entry+0x18>
 8000700:	2301      	movs	r3, #1
 8000702:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000704:	6523      	str	r3, [r4, #80]	; 0x50
 8000706:	e7df      	b.n	80006c8 <get_eit_entry+0x40>
 8000708:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800070c:	f7ff ffa8 	bl	8000660 <__gnu_unwind_get_pr_addr>
 8000710:	2800      	cmp	r0, #0
 8000712:	6120      	str	r0, [r4, #16]
 8000714:	bf14      	ite	ne
 8000716:	2300      	movne	r3, #0
 8000718:	2309      	moveq	r3, #9
 800071a:	e7dc      	b.n	80006d6 <get_eit_entry+0x4e>
 800071c:	00000000 	.word	0x00000000
 8000720:	08008430 	.word	0x08008430
 8000724:	08008340 	.word	0x08008340

08000728 <restore_non_core_regs>:
 8000728:	6803      	ldr	r3, [r0, #0]
 800072a:	07da      	lsls	r2, r3, #31
 800072c:	b510      	push	{r4, lr}
 800072e:	4604      	mov	r4, r0
 8000730:	d406      	bmi.n	8000740 <restore_non_core_regs+0x18>
 8000732:	079b      	lsls	r3, r3, #30
 8000734:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000738:	d509      	bpl.n	800074e <restore_non_core_regs+0x26>
 800073a:	f000 fc51 	bl	8000fe0 <__gnu_Unwind_Restore_VFP_D>
 800073e:	6823      	ldr	r3, [r4, #0]
 8000740:	0759      	lsls	r1, r3, #29
 8000742:	d509      	bpl.n	8000758 <restore_non_core_regs+0x30>
 8000744:	071a      	lsls	r2, r3, #28
 8000746:	d50e      	bpl.n	8000766 <restore_non_core_regs+0x3e>
 8000748:	06db      	lsls	r3, r3, #27
 800074a:	d513      	bpl.n	8000774 <restore_non_core_regs+0x4c>
 800074c:	bd10      	pop	{r4, pc}
 800074e:	f000 fc3f 	bl	8000fd0 <__gnu_Unwind_Restore_VFP>
 8000752:	6823      	ldr	r3, [r4, #0]
 8000754:	0759      	lsls	r1, r3, #29
 8000756:	d4f5      	bmi.n	8000744 <restore_non_core_regs+0x1c>
 8000758:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800075c:	f000 fc48 	bl	8000ff0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	071a      	lsls	r2, r3, #28
 8000764:	d4f0      	bmi.n	8000748 <restore_non_core_regs+0x20>
 8000766:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800076a:	f000 fc49 	bl	8001000 <__gnu_Unwind_Restore_WMMXD>
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	06db      	lsls	r3, r3, #27
 8000772:	d4eb      	bmi.n	800074c <restore_non_core_regs+0x24>
 8000774:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800077c:	f000 bc84 	b.w	8001088 <__gnu_Unwind_Restore_WMMXC>

08000780 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000780:	6803      	ldr	r3, [r0, #0]
 8000782:	b103      	cbz	r3, 8000786 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000784:	4403      	add	r3, r0
 8000786:	4618      	mov	r0, r3
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop

0800078c <__gnu_unwind_24bit.isra.1>:
 800078c:	2009      	movs	r0, #9
 800078e:	4770      	bx	lr

08000790 <_Unwind_DebugHook>:
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop

08000794 <unwind_phase2>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4604      	mov	r4, r0
 8000798:	460d      	mov	r5, r1
 800079a:	e008      	b.n	80007ae <unwind_phase2+0x1a>
 800079c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800079e:	6163      	str	r3, [r4, #20]
 80007a0:	462a      	mov	r2, r5
 80007a2:	6923      	ldr	r3, [r4, #16]
 80007a4:	4621      	mov	r1, r4
 80007a6:	2001      	movs	r0, #1
 80007a8:	4798      	blx	r3
 80007aa:	2808      	cmp	r0, #8
 80007ac:	d108      	bne.n	80007c0 <unwind_phase2+0x2c>
 80007ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007b0:	4620      	mov	r0, r4
 80007b2:	f7ff ff69 	bl	8000688 <get_eit_entry>
 80007b6:	4606      	mov	r6, r0
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d0ef      	beq.n	800079c <unwind_phase2+0x8>
 80007bc:	f007 fc4d 	bl	800805a <abort>
 80007c0:	2807      	cmp	r0, #7
 80007c2:	d1fb      	bne.n	80007bc <unwind_phase2+0x28>
 80007c4:	4630      	mov	r0, r6
 80007c6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007c8:	f7ff ffe2 	bl	8000790 <_Unwind_DebugHook>
 80007cc:	1d28      	adds	r0, r5, #4
 80007ce:	f000 fbf3 	bl	8000fb8 <__restore_core_regs>
 80007d2:	bf00      	nop

080007d4 <unwind_phase2_forced>:
 80007d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007d8:	1d0c      	adds	r4, r1, #4
 80007da:	4605      	mov	r5, r0
 80007dc:	4692      	mov	sl, r2
 80007de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007e0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80007e4:	ae03      	add	r6, sp, #12
 80007e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007f4:	ac02      	add	r4, sp, #8
 80007f6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80007fa:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80007fe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000802:	2300      	movs	r3, #0
 8000804:	4628      	mov	r0, r5
 8000806:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000808:	6023      	str	r3, [r4, #0]
 800080a:	f7ff ff3d 	bl	8000688 <get_eit_entry>
 800080e:	f1ba 0f00 	cmp.w	sl, #0
 8000812:	4607      	mov	r7, r0
 8000814:	bf14      	ite	ne
 8000816:	260a      	movne	r6, #10
 8000818:	2609      	moveq	r6, #9
 800081a:	b17f      	cbz	r7, 800083c <unwind_phase2_forced+0x68>
 800081c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800081e:	f046 0110 	orr.w	r1, r6, #16
 8000822:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000826:	462a      	mov	r2, r5
 8000828:	6463      	str	r3, [r4, #68]	; 0x44
 800082a:	2001      	movs	r0, #1
 800082c:	462b      	mov	r3, r5
 800082e:	47c0      	blx	r8
 8000830:	bb78      	cbnz	r0, 8000892 <unwind_phase2_forced+0xbe>
 8000832:	4638      	mov	r0, r7
 8000834:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800083e:	616b      	str	r3, [r5, #20]
 8000840:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000844:	4621      	mov	r1, r4
 8000846:	a87a      	add	r0, sp, #488	; 0x1e8
 8000848:	f007 fb82 	bl	8007f50 <memcpy>
 800084c:	692b      	ldr	r3, [r5, #16]
 800084e:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000850:	4629      	mov	r1, r5
 8000852:	4630      	mov	r0, r6
 8000854:	4798      	blx	r3
 8000856:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000858:	4682      	mov	sl, r0
 800085a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800085e:	4631      	mov	r1, r6
 8000860:	6463      	str	r3, [r4, #68]	; 0x44
 8000862:	462a      	mov	r2, r5
 8000864:	462b      	mov	r3, r5
 8000866:	2001      	movs	r0, #1
 8000868:	47c0      	blx	r8
 800086a:	b990      	cbnz	r0, 8000892 <unwind_phase2_forced+0xbe>
 800086c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000870:	a97a      	add	r1, sp, #488	; 0x1e8
 8000872:	4620      	mov	r0, r4
 8000874:	f007 fb6c 	bl	8007f50 <memcpy>
 8000878:	f1ba 0f08 	cmp.w	sl, #8
 800087c:	d106      	bne.n	800088c <unwind_phase2_forced+0xb8>
 800087e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000880:	4628      	mov	r0, r5
 8000882:	f7ff ff01 	bl	8000688 <get_eit_entry>
 8000886:	2609      	movs	r6, #9
 8000888:	4607      	mov	r7, r0
 800088a:	e7c6      	b.n	800081a <unwind_phase2_forced+0x46>
 800088c:	f1ba 0f07 	cmp.w	sl, #7
 8000890:	d005      	beq.n	800089e <unwind_phase2_forced+0xca>
 8000892:	2709      	movs	r7, #9
 8000894:	4638      	mov	r0, r7
 8000896:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	4638      	mov	r0, r7
 80008a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80008a2:	f7ff ff75 	bl	8000790 <_Unwind_DebugHook>
 80008a6:	a803      	add	r0, sp, #12
 80008a8:	f000 fb86 	bl	8000fb8 <__restore_core_regs>

080008ac <_Unwind_GetCFA>:
 80008ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80008ae:	4770      	bx	lr

080008b0 <__gnu_Unwind_RaiseException>:
 80008b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80008b4:	640b      	str	r3, [r1, #64]	; 0x40
 80008b6:	1d0e      	adds	r6, r1, #4
 80008b8:	460f      	mov	r7, r1
 80008ba:	4604      	mov	r4, r0
 80008bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008be:	b0f9      	sub	sp, #484	; 0x1e4
 80008c0:	ad01      	add	r5, sp, #4
 80008c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008d0:	f04f 36ff 	mov.w	r6, #4294967295
 80008d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008d8:	9600      	str	r6, [sp, #0]
 80008da:	e006      	b.n	80008ea <__gnu_Unwind_RaiseException+0x3a>
 80008dc:	6923      	ldr	r3, [r4, #16]
 80008de:	466a      	mov	r2, sp
 80008e0:	4621      	mov	r1, r4
 80008e2:	4798      	blx	r3
 80008e4:	2808      	cmp	r0, #8
 80008e6:	4605      	mov	r5, r0
 80008e8:	d108      	bne.n	80008fc <__gnu_Unwind_RaiseException+0x4c>
 80008ea:	9910      	ldr	r1, [sp, #64]	; 0x40
 80008ec:	4620      	mov	r0, r4
 80008ee:	f7ff fecb 	bl	8000688 <get_eit_entry>
 80008f2:	2800      	cmp	r0, #0
 80008f4:	d0f2      	beq.n	80008dc <__gnu_Unwind_RaiseException+0x2c>
 80008f6:	2009      	movs	r0, #9
 80008f8:	b079      	add	sp, #484	; 0x1e4
 80008fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fc:	4668      	mov	r0, sp
 80008fe:	f7ff ff13 	bl	8000728 <restore_non_core_regs>
 8000902:	2d06      	cmp	r5, #6
 8000904:	d1f7      	bne.n	80008f6 <__gnu_Unwind_RaiseException+0x46>
 8000906:	4639      	mov	r1, r7
 8000908:	4620      	mov	r0, r4
 800090a:	f7ff ff43 	bl	8000794 <unwind_phase2>
 800090e:	bf00      	nop

08000910 <__gnu_Unwind_ForcedUnwind>:
 8000910:	b430      	push	{r4, r5}
 8000912:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000914:	60c1      	str	r1, [r0, #12]
 8000916:	6182      	str	r2, [r0, #24]
 8000918:	4619      	mov	r1, r3
 800091a:	641d      	str	r5, [r3, #64]	; 0x40
 800091c:	2200      	movs	r2, #0
 800091e:	bc30      	pop	{r4, r5}
 8000920:	e758      	b.n	80007d4 <unwind_phase2_forced>
 8000922:	bf00      	nop

08000924 <__gnu_Unwind_Resume>:
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	68c6      	ldr	r6, [r0, #12]
 8000928:	6943      	ldr	r3, [r0, #20]
 800092a:	640b      	str	r3, [r1, #64]	; 0x40
 800092c:	b126      	cbz	r6, 8000938 <__gnu_Unwind_Resume+0x14>
 800092e:	2201      	movs	r2, #1
 8000930:	f7ff ff50 	bl	80007d4 <unwind_phase2_forced>
 8000934:	f007 fb91 	bl	800805a <abort>
 8000938:	6903      	ldr	r3, [r0, #16]
 800093a:	460a      	mov	r2, r1
 800093c:	4604      	mov	r4, r0
 800093e:	460d      	mov	r5, r1
 8000940:	4601      	mov	r1, r0
 8000942:	2002      	movs	r0, #2
 8000944:	4798      	blx	r3
 8000946:	2807      	cmp	r0, #7
 8000948:	d007      	beq.n	800095a <__gnu_Unwind_Resume+0x36>
 800094a:	2808      	cmp	r0, #8
 800094c:	d103      	bne.n	8000956 <__gnu_Unwind_Resume+0x32>
 800094e:	4629      	mov	r1, r5
 8000950:	4620      	mov	r0, r4
 8000952:	f7ff ff1f 	bl	8000794 <unwind_phase2>
 8000956:	f007 fb80 	bl	800805a <abort>
 800095a:	4630      	mov	r0, r6
 800095c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800095e:	f7ff ff17 	bl	8000790 <_Unwind_DebugHook>
 8000962:	1d28      	adds	r0, r5, #4
 8000964:	f000 fb28 	bl	8000fb8 <__restore_core_regs>

08000968 <__gnu_Unwind_Resume_or_Rethrow>:
 8000968:	68c2      	ldr	r2, [r0, #12]
 800096a:	b11a      	cbz	r2, 8000974 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800096c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800096e:	640a      	str	r2, [r1, #64]	; 0x40
 8000970:	2200      	movs	r2, #0
 8000972:	e72f      	b.n	80007d4 <unwind_phase2_forced>
 8000974:	e79c      	b.n	80008b0 <__gnu_Unwind_RaiseException>
 8000976:	bf00      	nop

08000978 <_Unwind_Complete>:
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <_Unwind_DeleteException>:
 800097c:	6883      	ldr	r3, [r0, #8]
 800097e:	b113      	cbz	r3, 8000986 <_Unwind_DeleteException+0xa>
 8000980:	4601      	mov	r1, r0
 8000982:	2001      	movs	r0, #1
 8000984:	4718      	bx	r3
 8000986:	4770      	bx	lr

08000988 <_Unwind_VRS_Get>:
 8000988:	b500      	push	{lr}
 800098a:	2904      	cmp	r1, #4
 800098c:	d807      	bhi.n	800099e <_Unwind_VRS_Get+0x16>
 800098e:	e8df f001 	tbb	[pc, r1]
 8000992:	0903      	.short	0x0903
 8000994:	0906      	.short	0x0906
 8000996:	09          	.byte	0x09
 8000997:	00          	.byte	0x00
 8000998:	b90b      	cbnz	r3, 800099e <_Unwind_VRS_Get+0x16>
 800099a:	2a0f      	cmp	r2, #15
 800099c:	d905      	bls.n	80009aa <_Unwind_VRS_Get+0x22>
 800099e:	2002      	movs	r0, #2
 80009a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a4:	2001      	movs	r0, #1
 80009a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009aa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	6853      	ldr	r3, [r2, #4]
 80009b2:	9a01      	ldr	r2, [sp, #4]
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009ba:	bf00      	nop

080009bc <_Unwind_GetGR>:
 80009bc:	b510      	push	{r4, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	2300      	movs	r3, #0
 80009c2:	ac03      	add	r4, sp, #12
 80009c4:	460a      	mov	r2, r1
 80009c6:	9400      	str	r4, [sp, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f7ff ffdd 	bl	8000988 <_Unwind_VRS_Get>
 80009ce:	9803      	ldr	r0, [sp, #12]
 80009d0:	b004      	add	sp, #16
 80009d2:	bd10      	pop	{r4, pc}

080009d4 <_Unwind_VRS_Set>:
 80009d4:	b500      	push	{lr}
 80009d6:	2904      	cmp	r1, #4
 80009d8:	d807      	bhi.n	80009ea <_Unwind_VRS_Set+0x16>
 80009da:	e8df f001 	tbb	[pc, r1]
 80009de:	0903      	.short	0x0903
 80009e0:	0906      	.short	0x0906
 80009e2:	09          	.byte	0x09
 80009e3:	00          	.byte	0x00
 80009e4:	b90b      	cbnz	r3, 80009ea <_Unwind_VRS_Set+0x16>
 80009e6:	2a0f      	cmp	r2, #15
 80009e8:	d905      	bls.n	80009f6 <_Unwind_VRS_Set+0x22>
 80009ea:	2002      	movs	r0, #2
 80009ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f0:	2001      	movs	r0, #1
 80009f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f6:	9901      	ldr	r1, [sp, #4]
 80009f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80009fc:	6809      	ldr	r1, [r1, #0]
 80009fe:	6051      	str	r1, [r2, #4]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a06:	bf00      	nop

08000a08 <_Unwind_SetGR>:
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	ac04      	add	r4, sp, #16
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000a14:	460a      	mov	r2, r1
 8000a16:	9400      	str	r4, [sp, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f7ff ffdb 	bl	80009d4 <_Unwind_VRS_Set>
 8000a1e:	b004      	add	sp, #16
 8000a20:	bd10      	pop	{r4, pc}
 8000a22:	bf00      	nop

08000a24 <__gnu_Unwind_Backtrace>:
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	1d15      	adds	r5, r2, #4
 8000a2c:	4607      	mov	r7, r0
 8000a2e:	460e      	mov	r6, r1
 8000a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a32:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000a36:	ac17      	add	r4, sp, #92	; 0x5c
 8000a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a46:	f04f 35ff 	mov.w	r5, #4294967295
 8000a4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a4e:	9516      	str	r5, [sp, #88]	; 0x58
 8000a50:	e010      	b.n	8000a74 <__gnu_Unwind_Backtrace+0x50>
 8000a52:	a816      	add	r0, sp, #88	; 0x58
 8000a54:	f7ff ffd8 	bl	8000a08 <_Unwind_SetGR>
 8000a58:	4631      	mov	r1, r6
 8000a5a:	a816      	add	r0, sp, #88	; 0x58
 8000a5c:	47b8      	blx	r7
 8000a5e:	aa16      	add	r2, sp, #88	; 0x58
 8000a60:	4669      	mov	r1, sp
 8000a62:	b978      	cbnz	r0, 8000a84 <__gnu_Unwind_Backtrace+0x60>
 8000a64:	9b04      	ldr	r3, [sp, #16]
 8000a66:	2008      	movs	r0, #8
 8000a68:	4798      	blx	r3
 8000a6a:	2805      	cmp	r0, #5
 8000a6c:	4604      	mov	r4, r0
 8000a6e:	d00a      	beq.n	8000a86 <__gnu_Unwind_Backtrace+0x62>
 8000a70:	2809      	cmp	r0, #9
 8000a72:	d007      	beq.n	8000a84 <__gnu_Unwind_Backtrace+0x60>
 8000a74:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a76:	4668      	mov	r0, sp
 8000a78:	f7ff fe06 	bl	8000688 <get_eit_entry>
 8000a7c:	466a      	mov	r2, sp
 8000a7e:	210c      	movs	r1, #12
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d0e6      	beq.n	8000a52 <__gnu_Unwind_Backtrace+0x2e>
 8000a84:	2409      	movs	r4, #9
 8000a86:	a816      	add	r0, sp, #88	; 0x58
 8000a88:	f7ff fe4e 	bl	8000728 <restore_non_core_regs>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a94 <__gnu_unwind_pr_common>:
 8000a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a98:	460d      	mov	r5, r1
 8000a9a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000a9c:	b08b      	sub	sp, #44	; 0x2c
 8000a9e:	1d0c      	adds	r4, r1, #4
 8000aa0:	6809      	ldr	r1, [r1, #0]
 8000aa2:	9107      	str	r1, [sp, #28]
 8000aa4:	4691      	mov	r9, r2
 8000aa6:	9408      	str	r4, [sp, #32]
 8000aa8:	f000 0b03 	and.w	fp, r0, #3
 8000aac:	461e      	mov	r6, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d160      	bne.n	8000b74 <__gnu_unwind_pr_common+0xe0>
 8000ab2:	0209      	lsls	r1, r1, #8
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	9107      	str	r1, [sp, #28]
 8000ab8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000abc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000ac0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ac2:	f1bb 0f02 	cmp.w	fp, #2
 8000ac6:	bf08      	it	eq
 8000ac8:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000aca:	f013 0301 	ands.w	r3, r3, #1
 8000ace:	d140      	bne.n	8000b52 <__gnu_unwind_pr_common+0xbe>
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	f000 0308 	and.w	r3, r0, #8
 8000ad6:	9303      	str	r3, [sp, #12]
 8000ad8:	f8d4 8000 	ldr.w	r8, [r4]
 8000adc:	f1b8 0f00 	cmp.w	r8, #0
 8000ae0:	d039      	beq.n	8000b56 <__gnu_unwind_pr_common+0xc2>
 8000ae2:	2e02      	cmp	r6, #2
 8000ae4:	d043      	beq.n	8000b6e <__gnu_unwind_pr_common+0xda>
 8000ae6:	f8b4 8000 	ldrh.w	r8, [r4]
 8000aea:	8867      	ldrh	r7, [r4, #2]
 8000aec:	3404      	adds	r4, #4
 8000aee:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000af0:	f027 0a01 	bic.w	sl, r7, #1
 8000af4:	210f      	movs	r1, #15
 8000af6:	4648      	mov	r0, r9
 8000af8:	449a      	add	sl, r3
 8000afa:	f7ff ff5f 	bl	80009bc <_Unwind_GetGR>
 8000afe:	4582      	cmp	sl, r0
 8000b00:	d833      	bhi.n	8000b6a <__gnu_unwind_pr_common+0xd6>
 8000b02:	f028 0301 	bic.w	r3, r8, #1
 8000b06:	449a      	add	sl, r3
 8000b08:	4550      	cmp	r0, sl
 8000b0a:	bf2c      	ite	cs
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	007f      	lsls	r7, r7, #1
 8000b12:	f007 0702 	and.w	r7, r7, #2
 8000b16:	f008 0801 	and.w	r8, r8, #1
 8000b1a:	ea47 0708 	orr.w	r7, r7, r8
 8000b1e:	2f01      	cmp	r7, #1
 8000b20:	d03e      	beq.n	8000ba0 <__gnu_unwind_pr_common+0x10c>
 8000b22:	d335      	bcc.n	8000b90 <__gnu_unwind_pr_common+0xfc>
 8000b24:	2f02      	cmp	r7, #2
 8000b26:	d11c      	bne.n	8000b62 <__gnu_unwind_pr_common+0xce>
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b2e:	9202      	str	r2, [sp, #8]
 8000b30:	f1bb 0f00 	cmp.w	fp, #0
 8000b34:	d176      	bne.n	8000c24 <__gnu_unwind_pr_common+0x190>
 8000b36:	b128      	cbz	r0, 8000b44 <__gnu_unwind_pr_common+0xb0>
 8000b38:	9903      	ldr	r1, [sp, #12]
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d07e      	beq.n	8000c3c <__gnu_unwind_pr_common+0x1a8>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	f000 80a6 	beq.w	8000c90 <__gnu_unwind_pr_common+0x1fc>
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db77      	blt.n	8000c38 <__gnu_unwind_pr_common+0x1a4>
 8000b48:	9b02      	ldr	r3, [sp, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000b50:	e7c2      	b.n	8000ad8 <__gnu_unwind_pr_common+0x44>
 8000b52:	2300      	movs	r3, #0
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	2e02      	cmp	r6, #2
 8000b58:	dd3e      	ble.n	8000bd8 <__gnu_unwind_pr_common+0x144>
 8000b5a:	f7ff fe17 	bl	800078c <__gnu_unwind_24bit.isra.1>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d040      	beq.n	8000be4 <__gnu_unwind_pr_common+0x150>
 8000b62:	2009      	movs	r0, #9
 8000b64:	b00b      	add	sp, #44	; 0x2c
 8000b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	e7d0      	b.n	8000b10 <__gnu_unwind_pr_common+0x7c>
 8000b6e:	6867      	ldr	r7, [r4, #4]
 8000b70:	3408      	adds	r4, #8
 8000b72:	e7bc      	b.n	8000aee <__gnu_unwind_pr_common+0x5a>
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	dca3      	bgt.n	8000ac0 <__gnu_unwind_pr_common+0x2c>
 8000b78:	0c0b      	lsrs	r3, r1, #16
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	0409      	lsls	r1, r1, #16
 8000b7e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000b82:	2302      	movs	r3, #2
 8000b84:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000b88:	9107      	str	r1, [sp, #28]
 8000b8a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b8e:	e797      	b.n	8000ac0 <__gnu_unwind_pr_common+0x2c>
 8000b90:	f1bb 0f00 	cmp.w	fp, #0
 8000b94:	d002      	beq.n	8000b9c <__gnu_unwind_pr_common+0x108>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	f040 80bd 	bne.w	8000d16 <__gnu_unwind_pr_common+0x282>
 8000b9c:	3404      	adds	r4, #4
 8000b9e:	e79b      	b.n	8000ad8 <__gnu_unwind_pr_common+0x44>
 8000ba0:	f1bb 0f00 	cmp.w	fp, #0
 8000ba4:	d125      	bne.n	8000bf2 <__gnu_unwind_pr_common+0x15e>
 8000ba6:	b1a8      	cbz	r0, 8000bd4 <__gnu_unwind_pr_common+0x140>
 8000ba8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000bac:	1c99      	adds	r1, r3, #2
 8000bae:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000bb2:	d0d6      	beq.n	8000b62 <__gnu_unwind_pr_common+0xce>
 8000bb4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000bb8:	3301      	adds	r3, #1
 8000bba:	9106      	str	r1, [sp, #24]
 8000bbc:	f000 80a3 	beq.w	8000d06 <__gnu_unwind_pr_common+0x272>
 8000bc0:	1d20      	adds	r0, r4, #4
 8000bc2:	f7ff fddd 	bl	8000780 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bc6:	ab06      	add	r3, sp, #24
 8000bc8:	4601      	mov	r1, r0
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d177      	bne.n	8000cc4 <__gnu_unwind_pr_common+0x230>
 8000bd4:	3408      	adds	r4, #8
 8000bd6:	e77f      	b.n	8000ad8 <__gnu_unwind_pr_common+0x44>
 8000bd8:	a907      	add	r1, sp, #28
 8000bda:	4648      	mov	r0, r9
 8000bdc:	f000 faee 	bl	80011bc <__gnu_unwind_execute>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d1be      	bne.n	8000b62 <__gnu_unwind_pr_common+0xce>
 8000be4:	9b01      	ldr	r3, [sp, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d15c      	bne.n	8000ca4 <__gnu_unwind_pr_common+0x210>
 8000bea:	2008      	movs	r0, #8
 8000bec:	b00b      	add	sp, #44	; 0x2c
 8000bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bf2:	210d      	movs	r1, #13
 8000bf4:	4648      	mov	r0, r9
 8000bf6:	6a2f      	ldr	r7, [r5, #32]
 8000bf8:	f7ff fee0 	bl	80009bc <_Unwind_GetGR>
 8000bfc:	4287      	cmp	r7, r0
 8000bfe:	d1e9      	bne.n	8000bd4 <__gnu_unwind_pr_common+0x140>
 8000c00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c02:	429c      	cmp	r4, r3
 8000c04:	d1e6      	bne.n	8000bd4 <__gnu_unwind_pr_common+0x140>
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff fcf0 	bl	80005ec <selfrel_offset31>
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	4602      	mov	r2, r0
 8000c10:	4648      	mov	r0, r9
 8000c12:	f7ff fef9 	bl	8000a08 <_Unwind_SetGR>
 8000c16:	4648      	mov	r0, r9
 8000c18:	462a      	mov	r2, r5
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f7ff fef4 	bl	8000a08 <_Unwind_SetGR>
 8000c20:	2007      	movs	r0, #7
 8000c22:	e79f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000c24:	210d      	movs	r1, #13
 8000c26:	4648      	mov	r0, r9
 8000c28:	6a2f      	ldr	r7, [r5, #32]
 8000c2a:	f7ff fec7 	bl	80009bc <_Unwind_GetGR>
 8000c2e:	4287      	cmp	r7, r0
 8000c30:	d058      	beq.n	8000ce4 <__gnu_unwind_pr_common+0x250>
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	da87      	bge.n	8000b48 <__gnu_unwind_pr_common+0xb4>
 8000c38:	3404      	adds	r4, #4
 8000c3a:	e785      	b.n	8000b48 <__gnu_unwind_pr_common+0xb4>
 8000c3c:	9b02      	ldr	r3, [sp, #8]
 8000c3e:	b33b      	cbz	r3, 8000c90 <__gnu_unwind_pr_common+0x1fc>
 8000c40:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000c44:	1d27      	adds	r7, r4, #4
 8000c46:	f8cd b010 	str.w	fp, [sp, #16]
 8000c4a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000c4e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000c52:	9605      	str	r6, [sp, #20]
 8000c54:	46a3      	mov	fp, r4
 8000c56:	461c      	mov	r4, r3
 8000c58:	e002      	b.n	8000c60 <__gnu_unwind_pr_common+0x1cc>
 8000c5a:	45b2      	cmp	sl, r6
 8000c5c:	46b0      	mov	r8, r6
 8000c5e:	d016      	beq.n	8000c8e <__gnu_unwind_pr_common+0x1fa>
 8000c60:	4638      	mov	r0, r7
 8000c62:	9406      	str	r4, [sp, #24]
 8000c64:	f7ff fd8c 	bl	8000780 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000c68:	ab06      	add	r3, sp, #24
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f3af 8000 	nop.w
 8000c74:	f108 0601 	add.w	r6, r8, #1
 8000c78:	3704      	adds	r7, #4
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d0ed      	beq.n	8000c5a <__gnu_unwind_pr_common+0x1c6>
 8000c7e:	9b02      	ldr	r3, [sp, #8]
 8000c80:	9e05      	ldr	r6, [sp, #20]
 8000c82:	4543      	cmp	r3, r8
 8000c84:	465c      	mov	r4, fp
 8000c86:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000c8a:	d1d2      	bne.n	8000c32 <__gnu_unwind_pr_common+0x19e>
 8000c8c:	e000      	b.n	8000c90 <__gnu_unwind_pr_common+0x1fc>
 8000c8e:	465c      	mov	r4, fp
 8000c90:	4648      	mov	r0, r9
 8000c92:	210d      	movs	r1, #13
 8000c94:	f7ff fe92 	bl	80009bc <_Unwind_GetGR>
 8000c98:	9b06      	ldr	r3, [sp, #24]
 8000c9a:	6228      	str	r0, [r5, #32]
 8000c9c:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c9e:	626b      	str	r3, [r5, #36]	; 0x24
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	e75f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	4648      	mov	r0, r9
 8000ca8:	f7ff fe88 	bl	80009bc <_Unwind_GetGR>
 8000cac:	210e      	movs	r1, #14
 8000cae:	4602      	mov	r2, r0
 8000cb0:	4648      	mov	r0, r9
 8000cb2:	f7ff fea9 	bl	8000a08 <_Unwind_SetGR>
 8000cb6:	4648      	mov	r0, r9
 8000cb8:	4a29      	ldr	r2, [pc, #164]	; (8000d60 <__gnu_unwind_pr_common+0x2cc>)
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f7ff fea4 	bl	8000a08 <_Unwind_SetGR>
 8000cc0:	2007      	movs	r0, #7
 8000cc2:	e74f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000cc4:	4607      	mov	r7, r0
 8000cc6:	210d      	movs	r1, #13
 8000cc8:	4648      	mov	r0, r9
 8000cca:	f7ff fe77 	bl	80009bc <_Unwind_GetGR>
 8000cce:	2f02      	cmp	r7, #2
 8000cd0:	6228      	str	r0, [r5, #32]
 8000cd2:	d11d      	bne.n	8000d10 <__gnu_unwind_pr_common+0x27c>
 8000cd4:	462b      	mov	r3, r5
 8000cd6:	9a06      	ldr	r2, [sp, #24]
 8000cd8:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000cdc:	626b      	str	r3, [r5, #36]	; 0x24
 8000cde:	62ac      	str	r4, [r5, #40]	; 0x28
 8000ce0:	2006      	movs	r0, #6
 8000ce2:	e73f      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000ce4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000ce6:	429c      	cmp	r4, r3
 8000ce8:	d1a3      	bne.n	8000c32 <__gnu_unwind_pr_common+0x19e>
 8000cea:	2204      	movs	r2, #4
 8000cec:	2700      	movs	r7, #0
 8000cee:	18a3      	adds	r3, r4, r2
 8000cf0:	9902      	ldr	r1, [sp, #8]
 8000cf2:	62a9      	str	r1, [r5, #40]	; 0x28
 8000cf4:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000cf6:	632a      	str	r2, [r5, #48]	; 0x30
 8000cf8:	636b      	str	r3, [r5, #52]	; 0x34
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	42bb      	cmp	r3, r7
 8000cfe:	db1d      	blt.n	8000d3c <__gnu_unwind_pr_common+0x2a8>
 8000d00:	2301      	movs	r3, #1
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	e720      	b.n	8000b48 <__gnu_unwind_pr_common+0xb4>
 8000d06:	4648      	mov	r0, r9
 8000d08:	210d      	movs	r1, #13
 8000d0a:	f7ff fe57 	bl	80009bc <_Unwind_GetGR>
 8000d0e:	6228      	str	r0, [r5, #32]
 8000d10:	9b06      	ldr	r3, [sp, #24]
 8000d12:	626b      	str	r3, [r5, #36]	; 0x24
 8000d14:	e7e3      	b.n	8000cde <__gnu_unwind_pr_common+0x24a>
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff fc68 	bl	80005ec <selfrel_offset31>
 8000d1c:	3404      	adds	r4, #4
 8000d1e:	4606      	mov	r6, r0
 8000d20:	63ac      	str	r4, [r5, #56]	; 0x38
 8000d22:	4628      	mov	r0, r5
 8000d24:	f3af 8000 	nop.w
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	f43f af1a 	beq.w	8000b62 <__gnu_unwind_pr_common+0xce>
 8000d2e:	4648      	mov	r0, r9
 8000d30:	4632      	mov	r2, r6
 8000d32:	210f      	movs	r1, #15
 8000d34:	f7ff fe68 	bl	8000a08 <_Unwind_SetGR>
 8000d38:	2007      	movs	r0, #7
 8000d3a:	e713      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	3001      	adds	r0, #1
 8000d40:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000d44:	f7ff fc52 	bl	80005ec <selfrel_offset31>
 8000d48:	210f      	movs	r1, #15
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	4648      	mov	r0, r9
 8000d4e:	f7ff fe5b 	bl	8000a08 <_Unwind_SetGR>
 8000d52:	4648      	mov	r0, r9
 8000d54:	462a      	mov	r2, r5
 8000d56:	4639      	mov	r1, r7
 8000d58:	f7ff fe56 	bl	8000a08 <_Unwind_SetGR>
 8000d5c:	2007      	movs	r0, #7
 8000d5e:	e701      	b.n	8000b64 <__gnu_unwind_pr_common+0xd0>
 8000d60:	00000000 	.word	0x00000000

08000d64 <__aeabi_unwind_cpp_pr0>:
 8000d64:	2300      	movs	r3, #0
 8000d66:	e695      	b.n	8000a94 <__gnu_unwind_pr_common>

08000d68 <__aeabi_unwind_cpp_pr1>:
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e693      	b.n	8000a94 <__gnu_unwind_pr_common>

08000d6c <__aeabi_unwind_cpp_pr2>:
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e691      	b.n	8000a94 <__gnu_unwind_pr_common>

08000d70 <_Unwind_VRS_Pop>:
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	4604      	mov	r4, r0
 8000d74:	b0c5      	sub	sp, #276	; 0x114
 8000d76:	2904      	cmp	r1, #4
 8000d78:	d80d      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000d7a:	e8df f001 	tbb	[pc, r1]
 8000d7e:	0353      	.short	0x0353
 8000d80:	310c      	.short	0x310c
 8000d82:	0f          	.byte	0x0f
 8000d83:	00          	.byte	0x00
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d8a:	b295      	uxth	r5, r2
 8000d8c:	d162      	bne.n	8000e54 <_Unwind_VRS_Pop+0xe4>
 8000d8e:	1972      	adds	r2, r6, r5
 8000d90:	2a10      	cmp	r2, #16
 8000d92:	f240 809b 	bls.w	8000ecc <_Unwind_VRS_Pop+0x15c>
 8000d96:	2002      	movs	r0, #2
 8000d98:	b045      	add	sp, #276	; 0x114
 8000d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1fa      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000da0:	2a10      	cmp	r2, #16
 8000da2:	d8f8      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	06d8      	lsls	r0, r3, #27
 8000da8:	f100 80c6 	bmi.w	8000f38 <_Unwind_VRS_Pop+0x1c8>
 8000dac:	ae22      	add	r6, sp, #136	; 0x88
 8000dae:	4630      	mov	r0, r6
 8000db0:	9201      	str	r2, [sp, #4]
 8000db2:	f000 f973 	bl	800109c <__gnu_Unwind_Save_WMMXC>
 8000db6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000db8:	9a01      	ldr	r2, [sp, #4]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2501      	movs	r5, #1
 8000dbe:	fa05 f103 	lsl.w	r1, r5, r3
 8000dc2:	4211      	tst	r1, r2
 8000dc4:	d003      	beq.n	8000dce <_Unwind_VRS_Pop+0x5e>
 8000dc6:	6801      	ldr	r1, [r0, #0]
 8000dc8:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000dcc:	3004      	adds	r0, #4
 8000dce:	3301      	adds	r3, #1
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d1f4      	bne.n	8000dbe <_Unwind_VRS_Pop+0x4e>
 8000dd4:	63a0      	str	r0, [r4, #56]	; 0x38
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	f000 f956 	bl	8001088 <__gnu_Unwind_Restore_WMMXC>
 8000ddc:	2000      	movs	r0, #0
 8000dde:	e7db      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d1d8      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000de4:	0c15      	lsrs	r5, r2, #16
 8000de6:	b297      	uxth	r7, r2
 8000de8:	19eb      	adds	r3, r5, r7
 8000dea:	2b10      	cmp	r3, #16
 8000dec:	d8d3      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	071e      	lsls	r6, r3, #28
 8000df2:	f100 80b5 	bmi.w	8000f60 <_Unwind_VRS_Pop+0x1f0>
 8000df6:	ae22      	add	r6, sp, #136	; 0x88
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f000 f923 	bl	8001044 <__gnu_Unwind_Save_WMMXD>
 8000dfe:	00ed      	lsls	r5, r5, #3
 8000e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e02:	b14f      	cbz	r7, 8000e18 <_Unwind_VRS_Pop+0xa8>
 8000e04:	3d04      	subs	r5, #4
 8000e06:	1971      	adds	r1, r6, r5
 8000e08:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e10:	f841 2f04 	str.w	r2, [r1, #4]!
 8000e14:	4283      	cmp	r3, r0
 8000e16:	d1f9      	bne.n	8000e0c <_Unwind_VRS_Pop+0x9c>
 8000e18:	4630      	mov	r0, r6
 8000e1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8000e1c:	f000 f8f0 	bl	8001000 <__gnu_Unwind_Restore_WMMXD>
 8000e20:	2000      	movs	r0, #0
 8000e22:	e7b9      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1b6      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000e28:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000e2a:	b297      	uxth	r7, r2
 8000e2c:	1d20      	adds	r0, r4, #4
 8000e2e:	2601      	movs	r6, #1
 8000e30:	fa06 f103 	lsl.w	r1, r6, r3
 8000e34:	4239      	tst	r1, r7
 8000e36:	f103 0301 	add.w	r3, r3, #1
 8000e3a:	d002      	beq.n	8000e42 <_Unwind_VRS_Pop+0xd2>
 8000e3c:	6829      	ldr	r1, [r5, #0]
 8000e3e:	6001      	str	r1, [r0, #0]
 8000e40:	3504      	adds	r5, #4
 8000e42:	2b10      	cmp	r3, #16
 8000e44:	f100 0004 	add.w	r0, r0, #4
 8000e48:	d1f2      	bne.n	8000e30 <_Unwind_VRS_Pop+0xc0>
 8000e4a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000e4e:	d13b      	bne.n	8000ec8 <_Unwind_VRS_Pop+0x158>
 8000e50:	63a5      	str	r5, [r4, #56]	; 0x38
 8000e52:	e7a1      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d19e      	bne.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000e58:	1977      	adds	r7, r6, r5
 8000e5a:	2f20      	cmp	r7, #32
 8000e5c:	d89b      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x26>
 8000e5e:	2e0f      	cmp	r6, #15
 8000e60:	d966      	bls.n	8000f30 <_Unwind_VRS_Pop+0x1c0>
 8000e62:	462f      	mov	r7, r5
 8000e64:	2d00      	cmp	r5, #0
 8000e66:	d13a      	bne.n	8000ede <_Unwind_VRS_Pop+0x16e>
 8000e68:	462a      	mov	r2, r5
 8000e6a:	2700      	movs	r7, #0
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e70:	dd72      	ble.n	8000f58 <_Unwind_VRS_Pop+0x1e8>
 8000e72:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000e76:	4601      	mov	r1, r0
 8000e78:	a844      	add	r0, sp, #272	; 0x110
 8000e7a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000e7e:	388c      	subs	r0, #140	; 0x8c
 8000e80:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e84:	f840 5f04 	str.w	r5, [r0, #4]!
 8000e88:	4291      	cmp	r1, r2
 8000e8a:	d1f9      	bne.n	8000e80 <_Unwind_VRS_Pop+0x110>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	b197      	cbz	r7, 8000eb6 <_Unwind_VRS_Pop+0x146>
 8000e90:	2e10      	cmp	r6, #16
 8000e92:	4632      	mov	r2, r6
 8000e94:	a944      	add	r1, sp, #272	; 0x110
 8000e96:	bf38      	it	cc
 8000e98:	2210      	movcc	r2, #16
 8000e9a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000e9e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000ea2:	0079      	lsls	r1, r7, #1
 8000ea4:	3a04      	subs	r2, #4
 8000ea6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000eaa:	f850 5b04 	ldr.w	r5, [r0], #4
 8000eae:	f842 5f04 	str.w	r5, [r2, #4]!
 8000eb2:	4288      	cmp	r0, r1
 8000eb4:	d1f9      	bne.n	8000eaa <_Unwind_VRS_Pop+0x13a>
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d048      	beq.n	8000f4c <_Unwind_VRS_Pop+0x1dc>
 8000eba:	2e0f      	cmp	r6, #15
 8000ebc:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ebe:	d933      	bls.n	8000f28 <_Unwind_VRS_Pop+0x1b8>
 8000ec0:	b117      	cbz	r7, 8000ec8 <_Unwind_VRS_Pop+0x158>
 8000ec2:	a802      	add	r0, sp, #8
 8000ec4:	f000 f894 	bl	8000ff0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ec8:	2000      	movs	r0, #0
 8000eca:	e765      	b.n	8000d98 <_Unwind_VRS_Pop+0x28>
 8000ecc:	2e0f      	cmp	r6, #15
 8000ece:	f63f af62 	bhi.w	8000d96 <_Unwind_VRS_Pop+0x26>
 8000ed2:	2700      	movs	r7, #0
 8000ed4:	6822      	ldr	r2, [r4, #0]
 8000ed6:	07d1      	lsls	r1, r2, #31
 8000ed8:	d417      	bmi.n	8000f0a <_Unwind_VRS_Pop+0x19a>
 8000eda:	2f00      	cmp	r7, #0
 8000edc:	d060      	beq.n	8000fa0 <_Unwind_VRS_Pop+0x230>
 8000ede:	6822      	ldr	r2, [r4, #0]
 8000ee0:	0751      	lsls	r1, r2, #29
 8000ee2:	d445      	bmi.n	8000f70 <_Unwind_VRS_Pop+0x200>
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d04d      	beq.n	8000f84 <_Unwind_VRS_Pop+0x214>
 8000ee8:	2e0f      	cmp	r6, #15
 8000eea:	d806      	bhi.n	8000efa <_Unwind_VRS_Pop+0x18a>
 8000eec:	a822      	add	r0, sp, #136	; 0x88
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	f000 f87a 	bl	8000fe8 <__gnu_Unwind_Save_VFP_D>
 8000ef4:	9b01      	ldr	r3, [sp, #4]
 8000ef6:	2f00      	cmp	r7, #0
 8000ef8:	d0b6      	beq.n	8000e68 <_Unwind_VRS_Pop+0xf8>
 8000efa:	a802      	add	r0, sp, #8
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	f000 f87b 	bl	8000ff8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f02:	9b01      	ldr	r3, [sp, #4]
 8000f04:	f1c6 0210 	rsb	r2, r6, #16
 8000f08:	e7b0      	b.n	8000e6c <_Unwind_VRS_Pop+0xfc>
 8000f0a:	f022 0101 	bic.w	r1, r2, #1
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	6021      	str	r1, [r4, #0]
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	4620      	mov	r0, r4
 8000f16:	d03b      	beq.n	8000f90 <_Unwind_VRS_Pop+0x220>
 8000f18:	f022 0203 	bic.w	r2, r2, #3
 8000f1c:	f840 2b48 	str.w	r2, [r0], #72
 8000f20:	f000 f85a 	bl	8000fd8 <__gnu_Unwind_Save_VFP>
 8000f24:	9b01      	ldr	r3, [sp, #4]
 8000f26:	e7d8      	b.n	8000eda <_Unwind_VRS_Pop+0x16a>
 8000f28:	a822      	add	r0, sp, #136	; 0x88
 8000f2a:	f000 f859 	bl	8000fe0 <__gnu_Unwind_Restore_VFP_D>
 8000f2e:	e7c7      	b.n	8000ec0 <_Unwind_VRS_Pop+0x150>
 8000f30:	2f10      	cmp	r7, #16
 8000f32:	d9ce      	bls.n	8000ed2 <_Unwind_VRS_Pop+0x162>
 8000f34:	3f10      	subs	r7, #16
 8000f36:	e7cd      	b.n	8000ed4 <_Unwind_VRS_Pop+0x164>
 8000f38:	f023 0310 	bic.w	r3, r3, #16
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000f42:	9201      	str	r2, [sp, #4]
 8000f44:	f000 f8aa 	bl	800109c <__gnu_Unwind_Save_WMMXC>
 8000f48:	9a01      	ldr	r2, [sp, #4]
 8000f4a:	e72f      	b.n	8000dac <_Unwind_VRS_Pop+0x3c>
 8000f4c:	3104      	adds	r1, #4
 8000f4e:	63a1      	str	r1, [r4, #56]	; 0x38
 8000f50:	a822      	add	r0, sp, #136	; 0x88
 8000f52:	f000 f83d 	bl	8000fd0 <__gnu_Unwind_Restore_VFP>
 8000f56:	e7b7      	b.n	8000ec8 <_Unwind_VRS_Pop+0x158>
 8000f58:	2f00      	cmp	r7, #0
 8000f5a:	d199      	bne.n	8000e90 <_Unwind_VRS_Pop+0x120>
 8000f5c:	4601      	mov	r1, r0
 8000f5e:	e7aa      	b.n	8000eb6 <_Unwind_VRS_Pop+0x146>
 8000f60:	f023 0308 	bic.w	r3, r3, #8
 8000f64:	6023      	str	r3, [r4, #0]
 8000f66:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000f6a:	f000 f86b 	bl	8001044 <__gnu_Unwind_Save_WMMXD>
 8000f6e:	e742      	b.n	8000df6 <_Unwind_VRS_Pop+0x86>
 8000f70:	4620      	mov	r0, r4
 8000f72:	f022 0204 	bic.w	r2, r2, #4
 8000f76:	f840 2bd0 	str.w	r2, [r0], #208
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f000 f83c 	bl	8000ff8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f80:	9b01      	ldr	r3, [sp, #4]
 8000f82:	e7af      	b.n	8000ee4 <_Unwind_VRS_Pop+0x174>
 8000f84:	a822      	add	r0, sp, #136	; 0x88
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	f000 f826 	bl	8000fd8 <__gnu_Unwind_Save_VFP>
 8000f8c:	9b01      	ldr	r3, [sp, #4]
 8000f8e:	e7b9      	b.n	8000f04 <_Unwind_VRS_Pop+0x194>
 8000f90:	f041 0102 	orr.w	r1, r1, #2
 8000f94:	f840 1b48 	str.w	r1, [r0], #72
 8000f98:	f000 f826 	bl	8000fe8 <__gnu_Unwind_Save_VFP_D>
 8000f9c:	9b01      	ldr	r3, [sp, #4]
 8000f9e:	e79c      	b.n	8000eda <_Unwind_VRS_Pop+0x16a>
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d003      	beq.n	8000fac <_Unwind_VRS_Pop+0x23c>
 8000fa4:	2e0f      	cmp	r6, #15
 8000fa6:	f63f af5f 	bhi.w	8000e68 <_Unwind_VRS_Pop+0xf8>
 8000faa:	e79f      	b.n	8000eec <_Unwind_VRS_Pop+0x17c>
 8000fac:	a822      	add	r0, sp, #136	; 0x88
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f000 f812 	bl	8000fd8 <__gnu_Unwind_Save_VFP>
 8000fb4:	9b01      	ldr	r3, [sp, #4]
 8000fb6:	e757      	b.n	8000e68 <_Unwind_VRS_Pop+0xf8>

08000fb8 <__restore_core_regs>:
 8000fb8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000fbc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000fc0:	469c      	mov	ip, r3
 8000fc2:	46a6      	mov	lr, r4
 8000fc4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000fc8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000fcc:	46e5      	mov	sp, ip
 8000fce:	bd00      	pop	{pc}

08000fd0 <__gnu_Unwind_Restore_VFP>:
 8000fd0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__gnu_Unwind_Save_VFP>:
 8000fd8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <__gnu_Unwind_Restore_VFP_D>:
 8000fe0:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Save_VFP_D>:
 8000fe8:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000ff0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000ff8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <__gnu_Unwind_Restore_WMMXD>:
 8001000:	ecf0 0102 	ldfe	f0, [r0], #8
 8001004:	ecf0 1102 	ldfe	f1, [r0], #8
 8001008:	ecf0 2102 	ldfe	f2, [r0], #8
 800100c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001010:	ecf0 4102 	ldfe	f4, [r0], #8
 8001014:	ecf0 5102 	ldfe	f5, [r0], #8
 8001018:	ecf0 6102 	ldfe	f6, [r0], #8
 800101c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001020:	ecf0 8102 	ldfp	f0, [r0], #8
 8001024:	ecf0 9102 	ldfp	f1, [r0], #8
 8001028:	ecf0 a102 	ldfp	f2, [r0], #8
 800102c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001030:	ecf0 c102 	ldfp	f4, [r0], #8
 8001034:	ecf0 d102 	ldfp	f5, [r0], #8
 8001038:	ecf0 e102 	ldfp	f6, [r0], #8
 800103c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__gnu_Unwind_Save_WMMXD>:
 8001044:	ece0 0102 	stfe	f0, [r0], #8
 8001048:	ece0 1102 	stfe	f1, [r0], #8
 800104c:	ece0 2102 	stfe	f2, [r0], #8
 8001050:	ece0 3102 	stfe	f3, [r0], #8
 8001054:	ece0 4102 	stfe	f4, [r0], #8
 8001058:	ece0 5102 	stfe	f5, [r0], #8
 800105c:	ece0 6102 	stfe	f6, [r0], #8
 8001060:	ece0 7102 	stfe	f7, [r0], #8
 8001064:	ece0 8102 	stfp	f0, [r0], #8
 8001068:	ece0 9102 	stfp	f1, [r0], #8
 800106c:	ece0 a102 	stfp	f2, [r0], #8
 8001070:	ece0 b102 	stfp	f3, [r0], #8
 8001074:	ece0 c102 	stfp	f4, [r0], #8
 8001078:	ece0 d102 	stfp	f5, [r0], #8
 800107c:	ece0 e102 	stfp	f6, [r0], #8
 8001080:	ece0 f102 	stfp	f7, [r0], #8
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <__gnu_Unwind_Restore_WMMXC>:
 8001088:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800108c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001090:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001094:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__gnu_Unwind_Save_WMMXC>:
 800109c:	fca0 8101 	stc2	1, cr8, [r0], #4
 80010a0:	fca0 9101 	stc2	1, cr9, [r0], #4
 80010a4:	fca0 a101 	stc2	1, cr10, [r0], #4
 80010a8:	fca0 b101 	stc2	1, cr11, [r0], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <_Unwind_RaiseException>:
 80010b0:	46ec      	mov	ip, sp
 80010b2:	b500      	push	{lr}
 80010b4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010b8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010c4:	a901      	add	r1, sp, #4
 80010c6:	f7ff fbf3 	bl	80008b0 <__gnu_Unwind_RaiseException>
 80010ca:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ce:	b012      	add	sp, #72	; 0x48
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <_Unwind_Resume>:
 80010d4:	46ec      	mov	ip, sp
 80010d6:	b500      	push	{lr}
 80010d8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010dc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010e8:	a901      	add	r1, sp, #4
 80010ea:	f7ff fc1b 	bl	8000924 <__gnu_Unwind_Resume>
 80010ee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010f2:	b012      	add	sp, #72	; 0x48
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <_Unwind_Resume_or_Rethrow>:
 80010f8:	46ec      	mov	ip, sp
 80010fa:	b500      	push	{lr}
 80010fc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001100:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	e92d 000c 	stmdb	sp!, {r2, r3}
 800110c:	a901      	add	r1, sp, #4
 800110e:	f7ff fc2b 	bl	8000968 <__gnu_Unwind_Resume_or_Rethrow>
 8001112:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001116:	b012      	add	sp, #72	; 0x48
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <_Unwind_ForcedUnwind>:
 800111c:	46ec      	mov	ip, sp
 800111e:	b500      	push	{lr}
 8001120:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001124:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001130:	ab01      	add	r3, sp, #4
 8001132:	f7ff fbed 	bl	8000910 <__gnu_Unwind_ForcedUnwind>
 8001136:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800113a:	b012      	add	sp, #72	; 0x48
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <_Unwind_Backtrace>:
 8001140:	46ec      	mov	ip, sp
 8001142:	b500      	push	{lr}
 8001144:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001148:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001154:	aa01      	add	r2, sp, #4
 8001156:	f7ff fc65 	bl	8000a24 <__gnu_Unwind_Backtrace>
 800115a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800115e:	b012      	add	sp, #72	; 0x48
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <next_unwind_byte>:
 8001164:	7a02      	ldrb	r2, [r0, #8]
 8001166:	b91a      	cbnz	r2, 8001170 <next_unwind_byte+0xc>
 8001168:	7a43      	ldrb	r3, [r0, #9]
 800116a:	b943      	cbnz	r3, 800117e <next_unwind_byte+0x1a>
 800116c:	20b0      	movs	r0, #176	; 0xb0
 800116e:	4770      	bx	lr
 8001170:	6803      	ldr	r3, [r0, #0]
 8001172:	3a01      	subs	r2, #1
 8001174:	7202      	strb	r2, [r0, #8]
 8001176:	021a      	lsls	r2, r3, #8
 8001178:	6002      	str	r2, [r0, #0]
 800117a:	0e18      	lsrs	r0, r3, #24
 800117c:	4770      	bx	lr
 800117e:	6842      	ldr	r2, [r0, #4]
 8001180:	3b01      	subs	r3, #1
 8001182:	b410      	push	{r4}
 8001184:	7243      	strb	r3, [r0, #9]
 8001186:	6813      	ldr	r3, [r2, #0]
 8001188:	2103      	movs	r1, #3
 800118a:	1d14      	adds	r4, r2, #4
 800118c:	7201      	strb	r1, [r0, #8]
 800118e:	021a      	lsls	r2, r3, #8
 8001190:	6044      	str	r4, [r0, #4]
 8001192:	6002      	str	r2, [r0, #0]
 8001194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001198:	0e18      	lsrs	r0, r3, #24
 800119a:	4770      	bx	lr

0800119c <_Unwind_GetGR.constprop.0>:
 800119c:	b500      	push	{lr}
 800119e:	b085      	sub	sp, #20
 80011a0:	aa03      	add	r2, sp, #12
 80011a2:	2300      	movs	r3, #0
 80011a4:	9200      	str	r2, [sp, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	220c      	movs	r2, #12
 80011aa:	f7ff fbed 	bl	8000988 <_Unwind_VRS_Get>
 80011ae:	9803      	ldr	r0, [sp, #12]
 80011b0:	b005      	add	sp, #20
 80011b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011b6:	bf00      	nop

080011b8 <unwind_UCB_from_context>:
 80011b8:	e7f0      	b.n	800119c <_Unwind_GetGR.constprop.0>
 80011ba:	bf00      	nop

080011bc <__gnu_unwind_execute>:
 80011bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011c0:	4606      	mov	r6, r0
 80011c2:	b085      	sub	sp, #20
 80011c4:	460f      	mov	r7, r1
 80011c6:	f04f 0800 	mov.w	r8, #0
 80011ca:	4638      	mov	r0, r7
 80011cc:	f7ff ffca 	bl	8001164 <next_unwind_byte>
 80011d0:	28b0      	cmp	r0, #176	; 0xb0
 80011d2:	4604      	mov	r4, r0
 80011d4:	d023      	beq.n	800121e <__gnu_unwind_execute+0x62>
 80011d6:	0605      	lsls	r5, r0, #24
 80011d8:	d427      	bmi.n	800122a <__gnu_unwind_execute+0x6e>
 80011da:	2300      	movs	r3, #0
 80011dc:	f10d 090c 	add.w	r9, sp, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	0085      	lsls	r5, r0, #2
 80011e4:	220d      	movs	r2, #13
 80011e6:	f8cd 9000 	str.w	r9, [sp]
 80011ea:	4630      	mov	r0, r6
 80011ec:	f7ff fbcc 	bl	8000988 <_Unwind_VRS_Get>
 80011f0:	b2ed      	uxtb	r5, r5
 80011f2:	9b03      	ldr	r3, [sp, #12]
 80011f4:	f8cd 9000 	str.w	r9, [sp]
 80011f8:	0660      	lsls	r0, r4, #25
 80011fa:	f105 0504 	add.w	r5, r5, #4
 80011fe:	bf4c      	ite	mi
 8001200:	1b5d      	submi	r5, r3, r5
 8001202:	18ed      	addpl	r5, r5, r3
 8001204:	2300      	movs	r3, #0
 8001206:	4619      	mov	r1, r3
 8001208:	220d      	movs	r2, #13
 800120a:	4630      	mov	r0, r6
 800120c:	9503      	str	r5, [sp, #12]
 800120e:	f7ff fbe1 	bl	80009d4 <_Unwind_VRS_Set>
 8001212:	4638      	mov	r0, r7
 8001214:	f7ff ffa6 	bl	8001164 <next_unwind_byte>
 8001218:	28b0      	cmp	r0, #176	; 0xb0
 800121a:	4604      	mov	r4, r0
 800121c:	d1db      	bne.n	80011d6 <__gnu_unwind_execute+0x1a>
 800121e:	f1b8 0f00 	cmp.w	r8, #0
 8001222:	f000 8095 	beq.w	8001350 <__gnu_unwind_execute+0x194>
 8001226:	2000      	movs	r0, #0
 8001228:	e01c      	b.n	8001264 <__gnu_unwind_execute+0xa8>
 800122a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800122e:	2b80      	cmp	r3, #128	; 0x80
 8001230:	d05d      	beq.n	80012ee <__gnu_unwind_execute+0x132>
 8001232:	2b90      	cmp	r3, #144	; 0x90
 8001234:	d019      	beq.n	800126a <__gnu_unwind_execute+0xae>
 8001236:	2ba0      	cmp	r3, #160	; 0xa0
 8001238:	d02c      	beq.n	8001294 <__gnu_unwind_execute+0xd8>
 800123a:	2bb0      	cmp	r3, #176	; 0xb0
 800123c:	d03f      	beq.n	80012be <__gnu_unwind_execute+0x102>
 800123e:	2bc0      	cmp	r3, #192	; 0xc0
 8001240:	d06c      	beq.n	800131c <__gnu_unwind_execute+0x160>
 8001242:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001246:	2bd0      	cmp	r3, #208	; 0xd0
 8001248:	d10b      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 800124a:	f000 0207 	and.w	r2, r0, #7
 800124e:	3201      	adds	r2, #1
 8001250:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001254:	2305      	movs	r3, #5
 8001256:	2101      	movs	r1, #1
 8001258:	4630      	mov	r0, r6
 800125a:	f7ff fd89 	bl	8000d70 <_Unwind_VRS_Pop>
 800125e:	2800      	cmp	r0, #0
 8001260:	d0b3      	beq.n	80011ca <__gnu_unwind_execute+0xe>
 8001262:	2009      	movs	r0, #9
 8001264:	b005      	add	sp, #20
 8001266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800126a:	f000 030d 	and.w	r3, r0, #13
 800126e:	2b0d      	cmp	r3, #13
 8001270:	d0f7      	beq.n	8001262 <__gnu_unwind_execute+0xa6>
 8001272:	ad03      	add	r5, sp, #12
 8001274:	2300      	movs	r3, #0
 8001276:	f000 020f 	and.w	r2, r0, #15
 800127a:	4619      	mov	r1, r3
 800127c:	9500      	str	r5, [sp, #0]
 800127e:	4630      	mov	r0, r6
 8001280:	f7ff fb82 	bl	8000988 <_Unwind_VRS_Get>
 8001284:	2300      	movs	r3, #0
 8001286:	9500      	str	r5, [sp, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	220d      	movs	r2, #13
 800128c:	4630      	mov	r0, r6
 800128e:	f7ff fba1 	bl	80009d4 <_Unwind_VRS_Set>
 8001292:	e79a      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001294:	43c2      	mvns	r2, r0
 8001296:	f002 0307 	and.w	r3, r2, #7
 800129a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800129e:	411a      	asrs	r2, r3
 80012a0:	0701      	lsls	r1, r0, #28
 80012a2:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	bf48      	it	mi
 80012ac:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80012b0:	4619      	mov	r1, r3
 80012b2:	4630      	mov	r0, r6
 80012b4:	f7ff fd5c 	bl	8000d70 <_Unwind_VRS_Pop>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d1d2      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 80012bc:	e785      	b.n	80011ca <__gnu_unwind_execute+0xe>
 80012be:	28b1      	cmp	r0, #177	; 0xb1
 80012c0:	d057      	beq.n	8001372 <__gnu_unwind_execute+0x1b6>
 80012c2:	28b2      	cmp	r0, #178	; 0xb2
 80012c4:	d068      	beq.n	8001398 <__gnu_unwind_execute+0x1dc>
 80012c6:	28b3      	cmp	r0, #179	; 0xb3
 80012c8:	f000 8095 	beq.w	80013f6 <__gnu_unwind_execute+0x23a>
 80012cc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80012d0:	2bb4      	cmp	r3, #180	; 0xb4
 80012d2:	d0c6      	beq.n	8001262 <__gnu_unwind_execute+0xa6>
 80012d4:	f000 0207 	and.w	r2, r0, #7
 80012d8:	3201      	adds	r2, #1
 80012da:	2301      	movs	r3, #1
 80012dc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80012e0:	4619      	mov	r1, r3
 80012e2:	4630      	mov	r0, r6
 80012e4:	f7ff fd44 	bl	8000d70 <_Unwind_VRS_Pop>
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d1ba      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 80012ec:	e76d      	b.n	80011ca <__gnu_unwind_execute+0xe>
 80012ee:	4638      	mov	r0, r7
 80012f0:	f7ff ff38 	bl	8001164 <next_unwind_byte>
 80012f4:	0224      	lsls	r4, r4, #8
 80012f6:	4304      	orrs	r4, r0
 80012f8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80012fc:	d0b1      	beq.n	8001262 <__gnu_unwind_execute+0xa6>
 80012fe:	0124      	lsls	r4, r4, #4
 8001300:	2300      	movs	r3, #0
 8001302:	b2a2      	uxth	r2, r4
 8001304:	4619      	mov	r1, r3
 8001306:	4630      	mov	r0, r6
 8001308:	f7ff fd32 	bl	8000d70 <_Unwind_VRS_Pop>
 800130c:	2800      	cmp	r0, #0
 800130e:	d1a8      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 8001310:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001314:	bf18      	it	ne
 8001316:	f04f 0801 	movne.w	r8, #1
 800131a:	e756      	b.n	80011ca <__gnu_unwind_execute+0xe>
 800131c:	28c6      	cmp	r0, #198	; 0xc6
 800131e:	d07d      	beq.n	800141c <__gnu_unwind_execute+0x260>
 8001320:	28c7      	cmp	r0, #199	; 0xc7
 8001322:	f000 8086 	beq.w	8001432 <__gnu_unwind_execute+0x276>
 8001326:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800132a:	2bc0      	cmp	r3, #192	; 0xc0
 800132c:	f000 8094 	beq.w	8001458 <__gnu_unwind_execute+0x29c>
 8001330:	28c8      	cmp	r0, #200	; 0xc8
 8001332:	f000 809f 	beq.w	8001474 <__gnu_unwind_execute+0x2b8>
 8001336:	28c9      	cmp	r0, #201	; 0xc9
 8001338:	d193      	bne.n	8001262 <__gnu_unwind_execute+0xa6>
 800133a:	4638      	mov	r0, r7
 800133c:	f7ff ff12 	bl	8001164 <next_unwind_byte>
 8001340:	0302      	lsls	r2, r0, #12
 8001342:	f000 000f 	and.w	r0, r0, #15
 8001346:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800134a:	3001      	adds	r0, #1
 800134c:	4302      	orrs	r2, r0
 800134e:	e781      	b.n	8001254 <__gnu_unwind_execute+0x98>
 8001350:	ac03      	add	r4, sp, #12
 8001352:	4643      	mov	r3, r8
 8001354:	220e      	movs	r2, #14
 8001356:	4641      	mov	r1, r8
 8001358:	9400      	str	r4, [sp, #0]
 800135a:	4630      	mov	r0, r6
 800135c:	f7ff fb14 	bl	8000988 <_Unwind_VRS_Get>
 8001360:	9400      	str	r4, [sp, #0]
 8001362:	4630      	mov	r0, r6
 8001364:	4643      	mov	r3, r8
 8001366:	220f      	movs	r2, #15
 8001368:	4641      	mov	r1, r8
 800136a:	f7ff fb33 	bl	80009d4 <_Unwind_VRS_Set>
 800136e:	4640      	mov	r0, r8
 8001370:	e778      	b.n	8001264 <__gnu_unwind_execute+0xa8>
 8001372:	4638      	mov	r0, r7
 8001374:	f7ff fef6 	bl	8001164 <next_unwind_byte>
 8001378:	2800      	cmp	r0, #0
 800137a:	f43f af72 	beq.w	8001262 <__gnu_unwind_execute+0xa6>
 800137e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001382:	f47f af6e 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001386:	4602      	mov	r2, r0
 8001388:	4619      	mov	r1, r3
 800138a:	4630      	mov	r0, r6
 800138c:	f7ff fcf0 	bl	8000d70 <_Unwind_VRS_Pop>
 8001390:	2800      	cmp	r0, #0
 8001392:	f47f af66 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001396:	e718      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001398:	2300      	movs	r3, #0
 800139a:	f10d 090c 	add.w	r9, sp, #12
 800139e:	220d      	movs	r2, #13
 80013a0:	4619      	mov	r1, r3
 80013a2:	f8cd 9000 	str.w	r9, [sp]
 80013a6:	4630      	mov	r0, r6
 80013a8:	f7ff faee 	bl	8000988 <_Unwind_VRS_Get>
 80013ac:	4638      	mov	r0, r7
 80013ae:	f7ff fed9 	bl	8001164 <next_unwind_byte>
 80013b2:	0602      	lsls	r2, r0, #24
 80013b4:	f04f 0402 	mov.w	r4, #2
 80013b8:	d50c      	bpl.n	80013d4 <__gnu_unwind_execute+0x218>
 80013ba:	9b03      	ldr	r3, [sp, #12]
 80013bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80013c0:	40a0      	lsls	r0, r4
 80013c2:	4403      	add	r3, r0
 80013c4:	4638      	mov	r0, r7
 80013c6:	9303      	str	r3, [sp, #12]
 80013c8:	f7ff fecc 	bl	8001164 <next_unwind_byte>
 80013cc:	0603      	lsls	r3, r0, #24
 80013ce:	f104 0407 	add.w	r4, r4, #7
 80013d2:	d4f2      	bmi.n	80013ba <__gnu_unwind_execute+0x1fe>
 80013d4:	9b03      	ldr	r3, [sp, #12]
 80013d6:	f8cd 9000 	str.w	r9, [sp]
 80013da:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80013de:	40a2      	lsls	r2, r4
 80013e0:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80013e4:	2300      	movs	r3, #0
 80013e6:	4414      	add	r4, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	220d      	movs	r2, #13
 80013ec:	4630      	mov	r0, r6
 80013ee:	9403      	str	r4, [sp, #12]
 80013f0:	f7ff faf0 	bl	80009d4 <_Unwind_VRS_Set>
 80013f4:	e6e9      	b.n	80011ca <__gnu_unwind_execute+0xe>
 80013f6:	4638      	mov	r0, r7
 80013f8:	f7ff feb4 	bl	8001164 <next_unwind_byte>
 80013fc:	0301      	lsls	r1, r0, #12
 80013fe:	f000 000f 	and.w	r0, r0, #15
 8001402:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001406:	1c42      	adds	r2, r0, #1
 8001408:	2301      	movs	r3, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	4630      	mov	r0, r6
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fcae 	bl	8000d70 <_Unwind_VRS_Pop>
 8001414:	2800      	cmp	r0, #0
 8001416:	f47f af24 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 800141a:	e6d6      	b.n	80011ca <__gnu_unwind_execute+0xe>
 800141c:	4638      	mov	r0, r7
 800141e:	f7ff fea1 	bl	8001164 <next_unwind_byte>
 8001422:	0301      	lsls	r1, r0, #12
 8001424:	f000 000f 	and.w	r0, r0, #15
 8001428:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800142c:	1c42      	adds	r2, r0, #1
 800142e:	2303      	movs	r3, #3
 8001430:	e7eb      	b.n	800140a <__gnu_unwind_execute+0x24e>
 8001432:	4638      	mov	r0, r7
 8001434:	f7ff fe96 	bl	8001164 <next_unwind_byte>
 8001438:	2800      	cmp	r0, #0
 800143a:	f43f af12 	beq.w	8001262 <__gnu_unwind_execute+0xa6>
 800143e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001442:	f47f af0e 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001446:	4602      	mov	r2, r0
 8001448:	2104      	movs	r1, #4
 800144a:	4630      	mov	r0, r6
 800144c:	f7ff fc90 	bl	8000d70 <_Unwind_VRS_Pop>
 8001450:	2800      	cmp	r0, #0
 8001452:	f47f af06 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001456:	e6b8      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001458:	f000 020f 	and.w	r2, r0, #15
 800145c:	3201      	adds	r2, #1
 800145e:	2303      	movs	r3, #3
 8001460:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001464:	4619      	mov	r1, r3
 8001466:	4630      	mov	r0, r6
 8001468:	f7ff fc82 	bl	8000d70 <_Unwind_VRS_Pop>
 800146c:	2800      	cmp	r0, #0
 800146e:	f47f aef8 	bne.w	8001262 <__gnu_unwind_execute+0xa6>
 8001472:	e6aa      	b.n	80011ca <__gnu_unwind_execute+0xe>
 8001474:	4638      	mov	r0, r7
 8001476:	f7ff fe75 	bl	8001164 <next_unwind_byte>
 800147a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800147e:	f000 030f 	and.w	r3, r0, #15
 8001482:	3210      	adds	r2, #16
 8001484:	3301      	adds	r3, #1
 8001486:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800148a:	e6e3      	b.n	8001254 <__gnu_unwind_execute+0x98>

0800148c <__gnu_unwind_frame>:
 800148c:	b510      	push	{r4, lr}
 800148e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001490:	b084      	sub	sp, #16
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	2003      	movs	r0, #3
 8001496:	f88d 000c 	strb.w	r0, [sp, #12]
 800149a:	79dc      	ldrb	r4, [r3, #7]
 800149c:	f88d 400d 	strb.w	r4, [sp, #13]
 80014a0:	0212      	lsls	r2, r2, #8
 80014a2:	3308      	adds	r3, #8
 80014a4:	4608      	mov	r0, r1
 80014a6:	a901      	add	r1, sp, #4
 80014a8:	9201      	str	r2, [sp, #4]
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	f7ff fe86 	bl	80011bc <__gnu_unwind_execute>
 80014b0:	b004      	add	sp, #16
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <_Unwind_GetRegionStart>:
 80014b4:	b508      	push	{r3, lr}
 80014b6:	f7ff fe7f 	bl	80011b8 <unwind_UCB_from_context>
 80014ba:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80014bc:	bd08      	pop	{r3, pc}
 80014be:	bf00      	nop

080014c0 <_Unwind_GetLanguageSpecificData>:
 80014c0:	b508      	push	{r3, lr}
 80014c2:	f7ff fe79 	bl	80011b8 <unwind_UCB_from_context>
 80014c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80014c8:	79c3      	ldrb	r3, [r0, #7]
 80014ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80014ce:	3008      	adds	r0, #8
 80014d0:	bd08      	pop	{r3, pc}
 80014d2:	bf00      	nop

080014d4 <_Unwind_GetTextRelBase>:
 80014d4:	b508      	push	{r3, lr}
 80014d6:	f006 fdc0 	bl	800805a <abort>
 80014da:	bf00      	nop

080014dc <_Unwind_GetDataRelBase>:
 80014dc:	b508      	push	{r3, lr}
 80014de:	f7ff fff9 	bl	80014d4 <_Unwind_GetTextRelBase>
 80014e2:	bf00      	nop

080014e4 <__aeabi_idiv0>:
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ee:	e003      	b.n	80014f8 <LoopCopyDataInit>

080014f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014f6:	3104      	adds	r1, #4

080014f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001500:	d3f6      	bcc.n	80014f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001504:	e002      	b.n	800150c <LoopFillZerobss>

08001506 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001506:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001508:	f842 3b04 	str.w	r3, [r2], #4

0800150c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800150e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001510:	d3f9      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001512:	f001 fadf 	bl	8002ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f006 fcf7 	bl	8007f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f000 fa87 	bl	8001a2c <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001524:	0800843c 	.word	0x0800843c
  ldr  r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800152c:	2000019c 	.word	0x2000019c
  ldr  r2, =_sbss
 8001530:	2000019c 	.word	0x2000019c
  ldr  r3, = _ebss
 8001534:	200045cc 	.word	0x200045cc

08001538 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC3_IRQHandler>
	...

0800153c <MX_ADC1_Init>:
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800153e:	2200      	movs	r2, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8001540:	2101      	movs	r1, #1
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc1.Init.BoostMode = ENABLE;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001542:	4618      	mov	r0, r3
{
 8001544:	b570      	push	{r4, r5, r6, lr}
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8001546:	f44f 2540 	mov.w	r5, #786432	; 0xc0000
  hadc1.Instance = ADC1;
 800154a:	4e20      	ldr	r6, [pc, #128]	; (80015cc <MX_ADC1_Init+0x90>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154c:	2404      	movs	r4, #4
{
 800154e:	b08a      	sub	sp, #40	; 0x28
  hadc1.Instance = ADC1;
 8001550:	601e      	str	r6, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8001552:	605d      	str	r5, [r3, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001554:	611c      	str	r4, [r3, #16]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001556:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001558:	60da      	str	r2, [r3, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800155a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800155c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800155e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001566:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hadc1.Init.NbrOfConversion = 1;
 800156c:	6199      	str	r1, [r3, #24]
  hadc1.Init.NbrOfDiscConversion = 1;
 800156e:	6219      	str	r1, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001570:	6259      	str	r1, [r3, #36]	; 0x24
  hadc1.Init.BoostMode = ENABLE;
 8001572:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001576:	f001 fb17 	bl	8002ba8 <HAL_ADC_Init>
 800157a:	bb00      	cbnz	r0, 80015be <MX_ADC1_Init+0x82>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the ADC multi-mode 
    */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800157c:	2300      	movs	r3, #0
 800157e:	a90a      	add	r1, sp, #40	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001580:	4811      	ldr	r0, [pc, #68]	; (80015c8 <MX_ADC1_Init+0x8c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001582:	f841 3d28 	str.w	r3, [r1, #-40]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001586:	f001 ff33 	bl	80033f0 <HAL_ADCEx_MultiModeConfigChannel>
 800158a:	b998      	cbnz	r0, 80015b4 <MX_ADC1_Init+0x78>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800158c:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_3;
 800158e:	2403      	movs	r4, #3
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001590:	2201      	movs	r2, #1
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001592:	a903      	add	r1, sp, #12
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <MX_ADC1_Init+0x8c>)
  sConfig.Channel = ADC_CHANNEL_3;
 8001596:	9403      	str	r4, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001598:	9204      	str	r2, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800159a:	9305      	str	r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800159c:	9306      	str	r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800159e:	9307      	str	r3, [sp, #28]
  sConfig.Offset = 0;
 80015a0:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a2:	f001 fc57 	bl	8002e54 <HAL_ADC_ConfigChannel>
 80015a6:	b118      	cbz	r0, 80015b0 <MX_ADC1_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 80015a8:	216d      	movs	r1, #109	; 0x6d
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <MX_ADC1_Init+0x94>)
 80015ac:	f000 fac6 	bl	8001b3c <_Error_Handler>
  }

}
 80015b0:	b00a      	add	sp, #40	; 0x28
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
    _Error_Handler(__FILE__, __LINE__);
 80015b4:	2160      	movs	r1, #96	; 0x60
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_ADC1_Init+0x94>)
 80015b8:	f000 fac0 	bl	8001b3c <_Error_Handler>
 80015bc:	e7e6      	b.n	800158c <MX_ADC1_Init+0x50>
    _Error_Handler(__FILE__, __LINE__);
 80015be:	2158      	movs	r1, #88	; 0x58
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <MX_ADC1_Init+0x94>)
 80015c2:	f000 fabb 	bl	8001b3c <_Error_Handler>
 80015c6:	e7d9      	b.n	800157c <MX_ADC1_Init+0x40>
 80015c8:	20004040 	.word	0x20004040
 80015cc:	40022000 	.word	0x40022000
 80015d0:	080081ec 	.word	0x080081ec

080015d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80015d4:	6802      	ldr	r2, [r0, #0]
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_ADC_MspInit+0x40>)
 80015d8:	429a      	cmp	r2, r3
 80015da:	d000      	beq.n	80015de <HAL_ADC_MspInit+0xa>
 80015dc:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_ADC_MspInit+0x44>)
    PA6     ------> ADC1_INP3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <HAL_ADC_MspInit+0x48>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015e2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80015e6:	f042 0220 	orr.w	r2, r2, #32
{
 80015ea:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015ec:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
{
 80015f0:	b086      	sub	sp, #24
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015f6:	2640      	movs	r6, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f8:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2400      	movs	r4, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015fc:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001602:	9601      	str	r6, [sp, #4]
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001608:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f002 f9b0 	bl	8003970 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001610:	b006      	add	sp, #24
 8001612:	bd70      	pop	{r4, r5, r6, pc}
 8001614:	40022000 	.word	0x40022000
 8001618:	58024400 	.word	0x58024400
 800161c:	58020000 	.word	0x58020000

08001620 <MX_DMA_Init>:
  *   hdma_memtomem_dma1_stream0
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001620:	4917      	ldr	r1, [pc, #92]	; (8001680 <MX_DMA_Init+0x60>)

  /* Configure DMA request hdma_memtomem_dma1_stream0 on DMA1_Stream0 */
  hdma_memtomem_dma1_stream0.Instance = DMA1_Stream0;
  hdma_memtomem_dma1_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
  hdma_memtomem_dma1_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
  hdma_memtomem_dma1_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001622:	f44f 7000 	mov.w	r0, #512	; 0x200
  hdma_memtomem_dma1_stream0.Instance = DMA1_Stream0;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_DMA_Init+0x64>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001628:	f8d1 20d8 	ldr.w	r2, [r1, #216]	; 0xd8
{
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162e:	f042 0201 	orr.w	r2, r2, #1
  hdma_memtomem_dma1_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001632:	2480      	movs	r4, #128	; 0x80
  hdma_memtomem_dma1_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001634:	60d8      	str	r0, [r3, #12]
{
 8001636:	b083      	sub	sp, #12
  hdma_memtomem_dma1_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001638:	609c      	str	r4, [r3, #8]
  hdma_memtomem_dma1_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  __HAL_RCC_DMA1_CLK_ENABLE();
 800163e:	f8c1 20d8 	str.w	r2, [r1, #216]	; 0xd8
  hdma_memtomem_dma1_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_memtomem_dma1_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
  hdma_memtomem_dma1_stream0.Init.Mode = DMA_NORMAL;
  hdma_memtomem_dma1_stream0.Init.Priority = DMA_PRIORITY_LOW;
  hdma_memtomem_dma1_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001642:	2504      	movs	r5, #4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001644:	f8d1 10d8 	ldr.w	r1, [r1, #216]	; 0xd8
  hdma_memtomem_dma1_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8001648:	2200      	movs	r2, #0
  hdma_memtomem_dma1_stream0.Instance = DMA1_Stream0;
 800164a:	4f0f      	ldr	r7, [pc, #60]	; (8001688 <MX_DMA_Init+0x68>)
  hdma_memtomem_dma1_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800164c:	2403      	movs	r4, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 800164e:	f001 0101 	and.w	r1, r1, #1
  hdma_memtomem_dma1_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
  hdma_memtomem_dma1_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream0) != HAL_OK)
 8001652:	4618      	mov	r0, r3
  hdma_memtomem_dma1_stream0.Instance = DMA1_Stream0;
 8001654:	601f      	str	r7, [r3, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001656:	9101      	str	r1, [sp, #4]
  hdma_memtomem_dma1_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8001658:	611e      	str	r6, [r3, #16]
  hdma_memtomem_dma1_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800165a:	625d      	str	r5, [r3, #36]	; 0x24
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165c:	9901      	ldr	r1, [sp, #4]
  hdma_memtomem_dma1_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800165e:	629c      	str	r4, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8001660:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001662:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001664:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream0.Init.Mode = DMA_NORMAL;
 8001666:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8001668:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream0) != HAL_OK)
 800166e:	f001 fff9 	bl	8003664 <HAL_DMA_Init>
 8001672:	b118      	cbz	r0, 800167c <MX_DMA_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001674:	215b      	movs	r1, #91	; 0x5b
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_DMA_Init+0x6c>)
 8001678:	f000 fa60 	bl	8001b3c <_Error_Handler>
  }

}
 800167c:	b003      	add	sp, #12
 800167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001680:	58024400 	.word	0x58024400
 8001684:	200040a4 	.word	0x200040a4
 8001688:	40020010 	.word	0x40020010
 800168c:	08008200 	.word	0x08008200

08001690 <StartidleTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartidleTask function */
void StartidleTask(void const * argument)
{
 8001690:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartidleTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f005 f9ea 	bl	8006a6c <osDelay>
 8001698:	e7fb      	b.n	8001692 <StartidleTask+0x2>
 800169a:	bf00      	nop

0800169c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
  osThreadDef(idleTask, StartidleTask, osPriorityIdle, 0, 128);
 800169e:	4c5d      	ldr	r4, [pc, #372]	; (8001814 <MX_FREERTOS_Init+0x178>)
void MX_FREERTOS_Init(void) {
 80016a0:	b0bb      	sub	sp, #236	; 0xec
  osThreadDef(idleTask, StartidleTask, osPriorityIdle, 0, 128);
 80016a2:	4626      	mov	r6, r4
 80016a4:	af0d      	add	r7, sp, #52	; 0x34
  osMessageQDef(J1vectorqueue, 1, pvector);
 80016a6:	f104 05b4 	add.w	r5, r4, #180	; 0xb4
  osThreadDef(idleTask, StartidleTask, osPriorityIdle, 0, 128);
 80016aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016ac:	6836      	ldr	r6, [r6, #0]
 80016ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  idleTaskHandle = osThreadCreate(osThread(idleTask), NULL);
 80016b0:	2100      	movs	r1, #0
 80016b2:	a80d      	add	r0, sp, #52	; 0x34
  osThreadDef(idleTask, StartidleTask, osPriorityIdle, 0, 128);
 80016b4:	603e      	str	r6, [r7, #0]
  idleTaskHandle = osThreadCreate(osThread(idleTask), NULL);
 80016b6:	f005 f9c1 	bl	8006a3c <osThreadCreate>
  osThreadDef(LED1Task, StartLED1Task, osPriorityIdle, 0, 128);
 80016ba:	f104 0714 	add.w	r7, r4, #20
  idleTaskHandle = osThreadCreate(osThread(idleTask), NULL);
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <MX_FREERTOS_Init+0x17c>)
  osThreadDef(LED1Task, StartLED1Task, osPriorityIdle, 0, 128);
 80016c0:	ae12      	add	r6, sp, #72	; 0x48
  idleTaskHandle = osThreadCreate(osThread(idleTask), NULL);
 80016c2:	6018      	str	r0, [r3, #0]
  osThreadDef(LED1Task, StartLED1Task, osPriorityIdle, 0, 128);
 80016c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80016c6:	683f      	ldr	r7, [r7, #0]
 80016c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  LED1TaskHandle = osThreadCreate(osThread(LED1Task), NULL);
 80016ca:	2100      	movs	r1, #0
 80016cc:	a812      	add	r0, sp, #72	; 0x48
  osThreadDef(LED1Task, StartLED1Task, osPriorityIdle, 0, 128);
 80016ce:	6037      	str	r7, [r6, #0]
  LED1TaskHandle = osThreadCreate(osThread(LED1Task), NULL);
 80016d0:	f005 f9b4 	bl	8006a3c <osThreadCreate>
  osThreadDef(LED2Task, StartLED2Task, osPriorityIdle, 0, 128);
 80016d4:	f104 0728 	add.w	r7, r4, #40	; 0x28
  LED1TaskHandle = osThreadCreate(osThread(LED1Task), NULL);
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <MX_FREERTOS_Init+0x180>)
  osThreadDef(LED2Task, StartLED2Task, osPriorityIdle, 0, 128);
 80016da:	ae17      	add	r6, sp, #92	; 0x5c
  LED1TaskHandle = osThreadCreate(osThread(LED1Task), NULL);
 80016dc:	6018      	str	r0, [r3, #0]
  osThreadDef(LED2Task, StartLED2Task, osPriorityIdle, 0, 128);
 80016de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80016e0:	683f      	ldr	r7, [r7, #0]
 80016e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  LED2TaskHandle = osThreadCreate(osThread(LED2Task), NULL);
 80016e4:	2100      	movs	r1, #0
 80016e6:	a817      	add	r0, sp, #92	; 0x5c
  osThreadDef(LED2Task, StartLED2Task, osPriorityIdle, 0, 128);
 80016e8:	6037      	str	r7, [r6, #0]
  LED2TaskHandle = osThreadCreate(osThread(LED2Task), NULL);
 80016ea:	f005 f9a7 	bl	8006a3c <osThreadCreate>
  osThreadDef(J1uartport, StartJ1uartport, osPriorityLow, 0, 128);
 80016ee:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  LED2TaskHandle = osThreadCreate(osThread(LED2Task), NULL);
 80016f2:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <MX_FREERTOS_Init+0x184>)
  osThreadDef(J1uartport, StartJ1uartport, osPriorityLow, 0, 128);
 80016f4:	ae1c      	add	r6, sp, #112	; 0x70
  LED2TaskHandle = osThreadCreate(osThread(LED2Task), NULL);
 80016f6:	6018      	str	r0, [r3, #0]
  osThreadDef(J1uartport, StartJ1uartport, osPriorityLow, 0, 128);
 80016f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80016fa:	683f      	ldr	r7, [r7, #0]
 80016fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  J1uartportHandle = osThreadCreate(osThread(J1uartport), NULL);
 80016fe:	2100      	movs	r1, #0
 8001700:	a81c      	add	r0, sp, #112	; 0x70
  osThreadDef(J1uartport, StartJ1uartport, osPriorityLow, 0, 128);
 8001702:	6037      	str	r7, [r6, #0]
  J1uartportHandle = osThreadCreate(osThread(J1uartport), NULL);
 8001704:	f005 f99a 	bl	8006a3c <osThreadCreate>
  osThreadDef(J2uartport, StartJ2uartport, osPriorityIdle, 0, 128);
 8001708:	f104 0750 	add.w	r7, r4, #80	; 0x50
  J1uartportHandle = osThreadCreate(osThread(J1uartport), NULL);
 800170c:	4b45      	ldr	r3, [pc, #276]	; (8001824 <MX_FREERTOS_Init+0x188>)
  osThreadDef(J2uartport, StartJ2uartport, osPriorityIdle, 0, 128);
 800170e:	ae21      	add	r6, sp, #132	; 0x84
  J1uartportHandle = osThreadCreate(osThread(J1uartport), NULL);
 8001710:	6018      	str	r0, [r3, #0]
  osThreadDef(J2uartport, StartJ2uartport, osPriorityIdle, 0, 128);
 8001712:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001714:	683f      	ldr	r7, [r7, #0]
 8001716:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  J2uartportHandle = osThreadCreate(osThread(J2uartport), NULL);
 8001718:	2100      	movs	r1, #0
 800171a:	a821      	add	r0, sp, #132	; 0x84
  osThreadDef(J2uartport, StartJ2uartport, osPriorityIdle, 0, 128);
 800171c:	6037      	str	r7, [r6, #0]
  J2uartportHandle = osThreadCreate(osThread(J2uartport), NULL);
 800171e:	f005 f98d 	bl	8006a3c <osThreadCreate>
  osThreadDef(J3uartport, StartJ3uartport, osPriorityIdle, 0, 128);
 8001722:	f104 0764 	add.w	r7, r4, #100	; 0x64
  J2uartportHandle = osThreadCreate(osThread(J2uartport), NULL);
 8001726:	4b40      	ldr	r3, [pc, #256]	; (8001828 <MX_FREERTOS_Init+0x18c>)
  osThreadDef(J3uartport, StartJ3uartport, osPriorityIdle, 0, 128);
 8001728:	ae26      	add	r6, sp, #152	; 0x98
  J2uartportHandle = osThreadCreate(osThread(J2uartport), NULL);
 800172a:	6018      	str	r0, [r3, #0]
  osThreadDef(J3uartport, StartJ3uartport, osPriorityIdle, 0, 128);
 800172c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800172e:	683f      	ldr	r7, [r7, #0]
 8001730:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  J3uartportHandle = osThreadCreate(osThread(J3uartport), NULL);
 8001732:	2100      	movs	r1, #0
 8001734:	a826      	add	r0, sp, #152	; 0x98
  osThreadDef(J3uartport, StartJ3uartport, osPriorityIdle, 0, 128);
 8001736:	6037      	str	r7, [r6, #0]
  J3uartportHandle = osThreadCreate(osThread(J3uartport), NULL);
 8001738:	f005 f980 	bl	8006a3c <osThreadCreate>
  osThreadDef(J4uartport, StartJ4uartport, osPriorityIdle, 0, 128);
 800173c:	f104 0778 	add.w	r7, r4, #120	; 0x78
  J3uartportHandle = osThreadCreate(osThread(J3uartport), NULL);
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <MX_FREERTOS_Init+0x190>)
  osThreadDef(J4uartport, StartJ4uartport, osPriorityIdle, 0, 128);
 8001742:	ae2b      	add	r6, sp, #172	; 0xac
  J3uartportHandle = osThreadCreate(osThread(J3uartport), NULL);
 8001744:	6018      	str	r0, [r3, #0]
  osThreadDef(J4uartport, StartJ4uartport, osPriorityIdle, 0, 128);
 8001746:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001748:	683f      	ldr	r7, [r7, #0]
 800174a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  J4uartportHandle = osThreadCreate(osThread(J4uartport), NULL);
 800174c:	2100      	movs	r1, #0
 800174e:	a82b      	add	r0, sp, #172	; 0xac
  osThreadDef(J4uartport, StartJ4uartport, osPriorityIdle, 0, 128);
 8001750:	6037      	str	r7, [r6, #0]
  J4uartportHandle = osThreadCreate(osThread(J4uartport), NULL);
 8001752:	f005 f973 	bl	8006a3c <osThreadCreate>
  osThreadDef(J5uartport, StartJ5uartport, osPriorityIdle, 0, 128);
 8001756:	f104 078c 	add.w	r7, r4, #140	; 0x8c
  J4uartportHandle = osThreadCreate(osThread(J4uartport), NULL);
 800175a:	4b35      	ldr	r3, [pc, #212]	; (8001830 <MX_FREERTOS_Init+0x194>)
  osThreadDef(J5uartport, StartJ5uartport, osPriorityIdle, 0, 128);
 800175c:	ae30      	add	r6, sp, #192	; 0xc0
  osThreadDef(J6uartport, StartJ6uartport, osPriorityIdle, 0, 128);
 800175e:	34a0      	adds	r4, #160	; 0xa0
  J4uartportHandle = osThreadCreate(osThread(J4uartport), NULL);
 8001760:	6018      	str	r0, [r3, #0]
  osThreadDef(J5uartport, StartJ5uartport, osPriorityIdle, 0, 128);
 8001762:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001764:	683f      	ldr	r7, [r7, #0]
 8001766:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  J5uartportHandle = osThreadCreate(osThread(J5uartport), NULL);
 8001768:	2100      	movs	r1, #0
 800176a:	a830      	add	r0, sp, #192	; 0xc0
  osThreadDef(J5uartport, StartJ5uartport, osPriorityIdle, 0, 128);
 800176c:	6037      	str	r7, [r6, #0]
  J5uartportHandle = osThreadCreate(osThread(J5uartport), NULL);
 800176e:	f005 f965 	bl	8006a3c <osThreadCreate>
 8001772:	4b30      	ldr	r3, [pc, #192]	; (8001834 <MX_FREERTOS_Init+0x198>)
  osThreadDef(J6uartport, StartJ6uartport, osPriorityIdle, 0, 128);
 8001774:	ae35      	add	r6, sp, #212	; 0xd4
  J5uartportHandle = osThreadCreate(osThread(J5uartport), NULL);
 8001776:	6018      	str	r0, [r3, #0]
  osThreadDef(J6uartport, StartJ6uartport, osPriorityIdle, 0, 128);
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	6824      	ldr	r4, [r4, #0]
 800177c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  J6uartportHandle = osThreadCreate(osThread(J6uartport), NULL);
 800177e:	2100      	movs	r1, #0
 8001780:	a835      	add	r0, sp, #212	; 0xd4
  osThreadDef(J6uartport, StartJ6uartport, osPriorityIdle, 0, 128);
 8001782:	6034      	str	r4, [r6, #0]
  J6uartportHandle = osThreadCreate(osThread(J6uartport), NULL);
 8001784:	f005 f95a 	bl	8006a3c <osThreadCreate>
 8001788:	4a2b      	ldr	r2, [pc, #172]	; (8001838 <MX_FREERTOS_Init+0x19c>)
  osMessageQDef(J1vectorqueue, 1, pvector);
 800178a:	ab01      	add	r3, sp, #4
  J6uartportHandle = osThreadCreate(osThread(J6uartport), NULL);
 800178c:	6010      	str	r0, [r2, #0]
  osMessageQDef(J1vectorqueue, 1, pvector);
 800178e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001792:	e883 0003 	stmia.w	r3, {r0, r1}
  J1vectorqueueHandle = osMessageCreate(osMessageQ(J1vectorqueue), NULL);
 8001796:	4618      	mov	r0, r3
 8001798:	2100      	movs	r1, #0
 800179a:	f005 f96f 	bl	8006a7c <osMessageCreate>
 800179e:	4a27      	ldr	r2, [pc, #156]	; (800183c <MX_FREERTOS_Init+0x1a0>)
  osMessageQDef(J2vectorqueue, 1, pvector);
 80017a0:	ab03      	add	r3, sp, #12
  J1vectorqueueHandle = osMessageCreate(osMessageQ(J1vectorqueue), NULL);
 80017a2:	6010      	str	r0, [r2, #0]
  osMessageQDef(J2vectorqueue, 1, pvector);
 80017a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017a8:	e883 0003 	stmia.w	r3, {r0, r1}
  J2vectorqueueHandle = osMessageCreate(osMessageQ(J2vectorqueue), NULL);
 80017ac:	4618      	mov	r0, r3
 80017ae:	2100      	movs	r1, #0
 80017b0:	f005 f964 	bl	8006a7c <osMessageCreate>
 80017b4:	4a22      	ldr	r2, [pc, #136]	; (8001840 <MX_FREERTOS_Init+0x1a4>)
  osMessageQDef(J3vectorqueue, 1, pvector);
 80017b6:	ab05      	add	r3, sp, #20
  J2vectorqueueHandle = osMessageCreate(osMessageQ(J2vectorqueue), NULL);
 80017b8:	6010      	str	r0, [r2, #0]
  osMessageQDef(J3vectorqueue, 1, pvector);
 80017ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017be:	e883 0003 	stmia.w	r3, {r0, r1}
  J3vectorqueueHandle = osMessageCreate(osMessageQ(J3vectorqueue), NULL);
 80017c2:	4618      	mov	r0, r3
 80017c4:	2100      	movs	r1, #0
 80017c6:	f005 f959 	bl	8006a7c <osMessageCreate>
 80017ca:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <MX_FREERTOS_Init+0x1a8>)
  osMessageQDef(J4vectorqueue, 1, pvector);
 80017cc:	ab07      	add	r3, sp, #28
  J3vectorqueueHandle = osMessageCreate(osMessageQ(J3vectorqueue), NULL);
 80017ce:	6010      	str	r0, [r2, #0]
  osMessageQDef(J4vectorqueue, 1, pvector);
 80017d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017d4:	e883 0003 	stmia.w	r3, {r0, r1}
  J4vectorqueueHandle = osMessageCreate(osMessageQ(J4vectorqueue), NULL);
 80017d8:	4618      	mov	r0, r3
 80017da:	2100      	movs	r1, #0
 80017dc:	f005 f94e 	bl	8006a7c <osMessageCreate>
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <MX_FREERTOS_Init+0x1ac>)
  osMessageQDef(J5vectorqueue, 1, pvector);
 80017e2:	ab09      	add	r3, sp, #36	; 0x24
  J4vectorqueueHandle = osMessageCreate(osMessageQ(J4vectorqueue), NULL);
 80017e4:	6010      	str	r0, [r2, #0]
  osMessageQDef(J5vectorqueue, 1, pvector);
 80017e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017ea:	e883 0003 	stmia.w	r3, {r0, r1}
  J5vectorqueueHandle = osMessageCreate(osMessageQ(J5vectorqueue), NULL);
 80017ee:	4618      	mov	r0, r3
 80017f0:	2100      	movs	r1, #0
 80017f2:	f005 f943 	bl	8006a7c <osMessageCreate>
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <MX_FREERTOS_Init+0x1b0>)
  osMessageQDef(J6vectorqueue, 1, pvector);
 80017f8:	ab0b      	add	r3, sp, #44	; 0x2c
  J5vectorqueueHandle = osMessageCreate(osMessageQ(J5vectorqueue), NULL);
 80017fa:	6010      	str	r0, [r2, #0]
  osMessageQDef(J6vectorqueue, 1, pvector);
 80017fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001800:	e883 0003 	stmia.w	r3, {r0, r1}
  J6vectorqueueHandle = osMessageCreate(osMessageQ(J6vectorqueue), NULL);
 8001804:	4618      	mov	r0, r3
 8001806:	2100      	movs	r1, #0
 8001808:	f005 f938 	bl	8006a7c <osMessageCreate>
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <MX_FREERTOS_Init+0x1b4>)
 800180e:	6018      	str	r0, [r3, #0]
}
 8001810:	b03b      	add	sp, #236	; 0xec
 8001812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001814:	0800812c 	.word	0x0800812c
 8001818:	20004148 	.word	0x20004148
 800181c:	20004150 	.word	0x20004150
 8001820:	20004134 	.word	0x20004134
 8001824:	20004154 	.word	0x20004154
 8001828:	2000414c 	.word	0x2000414c
 800182c:	20004124 	.word	0x20004124
 8001830:	2000411c 	.word	0x2000411c
 8001834:	20004138 	.word	0x20004138
 8001838:	20004130 	.word	0x20004130
 800183c:	2000412c 	.word	0x2000412c
 8001840:	20004140 	.word	0x20004140
 8001844:	2000413c 	.word	0x2000413c
 8001848:	20004144 	.word	0x20004144
 800184c:	20004120 	.word	0x20004120
 8001850:	20004128 	.word	0x20004128

08001854 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001854:	4b31      	ldr	r3, [pc, #196]	; (800191c <MX_GPIO_Init+0xc8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	210c      	movs	r1, #12
{
 800185a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800185c:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
{
 8001860:	b08b      	sub	sp, #44	; 0x2c
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001862:	4f2f      	ldr	r7, [pc, #188]	; (8001920 <MX_GPIO_Init+0xcc>)
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	4614      	mov	r4, r2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001866:	f045 0510 	orr.w	r5, r5, #16
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 800186a:	4e2e      	ldr	r6, [pc, #184]	; (8001924 <MX_GPIO_Init+0xd0>)
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 800186c:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186e:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
 8001872:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
 8001876:	f005 0510 	and.w	r5, r5, #16
 800187a:	9500      	str	r5, [sp, #0]
 800187c:	9d00      	ldr	r5, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
 8001882:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001886:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
 800188a:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
 800188e:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8001892:	9501      	str	r5, [sp, #4]
 8001894:	9d01      	ldr	r5, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
 800189a:	f045 0501 	orr.w	r5, r5, #1
 800189e:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
 80018a2:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
 80018a6:	f005 0501 	and.w	r5, r5, #1
 80018aa:	9502      	str	r5, [sp, #8]
 80018ac:	9d02      	ldr	r5, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
 80018b2:	f045 0502 	orr.w	r5, r5, #2
 80018b6:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
 80018ba:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
 80018be:	f005 0502 	and.w	r5, r5, #2
 80018c2:	9503      	str	r5, [sp, #12]
 80018c4:	9d03      	ldr	r5, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
 80018ca:	f045 0504 	orr.w	r5, r5, #4
 80018ce:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	9304      	str	r3, [sp, #16]
 80018dc:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80018de:	f002 f975 	bl	8003bcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 80018e2:	4630      	mov	r0, r6
 80018e4:	4622      	mov	r2, r4
 80018e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ea:	f002 f96f 	bl	8003bcc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80018ee:	220c      	movs	r2, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018f0:	2311      	movs	r3, #17
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f2:	4638      	mov	r0, r7
 80018f4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80018f6:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018f8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018fe:	f002 f837 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8001902:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8001908:	a905      	add	r1, sp, #20
 800190a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8001910:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8001914:	f002 f82c 	bl	8003970 <HAL_GPIO_Init>

}
 8001918:	b00b      	add	sp, #44	; 0x2c
 800191a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191c:	58024400 	.word	0x58024400
 8001920:	58021000 	.word	0x58021000
 8001924:	58020000 	.word	0x58020000

08001928 <_ZN3ImuD1Ev>:

class Imu {
public:

	Imu(){}
	~Imu(){}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop

0800192c <_Z18SystemClock_Configv>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Supply configuration update enable 
    */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 800192c:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <_Z18SystemClock_Configv+0xec>)

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800192e:	2100      	movs	r1, #0
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8001930:	68da      	ldr	r2, [r3, #12]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8001932:	4618      	mov	r0, r3
{
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8001936:	f022 0204 	bic.w	r2, r2, #4
{
 800193a:	b0cd      	sub	sp, #308	; 0x134
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 800193c:	60da      	str	r2, [r3, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800193e:	9101      	str	r1, [sp, #4]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	9b01      	ldr	r3, [sp, #4]
  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8001952:	6983      	ldr	r3, [r0, #24]
 8001954:	049b      	lsls	r3, r3, #18
 8001956:	d5fc      	bpl.n	8001952 <_Z18SystemClock_Configv+0x26>
  {
    
  }
    /**Macro to configure the PLL clock source 
    */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001958:	4930      	ldr	r1, [pc, #192]	; (8001a1c <_Z18SystemClock_Configv+0xf0>)

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195a:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800195c:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800195e:	2200      	movs	r2, #0
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001960:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001962:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001966:	2764      	movs	r7, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001968:	260c      	movs	r6, #12
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800196a:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196e:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001970:	4323      	orrs	r3, r4
 8001972:	628b      	str	r3, [r1, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001974:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001978:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800197a:	961a      	str	r6, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800197c:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 800197e:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001980:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001982:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001984:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001986:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001988:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800198a:	921b      	str	r2, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800198c:	921c      	str	r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198e:	f002 f927 	bl	8003be0 <HAL_RCC_OscConfig>
 8001992:	b100      	cbz	r0, 8001996 <_Z18SystemClock_Configv+0x6a>
 8001994:	e7fe      	b.n	8001994 <_Z18SystemClock_Configv+0x68>
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001996:	2103      	movs	r1, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001998:	2608      	movs	r6, #8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800199a:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800199c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a0:	273f      	movs	r7, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019a2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a4:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019a6:	eb0d 0006 	add.w	r0, sp, r6
 80019aa:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80019ac:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80019ae:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80019b0:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b2:	9702      	str	r7, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80019b4:	9605      	str	r6, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80019b6:	9208      	str	r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b8:	f002 fc34 	bl	8004224 <HAL_RCC_ClockConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	b100      	cbz	r0, 80019c2 <_Z18SystemClock_Configv+0x96>
 80019c0:	e7fe      	b.n	80019c0 <_Z18SystemClock_Configv+0x94>
  PeriphClkInitStruct.PLL2.PLL2M = 1;
  PeriphClkInitStruct.PLL2.PLL2N = 19;
  PeriphClkInitStruct.PLL2.PLL2P = 1;
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019c2:	21c0      	movs	r1, #192	; 0xc0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80019c4:	2220      	movs	r2, #32
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80019c6:	4f16      	ldr	r7, [pc, #88]	; (8001a20 <_Z18SystemClock_Configv+0xf4>)
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 80019c8:	2613      	movs	r6, #19
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ca:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019cc:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019ce:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80019d0:	951e      	str	r5, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80019d2:	9520      	str	r5, [sp, #128]	; 0x80
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80019d4:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019d6:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019d8:	933a      	str	r3, [sp, #232]	; 0xe8
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80019da:	933b      	str	r3, [sp, #236]	; 0xec
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80019dc:	9345      	str	r3, [sp, #276]	; 0x114
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80019de:	971d      	str	r7, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 80019e0:	961f      	str	r6, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019e2:	9123      	str	r1, [sp, #140]	; 0x8c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80019e4:	9224      	str	r2, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e6:	f002 fe23 	bl	8004630 <HAL_RCCEx_PeriphCLKConfig>
 80019ea:	4604      	mov	r4, r0
 80019ec:	b100      	cbz	r0, 80019f0 <_Z18SystemClock_Configv+0xc4>
 80019ee:	e7fe      	b.n	80019ee <_Z18SystemClock_Configv+0xc2>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <_Z18SystemClock_Configv+0xf8>)
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <_Z18SystemClock_Configv+0xfc>)
 80019f4:	6810      	ldr	r0, [r2, #0]
 80019f6:	fba3 3000 	umull	r3, r0, r3, r0
 80019fa:	0980      	lsrs	r0, r0, #6
 80019fc:	f001 fdcc 	bl	8003598 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a00:	2004      	movs	r0, #4
 8001a02:	f001 fde1 	bl	80035c8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001a06:	4622      	mov	r2, r4
 8001a08:	210f      	movs	r1, #15
 8001a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0e:	f001 fd7b 	bl	8003508 <HAL_NVIC_SetPriority>
}
 8001a12:	b04d      	add	sp, #308	; 0x134
 8001a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a16:	bf00      	nop
 8001a18:	58024800 	.word	0x58024800
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	00081003 	.word	0x00081003
 8001a24:	20000094 	.word	0x20000094
 8001a28:	10624dd3 	.word	0x10624dd3

08001a2c <main>:
{
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	b083      	sub	sp, #12
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a34:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001a38:	4835      	ldr	r0, [pc, #212]	; (8001b10 <main+0xe4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001a40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a44:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001a48:	6943      	ldr	r3, [r0, #20]
 8001a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4e:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a54:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001a58:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001a5c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001a60:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8001a64:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
 8001a68:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001a6c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001a70:	07b7      	lsls	r7, r6, #30
 8001a72:	015d      	lsls	r5, r3, #5
 8001a74:	ea05 040e 	and.w	r4, r5, lr
 8001a78:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001a7a:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001a7c:	ea41 0304 	orr.w	r3, r1, r4
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001a80:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001a82:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8001a86:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      do {
 8001a8a:	1c53      	adds	r3, r2, #1
 8001a8c:	d1f6      	bne.n	8001a7c <main+0x50>
 8001a8e:	3d20      	subs	r5, #32
    do {
 8001a90:	f115 0f20 	cmn.w	r5, #32
 8001a94:	d1ee      	bne.n	8001a74 <main+0x48>
 8001a96:	f3bf 8f4f 	dsb	sy
    } while(sets-- != 0U);
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001a9a:	6943      	ldr	r3, [r0, #20]
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa0:	6143      	str	r3, [r0, #20]
 8001aa2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001aa6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001aaa:	f001 f845 	bl	8002b38 <HAL_Init>
  SystemClock_Config();
 8001aae:	f7ff ff3d 	bl	800192c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001ab2:	f7ff fecf 	bl	8001854 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ab6:	f7ff fdb3 	bl	8001620 <MX_DMA_Init>
  MX_ADC1_Init();
 8001aba:	f7ff fd3f 	bl	800153c <MX_ADC1_Init>
  MX_SPI3_Init();
 8001abe:	f000 f84b 	bl	8001b58 <MX_SPI3_Init>
  MX_UART4_Init();
 8001ac2:	f000 f969 	bl	8001d98 <MX_UART4_Init>
  MX_UART5_Init();
 8001ac6:	f000 f993 	bl	8001df0 <MX_UART5_Init>
  MX_UART7_Init();
 8001aca:	f000 f9bd 	bl	8001e48 <MX_UART7_Init>
  MX_UART8_Init();
 8001ace:	f000 f9e7 	bl	8001ea0 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8001ad2:	f000 fa17 	bl	8001f04 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ad6:	f000 fa41 	bl	8001f5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001ada:	f000 fa6b 	bl	8001fb4 <MX_USART3_UART_Init>
  uint8_t data[2] = {'O','K'};
 8001ade:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <main+0xe8>)
 8001ae0:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&huart8,data,2,1);
 8001ae2:	2301      	movs	r3, #1
  uint8_t data[2] = {'O','K'};
 8001ae4:	8814      	ldrh	r4, [r2, #0]
  HAL_UART_Transmit(&huart8,data,2,1);
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <main+0xec>)
  uint8_t data[2] = {'O','K'};
 8001aea:	f821 4d04 	strh.w	r4, [r1, #-4]!
  HAL_UART_Transmit(&huart8,data,2,1);
 8001aee:	f004 fe4d 	bl	800678c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart8,rx_buff,UART8BYTES);
 8001af2:	2218      	movs	r2, #24
 8001af4:	4909      	ldr	r1, [pc, #36]	; (8001b1c <main+0xf0>)
 8001af6:	4808      	ldr	r0, [pc, #32]	; (8001b18 <main+0xec>)
 8001af8:	f004 f898 	bl	8005c2c <HAL_UART_Receive_IT>
  imu_.init(&hspi3);
 8001afc:	4908      	ldr	r1, [pc, #32]	; (8001b20 <main+0xf4>)
 8001afe:	4809      	ldr	r0, [pc, #36]	; (8001b24 <main+0xf8>)
 8001b00:	f000 fdde 	bl	80026c0 <_ZN3Imu4initEP19__SPI_HandleTypeDef>
  MX_FREERTOS_Init();
 8001b04:	f7ff fdca 	bl	800169c <MX_FREERTOS_Init>
  osKernelStart();
 8001b08:	f004 ff92 	bl	8006a30 <osKernelStart>
 8001b0c:	e7fe      	b.n	8001b0c <main+0xe0>
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00
 8001b14:	080081e8 	.word	0x080081e8
 8001b18:	20004420 	.word	0x20004420
 8001b1c:	200045a0 	.word	0x200045a0
 8001b20:	20004158 	.word	0x20004158
 8001b24:	200001b8 	.word	0x200001b8

08001b28 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001b28:	6802      	ldr	r2, [r0, #0]
 8001b2a:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d000      	beq.n	8001b32 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001b30:	4770      	bx	lr
    HAL_IncTick();
 8001b32:	f001 b815 	b.w	8002b60 <HAL_IncTick>
 8001b36:	bf00      	nop
 8001b38:	40000800 	.word	0x40000800

08001b3c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001b3c:	e7fe      	b.n	8001b3c <_Error_Handler>
 8001b3e:	bf00      	nop

08001b40 <_GLOBAL__sub_I_imu_>:
Imu imu_;
 8001b40:	4a02      	ldr	r2, [pc, #8]	; (8001b4c <_GLOBAL__sub_I_imu_+0xc>)
 8001b42:	4903      	ldr	r1, [pc, #12]	; (8001b50 <_GLOBAL__sub_I_imu_+0x10>)
 8001b44:	4803      	ldr	r0, [pc, #12]	; (8001b54 <_GLOBAL__sub_I_imu_+0x14>)
 8001b46:	f006 b9d3 	b.w	8007ef0 <__aeabi_atexit>
 8001b4a:	bf00      	nop
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	08001929 	.word	0x08001929
 8001b54:	200001b8 	.word	0x200001b8

08001b58 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hspi3.Instance = SPI3;
 8001b5a:	4816      	ldr	r0, [pc, #88]	; (8001bb4 <MX_SPI3_Init+0x5c>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5c:	2200      	movs	r2, #0
  hspi3.Instance = SPI3;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <MX_SPI3_Init+0x60>)
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b60:	2107      	movs	r1, #7
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b62:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b66:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b6a:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b6e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  hspi3.Instance = SPI3;
 8001b72:	6018      	str	r0, [r3, #0]
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b74:	4618      	mov	r0, r3
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b76:	605f      	str	r7, [r3, #4]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b78:	619e      	str	r6, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b7a:	61dd      	str	r5, [r3, #28]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b7c:	635c      	str	r4, [r3, #52]	; 0x34
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b80:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b82:	615a      	str	r2, [r3, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b84:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b92:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b96:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b9a:	659a      	str	r2, [r3, #88]	; 0x58
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b9c:	60d9      	str	r1, [r3, #12]
  hspi3.Init.CRCPolynomial = 7;
 8001b9e:	62d9      	str	r1, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ba0:	f003 fcec 	bl	800557c <HAL_SPI_Init>
 8001ba4:	b900      	cbnz	r0, 8001ba8 <MX_SPI3_Init+0x50>
 8001ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ba8:	2159      	movs	r1, #89	; 0x59
 8001baa:	4804      	ldr	r0, [pc, #16]	; (8001bbc <MX_SPI3_Init+0x64>)
  }

}
 8001bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001bb0:	f7ff bfc4 	b.w	8001b3c <_Error_Handler>
 8001bb4:	40003c00 	.word	0x40003c00
 8001bb8:	20004158 	.word	0x20004158
 8001bbc:	08008280 	.word	0x08008280

08001bc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI3)
 8001bc0:	6802      	ldr	r2, [r0, #0]
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_SPI_MspInit+0x48>)
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d000      	beq.n	8001bca <HAL_SPI_MspInit+0xa>
 8001bc8:	4770      	bx	lr
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_SPI_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	4810      	ldr	r0, [pc, #64]	; (8001c10 <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bce:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
{
 8001bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bd8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
{
 8001bdc:	b087      	sub	sp, #28
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001be4:	f44f 57e0 	mov.w	r7, #7168	; 0x1c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2602      	movs	r6, #2
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bee:	2506      	movs	r5, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001bf2:	9701      	str	r7, [sp, #4]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bfe:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c00:	f001 feb6 	bl	8003970 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001c04:	b007      	add	sp, #28
 8001c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c08:	40003c00 	.word	0x40003c00
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	58020800 	.word	0x58020800

08001c14 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <HAL_MspInit+0x80>)

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c16:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c18:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001c1c:	f042 0202 	orr.w	r2, r2, #2
{
 8001c20:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
{
 8001c26:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	f001 fc54 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f06f 000b 	mvn.w	r0, #11
 8001c3e:	4611      	mov	r1, r2
 8001c40:	f001 fc62 	bl	8003508 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	f06f 000a 	mvn.w	r0, #10
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	f001 fc5c 	bl	8003508 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f06f 0009 	mvn.w	r0, #9
 8001c56:	4611      	mov	r1, r2
 8001c58:	f001 fc56 	bl	8003508 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f06f 0004 	mvn.w	r0, #4
 8001c62:	4611      	mov	r1, r2
 8001c64:	f001 fc50 	bl	8003508 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f06f 0003 	mvn.w	r0, #3
 8001c6e:	4611      	mov	r1, r2
 8001c70:	f001 fc4a 	bl	8003508 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	210f      	movs	r1, #15
 8001c78:	f06f 0001 	mvn.w	r0, #1
 8001c7c:	f001 fc44 	bl	8003508 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	210f      	movs	r1, #15
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f001 fc3e 	bl	8003508 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8c:	b003      	add	sp, #12
 8001c8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c92:	bf00      	nop
 8001c94:	58024400 	.word	0x58024400

08001c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b570      	push	{r4, r5, r6, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001c9a:	4601      	mov	r1, r0
{
 8001c9c:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	201e      	movs	r0, #30
 8001ca2:	f001 fc31 	bl	8003508 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8001ca6:	201e      	movs	r0, #30
 8001ca8:	f001 fc68 	bl	800357c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_InitTick+0x74>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cae:	4669      	mov	r1, sp
 8001cb0:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cb2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001cb6:	4e16      	ldr	r6, [pc, #88]	; (8001d10 <HAL_InitTick+0x78>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cb8:	f042 0204 	orr.w	r2, r2, #4
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001cbc:	4c15      	ldr	r4, [pc, #84]	; (8001d14 <HAL_InitTick+0x7c>)
 8001cbe:	4d16      	ldr	r5, [pc, #88]	; (8001d18 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cc0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cd0:	f002 fbca 	bl	8004468 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001cd4:	f002 fb9c 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8001cd8:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001cda:	0043      	lsls	r3, r0, #1
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001cdc:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim4.Instance = TIM4;
 8001ce0:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001ce2:	fba6 0303 	umull	r0, r3, r6, r3
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001ce6:	4620      	mov	r0, r4
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001ce8:	60e1      	str	r1, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001cea:	0c9b      	lsrs	r3, r3, #18
  htim4.Init.ClockDivision = 0;
 8001cec:	6122      	str	r2, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cee:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001cf0:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8001cf2:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001cf4:	f003 ff7a 	bl	8005bec <HAL_TIM_Base_Init>
 8001cf8:	b110      	cbz	r0, 8001d00 <HAL_InitTick+0x68>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001cfa:	2001      	movs	r0, #1
}
 8001cfc:	b00a      	add	sp, #40	; 0x28
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim4);
 8001d00:	4620      	mov	r0, r4
 8001d02:	f003 fe3b 	bl	800597c <HAL_TIM_Base_Start_IT>
}
 8001d06:	b00a      	add	sp, #40	; 0x28
 8001d08:	bd70      	pop	{r4, r5, r6, pc}
 8001d0a:	bf00      	nop
 8001d0c:	58024400 	.word	0x58024400
 8001d10:	431bde83 	.word	0x431bde83
 8001d14:	200041e0 	.word	0x200041e0
 8001d18:	40000800 	.word	0x40000800

08001d1c <NMI_Handler>:
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop

08001d20 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001d20:	e7fe      	b.n	8001d20 <HardFault_Handler>
 8001d22:	bf00      	nop

08001d24 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001d24:	e7fe      	b.n	8001d24 <MemManage_Handler>
 8001d26:	bf00      	nop

08001d28 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001d28:	e7fe      	b.n	8001d28 <BusFault_Handler>
 8001d2a:	bf00      	nop

08001d2c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001d2c:	e7fe      	b.n	8001d2c <UsageFault_Handler>
 8001d2e:	bf00      	nop

08001d30 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop

08001d34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001d34:	f004 bea6 	b.w	8006a84 <osSystickHandler>

08001d38 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d38:	4801      	ldr	r0, [pc, #4]	; (8001d40 <TIM4_IRQHandler+0x8>)
 8001d3a:	f003 be33 	b.w	80059a4 <HAL_TIM_IRQHandler>
 8001d3e:	bf00      	nop
 8001d40:	200041e0 	.word	0x200041e0

08001d44 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d44:	4801      	ldr	r0, [pc, #4]	; (8001d4c <USART1_IRQHandler+0x8>)
 8001d46:	f004 b809 	b.w	8005d5c <HAL_UART_IRQHandler>
 8001d4a:	bf00      	nop
 8001d4c:	200043a0 	.word	0x200043a0

08001d50 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d50:	4801      	ldr	r0, [pc, #4]	; (8001d58 <USART2_IRQHandler+0x8>)
 8001d52:	f004 b803 	b.w	8005d5c <HAL_UART_IRQHandler>
 8001d56:	bf00      	nop
 8001d58:	20004520 	.word	0x20004520

08001d5c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d5c:	4801      	ldr	r0, [pc, #4]	; (8001d64 <USART3_IRQHandler+0x8>)
 8001d5e:	f003 bffd 	b.w	8005d5c <HAL_UART_IRQHandler>
 8001d62:	bf00      	nop
 8001d64:	200042a0 	.word	0x200042a0

08001d68 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d68:	4801      	ldr	r0, [pc, #4]	; (8001d70 <UART4_IRQHandler+0x8>)
 8001d6a:	f003 bff7 	b.w	8005d5c <HAL_UART_IRQHandler>
 8001d6e:	bf00      	nop
 8001d70:	200044a0 	.word	0x200044a0

08001d74 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001d74:	4801      	ldr	r0, [pc, #4]	; (8001d7c <UART5_IRQHandler+0x8>)
 8001d76:	f003 bff1 	b.w	8005d5c <HAL_UART_IRQHandler>
 8001d7a:	bf00      	nop
 8001d7c:	20004320 	.word	0x20004320

08001d80 <UART7_IRQHandler>:
void UART7_IRQHandler(void)
{
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001d80:	4801      	ldr	r0, [pc, #4]	; (8001d88 <UART7_IRQHandler+0x8>)
 8001d82:	f003 bfeb 	b.w	8005d5c <HAL_UART_IRQHandler>
 8001d86:	bf00      	nop
 8001d88:	20004220 	.word	0x20004220

08001d8c <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001d8c:	4801      	ldr	r0, [pc, #4]	; (8001d94 <UART8_IRQHandler+0x8>)
 8001d8e:	f003 bfe5 	b.w	8005d5c <HAL_UART_IRQHandler>
 8001d92:	bf00      	nop
 8001d94:	20004420 	.word	0x20004420

08001d98 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart4.Instance = UART4;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_UART4_Init+0x48>)
  huart4.Init.BaudRate = 1250000;
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d9c:	2200      	movs	r2, #0
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001d9e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  huart4.Instance = UART4;
 8001da2:	4f10      	ldr	r7, [pc, #64]	; (8001de4 <MX_UART4_Init+0x4c>)
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001da4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  huart4.Init.BaudRate = 1250000;
 8001da8:	4e0f      	ldr	r6, [pc, #60]	; (8001de8 <MX_UART4_Init+0x50>)
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001daa:	210c      	movs	r1, #12
  huart4.Init.Prescaler = UART_PRESCALER_DIV1;
  huart4.Init.FIFOMode = UART_FIFOMODE_DISABLE;
  huart4.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
  huart4.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dac:	4618      	mov	r0, r3
  huart4.Instance = UART4;
 8001dae:	601f      	str	r7, [r3, #0]
  huart4.Init.BaudRate = 1250000;
 8001db0:	605e      	str	r6, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001db2:	609d      	str	r5, [r3, #8]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001db4:	611c      	str	r4, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001db6:	6159      	str	r1, [r3, #20]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001db8:	60da      	str	r2, [r3, #12]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dbc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dbe:	621a      	str	r2, [r3, #32]
  huart4.Init.Prescaler = UART_PRESCALER_DIV1;
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  huart4.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dca:	f004 fdf9 	bl	80069c0 <HAL_UART_Init>
 8001dce:	b900      	cbnz	r0, 8001dd2 <MX_UART4_Init+0x3a>
 8001dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001dd2:	2157      	movs	r1, #87	; 0x57
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_UART4_Init+0x54>)
  }

}
 8001dd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001dda:	f7ff beaf 	b.w	8001b3c <_Error_Handler>
 8001dde:	bf00      	nop
 8001de0:	200044a0 	.word	0x200044a0
 8001de4:	40004c00 	.word	0x40004c00
 8001de8:	001312d0 	.word	0x001312d0
 8001dec:	08008294 	.word	0x08008294

08001df0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart5.Instance = UART5;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_UART5_Init+0x48>)
  huart5.Init.BaudRate = 1250000;
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001df4:	2200      	movs	r2, #0
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001df6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  huart5.Instance = UART5;
 8001dfa:	4f10      	ldr	r7, [pc, #64]	; (8001e3c <MX_UART5_Init+0x4c>)
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001dfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  huart5.Init.BaudRate = 1250000;
 8001e00:	4e0f      	ldr	r6, [pc, #60]	; (8001e40 <MX_UART5_Init+0x50>)
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e02:	210c      	movs	r1, #12
  huart5.Init.Prescaler = UART_PRESCALER_DIV1;
  huart5.Init.FIFOMode = UART_FIFOMODE_DISABLE;
  huart5.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
  huart5.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e04:	4618      	mov	r0, r3
  huart5.Instance = UART5;
 8001e06:	601f      	str	r7, [r3, #0]
  huart5.Init.BaudRate = 1250000;
 8001e08:	605e      	str	r6, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001e0a:	609d      	str	r5, [r3, #8]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001e0c:	611c      	str	r4, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e0e:	6159      	str	r1, [r3, #20]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e10:	60da      	str	r2, [r3, #12]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e14:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e16:	621a      	str	r2, [r3, #32]
  huart5.Init.Prescaler = UART_PRESCALER_DIV1;
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  huart5.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e22:	f004 fdcd 	bl	80069c0 <HAL_UART_Init>
 8001e26:	b900      	cbnz	r0, 8001e2a <MX_UART5_Init+0x3a>
 8001e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001e2a:	216f      	movs	r1, #111	; 0x6f
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_UART5_Init+0x54>)
  }

}
 8001e2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001e32:	f7ff be83 	b.w	8001b3c <_Error_Handler>
 8001e36:	bf00      	nop
 8001e38:	20004320 	.word	0x20004320
 8001e3c:	40005000 	.word	0x40005000
 8001e40:	001312d0 	.word	0x001312d0
 8001e44:	08008294 	.word	0x08008294

08001e48 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart7.Instance = UART7;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_UART7_Init+0x48>)
  huart7.Init.BaudRate = 1250000;
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	2200      	movs	r2, #0
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8001e4e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  huart7.Instance = UART7;
 8001e52:	4f10      	ldr	r7, [pc, #64]	; (8001e94 <MX_UART7_Init+0x4c>)
  huart7.Init.Parity = UART_PARITY_EVEN;
 8001e54:	f44f 6480 	mov.w	r4, #1024	; 0x400
  huart7.Init.BaudRate = 1250000;
 8001e58:	4e0f      	ldr	r6, [pc, #60]	; (8001e98 <MX_UART7_Init+0x50>)
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001e5a:	210c      	movs	r1, #12
  huart7.Init.Prescaler = UART_PRESCALER_DIV1;
  huart7.Init.FIFOMode = UART_FIFOMODE_DISABLE;
  huart7.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
  huart7.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001e5c:	4618      	mov	r0, r3
  huart7.Instance = UART7;
 8001e5e:	601f      	str	r7, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 8001e60:	605e      	str	r6, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8001e62:	609d      	str	r5, [r3, #8]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8001e64:	611c      	str	r4, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001e66:	6159      	str	r1, [r3, #20]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001e68:	60da      	str	r2, [r3, #12]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6e:	621a      	str	r2, [r3, #32]
  huart7.Init.Prescaler = UART_PRESCALER_DIV1;
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
  huart7.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001e74:	62da      	str	r2, [r3, #44]	; 0x2c
  huart7.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001e7a:	f004 fda1 	bl	80069c0 <HAL_UART_Init>
 8001e7e:	b900      	cbnz	r0, 8001e82 <MX_UART7_Init+0x3a>
 8001e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001e82:	2187      	movs	r1, #135	; 0x87
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_UART7_Init+0x54>)
  }

}
 8001e86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001e8a:	f7ff be57 	b.w	8001b3c <_Error_Handler>
 8001e8e:	bf00      	nop
 8001e90:	20004220 	.word	0x20004220
 8001e94:	40007800 	.word	0x40007800
 8001e98:	001312d0 	.word	0x001312d0
 8001e9c:	08008294 	.word	0x08008294

08001ea0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart8.Instance = UART8;
  huart8.Init.BaudRate = 921600;
 8001ea2:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
  huart8.Instance = UART8;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <MX_UART8_Init+0x58>)
 8001ea8:	4914      	ldr	r1, [pc, #80]	; (8001efc <MX_UART8_Init+0x5c>)
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001eaa:	200c      	movs	r0, #12
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart8.Init.Prescaler = UART_PRESCALER_DIV1;
  huart8.Init.FIFOMode = UART_FIFOMODE_DISABLE;
  huart8.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_8_8;
 8001eac:	f04f 4720 	mov.w	r7, #2684354560	; 0xa0000000
  huart8.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_8_8;
 8001eb0:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001eb4:	2518      	movs	r5, #24
  huart8.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001eb6:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  huart8.Instance = UART8;
 8001eba:	6019      	str	r1, [r3, #0]
  huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  huart8.Init.BaudRate = 921600;
 8001ec0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	2200      	movs	r2, #0
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	6158      	str	r0, [r3, #20]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001ec6:	4618      	mov	r0, r3
  huart8.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_8_8;
 8001ec8:	62df      	str	r7, [r3, #44]	; 0x2c
  huart8.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_8_8;
 8001eca:	631e      	str	r6, [r3, #48]	; 0x30
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001ecc:	635d      	str	r5, [r3, #52]	; 0x34
  huart8.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001ece:	645c      	str	r4, [r3, #68]	; 0x44
  huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001ed0:	6499      	str	r1, [r3, #72]	; 0x48
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001ed4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001ed6:	611a      	str	r2, [r3, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed8:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eda:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001edc:	621a      	str	r2, [r3, #32]
  huart8.Init.Prescaler = UART_PRESCALER_DIV1;
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001ee2:	f004 fd6d 	bl	80069c0 <HAL_UART_Init>
 8001ee6:	b900      	cbnz	r0, 8001eea <MX_UART8_Init+0x4a>
 8001ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001eea:	21a1      	movs	r1, #161	; 0xa1
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <MX_UART8_Init+0x60>)
  }

}
 8001eee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001ef2:	f7ff be23 	b.w	8001b3c <_Error_Handler>
 8001ef6:	bf00      	nop
 8001ef8:	20004420 	.word	0x20004420
 8001efc:	40007c00 	.word	0x40007c00
 8001f00:	08008294 	.word	0x08008294

08001f04 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart1.Instance = USART1;
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <MX_USART1_UART_Init+0x48>)
  huart1.Init.BaudRate = 1250000;
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f08:	2200      	movs	r2, #0
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001f0a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  huart1.Instance = USART1;
 8001f0e:	4f10      	ldr	r7, [pc, #64]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001f10:	f44f 6480 	mov.w	r4, #1024	; 0x400
  huart1.Init.BaudRate = 1250000;
 8001f14:	4e0f      	ldr	r6, [pc, #60]	; (8001f54 <MX_USART1_UART_Init+0x50>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f16:	210c      	movs	r1, #12
  huart1.Init.Prescaler = UART_PRESCALER_DIV1;
  huart1.Init.FIFOMode = UART_FIFOMODE_DISABLE;
  huart1.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
  huart1.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f18:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 8001f1a:	601f      	str	r7, [r3, #0]
  huart1.Init.BaudRate = 1250000;
 8001f1c:	605e      	str	r6, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001f1e:	609d      	str	r5, [r3, #8]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001f20:	611c      	str	r4, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f22:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f24:	60da      	str	r2, [r3, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f2a:	621a      	str	r2, [r3, #32]
  huart1.Init.Prescaler = UART_PRESCALER_DIV1;
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
  huart1.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f36:	f004 fd43 	bl	80069c0 <HAL_UART_Init>
 8001f3a:	b900      	cbnz	r0, 8001f3e <MX_USART1_UART_Init+0x3a>
 8001f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f3e:	21ba      	movs	r1, #186	; 0xba
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_USART1_UART_Init+0x54>)
  }

}
 8001f42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001f46:	f7ff bdf9 	b.w	8001b3c <_Error_Handler>
 8001f4a:	bf00      	nop
 8001f4c:	200043a0 	.word	0x200043a0
 8001f50:	40011000 	.word	0x40011000
 8001f54:	001312d0 	.word	0x001312d0
 8001f58:	08008294 	.word	0x08008294

08001f5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart2.Instance = USART2;
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_USART2_UART_Init+0x48>)
  huart2.Init.BaudRate = 1250000;
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f60:	2200      	movs	r2, #0
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001f62:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  huart2.Instance = USART2;
 8001f66:	4f10      	ldr	r7, [pc, #64]	; (8001fa8 <MX_USART2_UART_Init+0x4c>)
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001f68:	f44f 6480 	mov.w	r4, #1024	; 0x400
  huart2.Init.BaudRate = 1250000;
 8001f6c:	4e0f      	ldr	r6, [pc, #60]	; (8001fac <MX_USART2_UART_Init+0x50>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f6e:	210c      	movs	r1, #12
  huart2.Init.Prescaler = UART_PRESCALER_DIV1;
  huart2.Init.FIFOMode = UART_FIFOMODE_DISABLE;
  huart2.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
  huart2.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f70:	4618      	mov	r0, r3
  huart2.Instance = USART2;
 8001f72:	601f      	str	r7, [r3, #0]
  huart2.Init.BaudRate = 1250000;
 8001f74:	605e      	str	r6, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001f76:	609d      	str	r5, [r3, #8]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001f78:	611c      	str	r4, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f7a:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	60da      	str	r2, [r3, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f82:	621a      	str	r2, [r3, #32]
  huart2.Init.Prescaler = UART_PRESCALER_DIV1;
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f8e:	f004 fd17 	bl	80069c0 <HAL_UART_Init>
 8001f92:	b900      	cbnz	r0, 8001f96 <MX_USART2_UART_Init+0x3a>
 8001f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f96:	21d3      	movs	r1, #211	; 0xd3
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USART2_UART_Init+0x54>)
  }

}
 8001f9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001f9e:	f7ff bdcd 	b.w	8001b3c <_Error_Handler>
 8001fa2:	bf00      	nop
 8001fa4:	20004520 	.word	0x20004520
 8001fa8:	40004400 	.word	0x40004400
 8001fac:	001312d0 	.word	0x001312d0
 8001fb0:	08008294 	.word	0x08008294

08001fb4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart3.Instance = USART3;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_USART3_UART_Init+0x48>)
  huart3.Init.BaudRate = 1250000;
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	2200      	movs	r2, #0
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001fba:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  huart3.Instance = USART3;
 8001fbe:	4f10      	ldr	r7, [pc, #64]	; (8002000 <MX_USART3_UART_Init+0x4c>)
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001fc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  huart3.Init.BaudRate = 1250000;
 8001fc4:	4e0f      	ldr	r6, [pc, #60]	; (8002004 <MX_USART3_UART_Init+0x50>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fc6:	210c      	movs	r1, #12
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fc8:	4618      	mov	r0, r3
  huart3.Instance = USART3;
 8001fca:	601f      	str	r7, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 8001fcc:	605e      	str	r6, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001fce:	609d      	str	r5, [r3, #8]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001fd0:	611c      	str	r4, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fd2:	6159      	str	r1, [r3, #20]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	60da      	str	r2, [r3, #12]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fda:	621a      	str	r2, [r3, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fe6:	f004 fceb 	bl	80069c0 <HAL_UART_Init>
 8001fea:	b900      	cbnz	r0, 8001fee <MX_USART3_UART_Init+0x3a>
 8001fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001fee:	21ec      	movs	r1, #236	; 0xec
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_USART3_UART_Init+0x54>)
  }

}
 8001ff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001ff6:	f7ff bda1 	b.w	8001b3c <_Error_Handler>
 8001ffa:	bf00      	nop
 8001ffc:	200042a0 	.word	0x200042a0
 8002000:	40004800 	.word	0x40004800
 8002004:	001312d0 	.word	0x001312d0
 8002008:	08008294 	.word	0x08008294

0800200c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 800200c:	6803      	ldr	r3, [r0, #0]
 800200e:	4a8a      	ldr	r2, [pc, #552]	; (8002238 <HAL_UART_MspInit+0x22c>)
 8002010:	4293      	cmp	r3, r2
{
 8002012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002014:	b08d      	sub	sp, #52	; 0x34
  if(uartHandle->Instance==UART4)
 8002016:	d03a      	beq.n	800208e <HAL_UART_MspInit+0x82>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 8002018:	4a88      	ldr	r2, [pc, #544]	; (800223c <HAL_UART_MspInit+0x230>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d05a      	beq.n	80020d4 <HAL_UART_MspInit+0xc8>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==UART7)
 800201e:	4a88      	ldr	r2, [pc, #544]	; (8002240 <HAL_UART_MspInit+0x234>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d07b      	beq.n	800211c <HAL_UART_MspInit+0x110>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 8002024:	4a87      	ldr	r2, [pc, #540]	; (8002244 <HAL_UART_MspInit+0x238>)
 8002026:	4293      	cmp	r3, r2
 8002028:	f000 809c 	beq.w	8002164 <HAL_UART_MspInit+0x158>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 800202c:	4a86      	ldr	r2, [pc, #536]	; (8002248 <HAL_UART_MspInit+0x23c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	f000 80bb 	beq.w	80021aa <HAL_UART_MspInit+0x19e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002034:	4a85      	ldr	r2, [pc, #532]	; (800224c <HAL_UART_MspInit+0x240>)
 8002036:	4293      	cmp	r3, r2
 8002038:	f000 80db 	beq.w	80021f2 <HAL_UART_MspInit+0x1e6>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800203c:	4a84      	ldr	r2, [pc, #528]	; (8002250 <HAL_UART_MspInit+0x244>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d001      	beq.n	8002046 <HAL_UART_MspInit+0x3a>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002042:	b00d      	add	sp, #52	; 0x34
 8002044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8002046:	4b83      	ldr	r3, [pc, #524]	; (8002254 <HAL_UART_MspInit+0x248>)
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002048:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800204a:	f44f 6740 	mov.w	r7, #3072	; 0xc00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800204e:	2612      	movs	r6, #18
    __HAL_RCC_USART3_CLK_ENABLE();
 8002050:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002054:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002056:	a907      	add	r1, sp, #28
 8002058:	487f      	ldr	r0, [pc, #508]	; (8002258 <HAL_UART_MspInit+0x24c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800205a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800205e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002066:	9707      	str	r7, [sp, #28]
    __HAL_RCC_USART3_CLK_ENABLE();
 8002068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800206e:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_USART3_CLK_ENABLE();
 8002070:	9306      	str	r3, [sp, #24]
 8002072:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002074:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002076:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f001 fc7a 	bl	8003970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2105      	movs	r1, #5
 8002080:	2027      	movs	r0, #39	; 0x27
 8002082:	f001 fa41 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002086:	2027      	movs	r0, #39	; 0x27
 8002088:	f001 fa78 	bl	800357c <HAL_NVIC_EnableIRQ>
}
 800208c:	e7d9      	b.n	8002042 <HAL_UART_MspInit+0x36>
    __HAL_RCC_UART4_CLK_ENABLE();
 800208e:	4b71      	ldr	r3, [pc, #452]	; (8002254 <HAL_UART_MspInit+0x248>)
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002090:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002092:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002094:	2612      	movs	r6, #18
    __HAL_RCC_UART4_CLK_ENABLE();
 8002096:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800209a:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	a907      	add	r1, sp, #28
 800209e:	486f      	ldr	r0, [pc, #444]	; (800225c <HAL_UART_MspInit+0x250>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80020a0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80020a4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80020a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020ac:	9707      	str	r7, [sp, #28]
    __HAL_RCC_UART4_CLK_ENABLE();
 80020ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020b4:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_UART4_CLK_ENABLE();
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ba:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020bc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f001 fc57 	bl	8003970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2105      	movs	r1, #5
 80020c6:	2034      	movs	r0, #52	; 0x34
 80020c8:	f001 fa1e 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020cc:	2034      	movs	r0, #52	; 0x34
 80020ce:	f001 fa55 	bl	800357c <HAL_NVIC_EnableIRQ>
 80020d2:	e7b6      	b.n	8002042 <HAL_UART_MspInit+0x36>
    __HAL_RCC_UART5_CLK_ENABLE();
 80020d4:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_UART_MspInit+0x248>)
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020d6:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80020d8:	f44f 5740 	mov.w	r7, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020dc:	2612      	movs	r6, #18
    __HAL_RCC_UART5_CLK_ENABLE();
 80020de:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80020e2:	250e      	movs	r5, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	a907      	add	r1, sp, #28
 80020e6:	485c      	ldr	r0, [pc, #368]	; (8002258 <HAL_UART_MspInit+0x24c>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80020e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020ec:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80020f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80020f4:	9707      	str	r7, [sp, #28]
    __HAL_RCC_UART5_CLK_ENABLE();
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fa:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020fc:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_UART5_CLK_ENABLE();
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002102:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002104:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f001 fc33 	bl	8003970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2105      	movs	r1, #5
 800210e:	2035      	movs	r0, #53	; 0x35
 8002110:	f001 f9fa 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002114:	2035      	movs	r0, #53	; 0x35
 8002116:	f001 fa31 	bl	800357c <HAL_NVIC_EnableIRQ>
 800211a:	e792      	b.n	8002042 <HAL_UART_MspInit+0x36>
    __HAL_RCC_UART7_CLK_ENABLE();
 800211c:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <HAL_UART_MspInit+0x248>)
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800211e:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002120:	f44f 77c0 	mov.w	r7, #384	; 0x180
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002124:	2612      	movs	r6, #18
    __HAL_RCC_UART7_CLK_ENABLE();
 8002126:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800212a:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800212c:	a907      	add	r1, sp, #28
 800212e:	484c      	ldr	r0, [pc, #304]	; (8002260 <HAL_UART_MspInit+0x254>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8002130:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002134:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800213c:	9707      	str	r7, [sp, #28]
    __HAL_RCC_UART7_CLK_ENABLE();
 800213e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002142:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002144:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_UART7_CLK_ENABLE();
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800214c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800214e:	f001 fc0f 	bl	8003970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2105      	movs	r1, #5
 8002156:	2052      	movs	r0, #82	; 0x52
 8002158:	f001 f9d6 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800215c:	2052      	movs	r0, #82	; 0x52
 800215e:	f001 fa0d 	bl	800357c <HAL_NVIC_EnableIRQ>
 8002162:	e76e      	b.n	8002042 <HAL_UART_MspInit+0x36>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002164:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <HAL_UART_MspInit+0x248>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002166:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2702      	movs	r7, #2
    __HAL_RCC_UART8_CLK_ENABLE();
 800216c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002170:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002172:	a907      	add	r1, sp, #28
 8002174:	483a      	ldr	r0, [pc, #232]	; (8002260 <HAL_UART_MspInit+0x254>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8002176:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800217a:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800217e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002182:	9207      	str	r2, [sp, #28]
    __HAL_RCC_UART8_CLK_ENABLE();
 8002184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002188:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	9708      	str	r7, [sp, #32]
    __HAL_RCC_UART8_CLK_ENABLE();
 800218c:	9303      	str	r3, [sp, #12]
 800218e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002192:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002194:	f001 fbec 	bl	8003970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002198:	462a      	mov	r2, r5
 800219a:	2105      	movs	r1, #5
 800219c:	2053      	movs	r0, #83	; 0x53
 800219e:	f001 f9b3 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80021a2:	2053      	movs	r0, #83	; 0x53
 80021a4:	f001 f9ea 	bl	800357c <HAL_NVIC_EnableIRQ>
 80021a8:	e74b      	b.n	8002042 <HAL_UART_MspInit+0x36>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021aa:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <HAL_UART_MspInit+0x248>)
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021ac:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021ae:	f44f 4740 	mov.w	r7, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b2:	2612      	movs	r6, #18
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80021b8:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ba:	a907      	add	r1, sp, #28
 80021bc:	4826      	ldr	r0, [pc, #152]	; (8002258 <HAL_UART_MspInit+0x24c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80021be:	f042 0210 	orr.w	r2, r2, #16
 80021c2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80021c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021ca:	9707      	str	r7, [sp, #28]
    __HAL_RCC_USART1_CLK_ENABLE();
 80021cc:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021d2:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_USART1_CLK_ENABLE();
 80021d4:	9304      	str	r3, [sp, #16]
 80021d6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d8:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80021da:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f001 fbc8 	bl	8003970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2105      	movs	r1, #5
 80021e4:	2025      	movs	r0, #37	; 0x25
 80021e6:	f001 f98f 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ea:	2025      	movs	r0, #37	; 0x25
 80021ec:	f001 f9c6 	bl	800357c <HAL_NVIC_EnableIRQ>
 80021f0:	e727      	b.n	8002042 <HAL_UART_MspInit+0x36>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_UART_MspInit+0x248>)
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021f4:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021f6:	270c      	movs	r7, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f8:	2612      	movs	r6, #18
    __HAL_RCC_USART2_CLK_ENABLE();
 80021fa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021fe:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	a907      	add	r1, sp, #28
 8002202:	4816      	ldr	r0, [pc, #88]	; (800225c <HAL_UART_MspInit+0x250>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002204:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002208:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800220c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002210:	9707      	str	r7, [sp, #28]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002216:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002218:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 800221a:	9305      	str	r3, [sp, #20]
 800221c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002220:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f001 fba5 	bl	8003970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2105      	movs	r1, #5
 800222a:	2026      	movs	r0, #38	; 0x26
 800222c:	f001 f96c 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002230:	2026      	movs	r0, #38	; 0x26
 8002232:	f001 f9a3 	bl	800357c <HAL_NVIC_EnableIRQ>
 8002236:	e704      	b.n	8002042 <HAL_UART_MspInit+0x36>
 8002238:	40004c00 	.word	0x40004c00
 800223c:	40005000 	.word	0x40005000
 8002240:	40007800 	.word	0x40007800
 8002244:	40007c00 	.word	0x40007c00
 8002248:	40011000 	.word	0x40011000
 800224c:	40004400 	.word	0x40004400
 8002250:	40004800 	.word	0x40004800
 8002254:	58024400 	.word	0x58024400
 8002258:	58020400 	.word	0x58020400
 800225c:	58020000 	.word	0x58020000
 8002260:	58021000 	.word	0x58021000

08002264 <HAL_UART_ErrorCallback>:
#define UART8BYTES sizeof(pvector)+2
uint8_t rx_buff[UART8BYTES];
uint8_t rx_servo[6];

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop

08002268 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	4604      	mov	r4, r0
	if(huart->Instance==huart8.Instance)
 800226c:	4898      	ldr	r0, [pc, #608]	; (80024d0 <HAL_UART_RxCpltCallback+0x268>)
{
 800226e:	b082      	sub	sp, #8
	if(huart->Instance==huart8.Instance)
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	6802      	ldr	r2, [r0, #0]
 8002274:	4293      	cmp	r3, r2
 8002276:	d015      	beq.n	80022a4 <HAL_UART_RxCpltCallback+0x3c>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}


	//receive from port 2...
	if(huart->Instance==huart7.Instance)
 8002278:	4896      	ldr	r0, [pc, #600]	; (80024d4 <HAL_UART_RxCpltCallback+0x26c>)
 800227a:	6802      	ldr	r2, [r0, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_UART_RxCpltCallback+0x1c>
//			data[1] = rx_servo[1]>>1;
//			data[2] = rx_servo[2];
//			HAL_UART_Transmit(&huart8,data,3,1);
//		}
	}
}
 8002280:	b002      	add	sp, #8
 8002282:	bd70      	pop	{r4, r5, r6, pc}
		if(rx_servo[0]-rx_servo[3] >= 0x80 -1) //then data OK...
 8002284:	4994      	ldr	r1, [pc, #592]	; (80024d8 <HAL_UART_RxCpltCallback+0x270>)
 8002286:	780d      	ldrb	r5, [r1, #0]
 8002288:	78cc      	ldrb	r4, [r1, #3]
 800228a:	1b2b      	subs	r3, r5, r4
 800228c:	2b7e      	cmp	r3, #126	; 0x7e
 800228e:	dc5c      	bgt.n	800234a <HAL_UART_RxCpltCallback+0xe2>
		else if(rx_servo[3]-rx_servo[0]<0x80&&rx_servo[3]-rx_servo[0]>0x70)
 8002290:	1b64      	subs	r4, r4, r5
 8002292:	3c71      	subs	r4, #113	; 0x71
 8002294:	2c0e      	cmp	r4, #14
 8002296:	d949      	bls.n	800232c <HAL_UART_RxCpltCallback+0xc4>
			HAL_UART_Receive(&huart7,rx_servo,1,0);
 8002298:	2300      	movs	r3, #0
 800229a:	2201      	movs	r2, #1
 800229c:	f004 fad4 	bl	8006848 <HAL_UART_Receive>
}
 80022a0:	b002      	add	sp, #8
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
		if(rx_buff[0]==TXHEADER)
 80022a4:	498d      	ldr	r1, [pc, #564]	; (80024dc <HAL_UART_RxCpltCallback+0x274>)
 80022a6:	780b      	ldrb	r3, [r1, #0]
 80022a8:	2bf8      	cmp	r3, #248	; 0xf8
 80022aa:	d13a      	bne.n	8002322 <HAL_UART_RxCpltCallback+0xba>
			switch (rx_buff[1])
 80022ac:	784b      	ldrb	r3, [r1, #1]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d824      	bhi.n	80022fe <HAL_UART_RxCpltCallback+0x96>
 80022b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80022b8:	009400ce 	.word	0x009400ce
 80022bc:	007600b1 	.word	0x007600b1
 80022c0:	00580006 	.word	0x00580006
				portJ5_anglevector.servonum = rx_buff[2]==0?portJ5_anglevector.servonum:rx_buff[2];
 80022c4:	788e      	ldrb	r6, [r1, #2]
				portJ5_anglevector.servoIDstart = rx_buff[3]==0?portJ5_anglevector.servoIDstart:rx_buff[3];
 80022c6:	78ca      	ldrb	r2, [r1, #3]
				portJ5_anglevector.servonum = rx_buff[2]==0?portJ5_anglevector.servonum:rx_buff[2];
 80022c8:	4b85      	ldr	r3, [pc, #532]	; (80024e0 <HAL_UART_RxCpltCallback+0x278>)
 80022ca:	2e00      	cmp	r6, #0
 80022cc:	f040 80f9 	bne.w	80024c2 <HAL_UART_RxCpltCallback+0x25a>
 80022d0:	781e      	ldrb	r6, [r3, #0]
				portJ5_anglevector.servoIDstart = rx_buff[3]==0?portJ5_anglevector.servoIDstart:rx_buff[3];
 80022d2:	b902      	cbnz	r2, 80022d6 <HAL_UART_RxCpltCallback+0x6e>
 80022d4:	785a      	ldrb	r2, [r3, #1]
 80022d6:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0;i<portJ5_anglevector.servonum;i++)
 80022d8:	b156      	cbz	r6, 80022f0 <HAL_UART_RxCpltCallback+0x88>
 80022da:	4982      	ldr	r1, [pc, #520]	; (80024e4 <HAL_UART_RxCpltCallback+0x27c>)
{
 80022dc:	2300      	movs	r3, #0
 80022de:	4a80      	ldr	r2, [pc, #512]	; (80024e0 <HAL_UART_RxCpltCallback+0x278>)
 80022e0:	3301      	adds	r3, #1
					portJ5_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 80022e2:	f831 5b02 	ldrh.w	r5, [r1], #2
				for(uint8_t i = 0;i<portJ5_anglevector.servonum;i++)
 80022e6:	b2d8      	uxtb	r0, r3
					portJ5_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 80022e8:	f822 5f02 	strh.w	r5, [r2, #2]!
				for(uint8_t i = 0;i<portJ5_anglevector.servonum;i++)
 80022ec:	4286      	cmp	r6, r0
 80022ee:	d8f7      	bhi.n	80022e0 <HAL_UART_RxCpltCallback+0x78>
				xQueueOverwriteFromISR(J5vectorqueueHandle,&portJ5_anglevector, &xHigherPriorityTaskWoken);
 80022f0:	497d      	ldr	r1, [pc, #500]	; (80024e8 <HAL_UART_RxCpltCallback+0x280>)
 80022f2:	2302      	movs	r3, #2
 80022f4:	4a7d      	ldr	r2, [pc, #500]	; (80024ec <HAL_UART_RxCpltCallback+0x284>)
 80022f6:	6808      	ldr	r0, [r1, #0]
 80022f8:	4979      	ldr	r1, [pc, #484]	; (80024e0 <HAL_UART_RxCpltCallback+0x278>)
 80022fa:	f004 ffa9 	bl	8007250 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart8,rx_buff,UART8BYTES);
 80022fe:	2218      	movs	r2, #24
 8002300:	4976      	ldr	r1, [pc, #472]	; (80024dc <HAL_UART_RxCpltCallback+0x274>)
 8002302:	4873      	ldr	r0, [pc, #460]	; (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 8002304:	f003 fc92 	bl	8005c2c <HAL_UART_Receive_IT>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002308:	4b78      	ldr	r3, [pc, #480]	; (80024ec <HAL_UART_RxCpltCallback+0x284>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b13b      	cbz	r3, 800231e <HAL_UART_RxCpltCallback+0xb6>
 800230e:	4b78      	ldr	r3, [pc, #480]	; (80024f0 <HAL_UART_RxCpltCallback+0x288>)
 8002310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	e7aa      	b.n	8002278 <HAL_UART_RxCpltCallback+0x10>
			HAL_UART_Receive(&huart8,rx_buff,UART8BYTES,1);
 8002322:	2301      	movs	r3, #1
 8002324:	2218      	movs	r2, #24
 8002326:	f004 fa8f 	bl	8006848 <HAL_UART_Receive>
 800232a:	e7e8      	b.n	80022fe <HAL_UART_RxCpltCallback+0x96>
			data[1] = rx_servo[1];
 800232c:	784e      	ldrb	r6, [r1, #1]
			HAL_UART_Transmit(&huart8,data,3,1);
 800232e:	2301      	movs	r3, #1
			data[2] = rx_servo[2];
 8002330:	788c      	ldrb	r4, [r1, #2]
			HAL_UART_Transmit(&huart8,data,3,1);
 8002332:	2203      	movs	r2, #3
 8002334:	a901      	add	r1, sp, #4
 8002336:	4866      	ldr	r0, [pc, #408]	; (80024d0 <HAL_UART_RxCpltCallback+0x268>)
			data[0] = rx_servo[0];
 8002338:	f88d 5004 	strb.w	r5, [sp, #4]
			data[1] = rx_servo[1];
 800233c:	f88d 6005 	strb.w	r6, [sp, #5]
			data[2] = rx_servo[2];
 8002340:	f88d 4006 	strb.w	r4, [sp, #6]
			HAL_UART_Transmit(&huart8,data,3,1);
 8002344:	f004 fa22 	bl	800678c <HAL_UART_Transmit>
 8002348:	e79a      	b.n	8002280 <HAL_UART_RxCpltCallback+0x18>
			data[1] = rx_servo[4];
 800234a:	790e      	ldrb	r6, [r1, #4]
			HAL_UART_Transmit(&huart8,data,3,1);
 800234c:	2301      	movs	r3, #1
			data[2] = rx_servo[5];
 800234e:	794d      	ldrb	r5, [r1, #5]
			HAL_UART_Transmit(&huart8,data,3,1);
 8002350:	2203      	movs	r2, #3
 8002352:	a901      	add	r1, sp, #4
 8002354:	485e      	ldr	r0, [pc, #376]	; (80024d0 <HAL_UART_RxCpltCallback+0x268>)
			data[0] = rx_servo[3];
 8002356:	f88d 4004 	strb.w	r4, [sp, #4]
			data[1] = rx_servo[4];
 800235a:	f88d 6005 	strb.w	r6, [sp, #5]
			data[2] = rx_servo[5];
 800235e:	f88d 5006 	strb.w	r5, [sp, #6]
			HAL_UART_Transmit(&huart8,data,3,1);
 8002362:	f004 fa13 	bl	800678c <HAL_UART_Transmit>
 8002366:	e78b      	b.n	8002280 <HAL_UART_RxCpltCallback+0x18>
				portJ6_anglevector.servonum = rx_buff[2]==0?portJ6_anglevector.servonum:rx_buff[2];
 8002368:	788e      	ldrb	r6, [r1, #2]
				portJ6_anglevector.servoIDstart = rx_buff[3]==0?portJ6_anglevector.servoIDstart:rx_buff[3];
 800236a:	78ca      	ldrb	r2, [r1, #3]
				portJ6_anglevector.servonum = rx_buff[2]==0?portJ6_anglevector.servonum:rx_buff[2];
 800236c:	4b61      	ldr	r3, [pc, #388]	; (80024f4 <HAL_UART_RxCpltCallback+0x28c>)
 800236e:	2e00      	cmp	r6, #0
 8002370:	f040 809b 	bne.w	80024aa <HAL_UART_RxCpltCallback+0x242>
 8002374:	781e      	ldrb	r6, [r3, #0]
				portJ6_anglevector.servoIDstart = rx_buff[3]==0?portJ6_anglevector.servoIDstart:rx_buff[3];
 8002376:	b902      	cbnz	r2, 800237a <HAL_UART_RxCpltCallback+0x112>
 8002378:	785a      	ldrb	r2, [r3, #1]
 800237a:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0;i<portJ6_anglevector.servonum;i++)
 800237c:	b156      	cbz	r6, 8002394 <HAL_UART_RxCpltCallback+0x12c>
 800237e:	4959      	ldr	r1, [pc, #356]	; (80024e4 <HAL_UART_RxCpltCallback+0x27c>)
{
 8002380:	2300      	movs	r3, #0
 8002382:	4a5c      	ldr	r2, [pc, #368]	; (80024f4 <HAL_UART_RxCpltCallback+0x28c>)
 8002384:	3301      	adds	r3, #1
					portJ6_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 8002386:	f831 5b02 	ldrh.w	r5, [r1], #2
				for(uint8_t i = 0;i<portJ6_anglevector.servonum;i++)
 800238a:	b2d8      	uxtb	r0, r3
					portJ6_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 800238c:	f822 5f02 	strh.w	r5, [r2, #2]!
				for(uint8_t i = 0;i<portJ6_anglevector.servonum;i++)
 8002390:	4286      	cmp	r6, r0
 8002392:	d8f7      	bhi.n	8002384 <HAL_UART_RxCpltCallback+0x11c>
				xQueueOverwriteFromISR(J6vectorqueueHandle,&portJ6_anglevector, &xHigherPriorityTaskWoken);
 8002394:	4958      	ldr	r1, [pc, #352]	; (80024f8 <HAL_UART_RxCpltCallback+0x290>)
 8002396:	2302      	movs	r3, #2
 8002398:	4a54      	ldr	r2, [pc, #336]	; (80024ec <HAL_UART_RxCpltCallback+0x284>)
 800239a:	6808      	ldr	r0, [r1, #0]
 800239c:	4955      	ldr	r1, [pc, #340]	; (80024f4 <HAL_UART_RxCpltCallback+0x28c>)
 800239e:	f004 ff57 	bl	8007250 <xQueueGenericSendFromISR>
				break;
 80023a2:	e7ac      	b.n	80022fe <HAL_UART_RxCpltCallback+0x96>
				portJ4_anglevector.servonum = rx_buff[2]==0?portJ4_anglevector.servonum:rx_buff[2];
 80023a4:	788e      	ldrb	r6, [r1, #2]
				portJ4_anglevector.servoIDstart = rx_buff[3]==0?portJ4_anglevector.servoIDstart:rx_buff[3];
 80023a6:	78ca      	ldrb	r2, [r1, #3]
				portJ4_anglevector.servonum = rx_buff[2]==0?portJ4_anglevector.servonum:rx_buff[2];
 80023a8:	4b54      	ldr	r3, [pc, #336]	; (80024fc <HAL_UART_RxCpltCallback+0x294>)
 80023aa:	2e00      	cmp	r6, #0
 80023ac:	f040 8083 	bne.w	80024b6 <HAL_UART_RxCpltCallback+0x24e>
 80023b0:	781e      	ldrb	r6, [r3, #0]
				portJ4_anglevector.servoIDstart = rx_buff[3]==0?portJ4_anglevector.servoIDstart:rx_buff[3];
 80023b2:	b902      	cbnz	r2, 80023b6 <HAL_UART_RxCpltCallback+0x14e>
 80023b4:	785a      	ldrb	r2, [r3, #1]
 80023b6:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0;i<portJ4_anglevector.servonum;i++)
 80023b8:	b156      	cbz	r6, 80023d0 <HAL_UART_RxCpltCallback+0x168>
 80023ba:	494a      	ldr	r1, [pc, #296]	; (80024e4 <HAL_UART_RxCpltCallback+0x27c>)
{
 80023bc:	2300      	movs	r3, #0
 80023be:	4a4f      	ldr	r2, [pc, #316]	; (80024fc <HAL_UART_RxCpltCallback+0x294>)
 80023c0:	3301      	adds	r3, #1
					portJ4_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 80023c2:	f831 5b02 	ldrh.w	r5, [r1], #2
				for(uint8_t i = 0;i<portJ4_anglevector.servonum;i++)
 80023c6:	b2d8      	uxtb	r0, r3
					portJ4_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 80023c8:	f822 5f02 	strh.w	r5, [r2, #2]!
				for(uint8_t i = 0;i<portJ4_anglevector.servonum;i++)
 80023cc:	4286      	cmp	r6, r0
 80023ce:	d8f7      	bhi.n	80023c0 <HAL_UART_RxCpltCallback+0x158>
				xQueueOverwriteFromISR(J4vectorqueueHandle,&portJ4_anglevector, &xHigherPriorityTaskWoken);
 80023d0:	494b      	ldr	r1, [pc, #300]	; (8002500 <HAL_UART_RxCpltCallback+0x298>)
 80023d2:	2302      	movs	r3, #2
 80023d4:	4a45      	ldr	r2, [pc, #276]	; (80024ec <HAL_UART_RxCpltCallback+0x284>)
 80023d6:	6808      	ldr	r0, [r1, #0]
 80023d8:	4948      	ldr	r1, [pc, #288]	; (80024fc <HAL_UART_RxCpltCallback+0x294>)
 80023da:	f004 ff39 	bl	8007250 <xQueueGenericSendFromISR>
				break;
 80023de:	e78e      	b.n	80022fe <HAL_UART_RxCpltCallback+0x96>
				portJ2_anglevector.servonum = rx_buff[2]==0?portJ2_anglevector.servonum:rx_buff[2];
 80023e0:	788e      	ldrb	r6, [r1, #2]
				portJ2_anglevector.servoIDstart = rx_buff[3]==0?portJ2_anglevector.servoIDstart:rx_buff[3];
 80023e2:	78ca      	ldrb	r2, [r1, #3]
				portJ2_anglevector.servonum = rx_buff[2]==0?portJ2_anglevector.servonum:rx_buff[2];
 80023e4:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_UART_RxCpltCallback+0x29c>)
 80023e6:	2e00      	cmp	r6, #0
 80023e8:	d155      	bne.n	8002496 <HAL_UART_RxCpltCallback+0x22e>
 80023ea:	781e      	ldrb	r6, [r3, #0]
				portJ2_anglevector.servoIDstart = rx_buff[3]==0?portJ2_anglevector.servoIDstart:rx_buff[3];
 80023ec:	b902      	cbnz	r2, 80023f0 <HAL_UART_RxCpltCallback+0x188>
 80023ee:	785a      	ldrb	r2, [r3, #1]
 80023f0:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0;i<portJ2_anglevector.servonum;i++)
 80023f2:	b156      	cbz	r6, 800240a <HAL_UART_RxCpltCallback+0x1a2>
 80023f4:	493b      	ldr	r1, [pc, #236]	; (80024e4 <HAL_UART_RxCpltCallback+0x27c>)
{
 80023f6:	2300      	movs	r3, #0
 80023f8:	4a42      	ldr	r2, [pc, #264]	; (8002504 <HAL_UART_RxCpltCallback+0x29c>)
 80023fa:	3301      	adds	r3, #1
					portJ2_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 80023fc:	f831 5b02 	ldrh.w	r5, [r1], #2
				for(uint8_t i = 0;i<portJ2_anglevector.servonum;i++)
 8002400:	b2d8      	uxtb	r0, r3
					portJ2_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 8002402:	f822 5f02 	strh.w	r5, [r2, #2]!
				for(uint8_t i = 0;i<portJ2_anglevector.servonum;i++)
 8002406:	42b0      	cmp	r0, r6
 8002408:	d3f7      	bcc.n	80023fa <HAL_UART_RxCpltCallback+0x192>
				xQueueOverwriteFromISR(J2vectorqueueHandle,&portJ2_anglevector, &xHigherPriorityTaskWoken);
 800240a:	493f      	ldr	r1, [pc, #252]	; (8002508 <HAL_UART_RxCpltCallback+0x2a0>)
 800240c:	2302      	movs	r3, #2
 800240e:	4a37      	ldr	r2, [pc, #220]	; (80024ec <HAL_UART_RxCpltCallback+0x284>)
 8002410:	6808      	ldr	r0, [r1, #0]
 8002412:	493c      	ldr	r1, [pc, #240]	; (8002504 <HAL_UART_RxCpltCallback+0x29c>)
 8002414:	f004 ff1c 	bl	8007250 <xQueueGenericSendFromISR>
				break;
 8002418:	e771      	b.n	80022fe <HAL_UART_RxCpltCallback+0x96>
				portJ3_anglevector.servonum = rx_buff[2]==0?portJ3_anglevector.servonum:rx_buff[2];
 800241a:	788e      	ldrb	r6, [r1, #2]
				portJ3_anglevector.servoIDstart = rx_buff[3]==0?portJ3_anglevector.servoIDstart:rx_buff[3];
 800241c:	78ca      	ldrb	r2, [r1, #3]
				portJ3_anglevector.servonum = rx_buff[2]==0?portJ3_anglevector.servonum:rx_buff[2];
 800241e:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_UART_RxCpltCallback+0x2a4>)
 8002420:	2e00      	cmp	r6, #0
 8002422:	d133      	bne.n	800248c <HAL_UART_RxCpltCallback+0x224>
 8002424:	781e      	ldrb	r6, [r3, #0]
				portJ3_anglevector.servoIDstart = rx_buff[3]==0?portJ3_anglevector.servoIDstart:rx_buff[3];
 8002426:	b902      	cbnz	r2, 800242a <HAL_UART_RxCpltCallback+0x1c2>
 8002428:	785a      	ldrb	r2, [r3, #1]
 800242a:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0;i<portJ3_anglevector.servonum;i++)
 800242c:	b156      	cbz	r6, 8002444 <HAL_UART_RxCpltCallback+0x1dc>
 800242e:	492d      	ldr	r1, [pc, #180]	; (80024e4 <HAL_UART_RxCpltCallback+0x27c>)
{
 8002430:	2300      	movs	r3, #0
 8002432:	4a36      	ldr	r2, [pc, #216]	; (800250c <HAL_UART_RxCpltCallback+0x2a4>)
 8002434:	3301      	adds	r3, #1
					portJ3_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 8002436:	f831 5b02 	ldrh.w	r5, [r1], #2
				for(uint8_t i = 0;i<portJ3_anglevector.servonum;i++)
 800243a:	b2d8      	uxtb	r0, r3
					portJ3_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 800243c:	f822 5f02 	strh.w	r5, [r2, #2]!
				for(uint8_t i = 0;i<portJ3_anglevector.servonum;i++)
 8002440:	4286      	cmp	r6, r0
 8002442:	d8f7      	bhi.n	8002434 <HAL_UART_RxCpltCallback+0x1cc>
				xQueueOverwriteFromISR(J3vectorqueueHandle,&portJ3_anglevector, &xHigherPriorityTaskWoken);
 8002444:	4932      	ldr	r1, [pc, #200]	; (8002510 <HAL_UART_RxCpltCallback+0x2a8>)
 8002446:	2302      	movs	r3, #2
 8002448:	4a28      	ldr	r2, [pc, #160]	; (80024ec <HAL_UART_RxCpltCallback+0x284>)
 800244a:	6808      	ldr	r0, [r1, #0]
 800244c:	492f      	ldr	r1, [pc, #188]	; (800250c <HAL_UART_RxCpltCallback+0x2a4>)
 800244e:	f004 feff 	bl	8007250 <xQueueGenericSendFromISR>
				break;
 8002452:	e754      	b.n	80022fe <HAL_UART_RxCpltCallback+0x96>
				portJ1_anglevector.servonum = rx_buff[2]==0?portJ1_anglevector.servonum:rx_buff[2];
 8002454:	788e      	ldrb	r6, [r1, #2]
				portJ1_anglevector.servoIDstart = rx_buff[3]==0?portJ1_anglevector.servoIDstart:rx_buff[3];
 8002456:	78ca      	ldrb	r2, [r1, #3]
				portJ1_anglevector.servonum = rx_buff[2]==0?portJ1_anglevector.servonum:rx_buff[2];
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <HAL_UART_RxCpltCallback+0x2ac>)
 800245a:	bb0e      	cbnz	r6, 80024a0 <HAL_UART_RxCpltCallback+0x238>
 800245c:	781e      	ldrb	r6, [r3, #0]
				portJ1_anglevector.servoIDstart = rx_buff[3]==0?portJ1_anglevector.servoIDstart:rx_buff[3];
 800245e:	b902      	cbnz	r2, 8002462 <HAL_UART_RxCpltCallback+0x1fa>
 8002460:	785a      	ldrb	r2, [r3, #1]
 8002462:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0;i<portJ1_anglevector.servonum;i++)
 8002464:	b156      	cbz	r6, 800247c <HAL_UART_RxCpltCallback+0x214>
 8002466:	491f      	ldr	r1, [pc, #124]	; (80024e4 <HAL_UART_RxCpltCallback+0x27c>)
{
 8002468:	2300      	movs	r3, #0
 800246a:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <HAL_UART_RxCpltCallback+0x2ac>)
 800246c:	3301      	adds	r3, #1
					portJ1_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 800246e:	f831 5b02 	ldrh.w	r5, [r1], #2
				for(uint8_t i = 0;i<portJ1_anglevector.servonum;i++)
 8002472:	b2d8      	uxtb	r0, r3
					portJ1_anglevector.angle[i] = *(uint16_t *)&rx_buff[4+2*i];
 8002474:	f822 5f02 	strh.w	r5, [r2, #2]!
				for(uint8_t i = 0;i<portJ1_anglevector.servonum;i++)
 8002478:	4286      	cmp	r6, r0
 800247a:	d8f7      	bhi.n	800246c <HAL_UART_RxCpltCallback+0x204>
				xQueueOverwriteFromISR(J1vectorqueueHandle,&portJ1_anglevector, &xHigherPriorityTaskWoken);
 800247c:	4926      	ldr	r1, [pc, #152]	; (8002518 <HAL_UART_RxCpltCallback+0x2b0>)
 800247e:	2302      	movs	r3, #2
 8002480:	4a1a      	ldr	r2, [pc, #104]	; (80024ec <HAL_UART_RxCpltCallback+0x284>)
 8002482:	6808      	ldr	r0, [r1, #0]
 8002484:	4923      	ldr	r1, [pc, #140]	; (8002514 <HAL_UART_RxCpltCallback+0x2ac>)
 8002486:	f004 fee3 	bl	8007250 <xQueueGenericSendFromISR>
				break;
 800248a:	e738      	b.n	80022fe <HAL_UART_RxCpltCallback+0x96>
				portJ3_anglevector.servonum = rx_buff[2]==0?portJ3_anglevector.servonum:rx_buff[2];
 800248c:	701e      	strb	r6, [r3, #0]
				portJ3_anglevector.servoIDstart = rx_buff[3]==0?portJ3_anglevector.servoIDstart:rx_buff[3];
 800248e:	2a00      	cmp	r2, #0
 8002490:	d0ca      	beq.n	8002428 <HAL_UART_RxCpltCallback+0x1c0>
 8002492:	705a      	strb	r2, [r3, #1]
 8002494:	e7cb      	b.n	800242e <HAL_UART_RxCpltCallback+0x1c6>
				portJ2_anglevector.servonum = rx_buff[2]==0?portJ2_anglevector.servonum:rx_buff[2];
 8002496:	701e      	strb	r6, [r3, #0]
				portJ2_anglevector.servoIDstart = rx_buff[3]==0?portJ2_anglevector.servoIDstart:rx_buff[3];
 8002498:	2a00      	cmp	r2, #0
 800249a:	d0a8      	beq.n	80023ee <HAL_UART_RxCpltCallback+0x186>
 800249c:	705a      	strb	r2, [r3, #1]
 800249e:	e7a9      	b.n	80023f4 <HAL_UART_RxCpltCallback+0x18c>
				portJ1_anglevector.servonum = rx_buff[2]==0?portJ1_anglevector.servonum:rx_buff[2];
 80024a0:	701e      	strb	r6, [r3, #0]
				portJ1_anglevector.servoIDstart = rx_buff[3]==0?portJ1_anglevector.servoIDstart:rx_buff[3];
 80024a2:	2a00      	cmp	r2, #0
 80024a4:	d0dc      	beq.n	8002460 <HAL_UART_RxCpltCallback+0x1f8>
 80024a6:	705a      	strb	r2, [r3, #1]
 80024a8:	e7dd      	b.n	8002466 <HAL_UART_RxCpltCallback+0x1fe>
				portJ6_anglevector.servonum = rx_buff[2]==0?portJ6_anglevector.servonum:rx_buff[2];
 80024aa:	701e      	strb	r6, [r3, #0]
				portJ6_anglevector.servoIDstart = rx_buff[3]==0?portJ6_anglevector.servoIDstart:rx_buff[3];
 80024ac:	2a00      	cmp	r2, #0
 80024ae:	f43f af63 	beq.w	8002378 <HAL_UART_RxCpltCallback+0x110>
 80024b2:	705a      	strb	r2, [r3, #1]
 80024b4:	e763      	b.n	800237e <HAL_UART_RxCpltCallback+0x116>
				portJ4_anglevector.servonum = rx_buff[2]==0?portJ4_anglevector.servonum:rx_buff[2];
 80024b6:	701e      	strb	r6, [r3, #0]
				portJ4_anglevector.servoIDstart = rx_buff[3]==0?portJ4_anglevector.servoIDstart:rx_buff[3];
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	f43f af7b 	beq.w	80023b4 <HAL_UART_RxCpltCallback+0x14c>
 80024be:	705a      	strb	r2, [r3, #1]
 80024c0:	e77b      	b.n	80023ba <HAL_UART_RxCpltCallback+0x152>
				portJ5_anglevector.servonum = rx_buff[2]==0?portJ5_anglevector.servonum:rx_buff[2];
 80024c2:	701e      	strb	r6, [r3, #0]
				portJ5_anglevector.servoIDstart = rx_buff[3]==0?portJ5_anglevector.servoIDstart:rx_buff[3];
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	f43f af05 	beq.w	80022d4 <HAL_UART_RxCpltCallback+0x6c>
 80024ca:	705a      	strb	r2, [r3, #1]
 80024cc:	e705      	b.n	80022da <HAL_UART_RxCpltCallback+0x72>
 80024ce:	bf00      	nop
 80024d0:	20004420 	.word	0x20004420
 80024d4:	20004220 	.word	0x20004220
 80024d8:	200045b8 	.word	0x200045b8
 80024dc:	200045a0 	.word	0x200045a0
 80024e0:	20000064 	.word	0x20000064
 80024e4:	200045a4 	.word	0x200045a4
 80024e8:	20004120 	.word	0x20004120
 80024ec:	200001e4 	.word	0x200001e4
 80024f0:	e000ed04 	.word	0xe000ed04
 80024f4:	2000007c 	.word	0x2000007c
 80024f8:	20004128 	.word	0x20004128
 80024fc:	2000004c 	.word	0x2000004c
 8002500:	20004144 	.word	0x20004144
 8002504:	2000001c 	.word	0x2000001c
 8002508:	20004140 	.word	0x20004140
 800250c:	20000034 	.word	0x20000034
 8002510:	2000413c 	.word	0x2000413c
 8002514:	20000004 	.word	0x20000004
 8002518:	2000412c 	.word	0x2000412c

0800251c <_ZN3Imu8mpuWriteEhh>:
{
	pollingRead(); //read from SPI
}

void Imu::mpuWrite(uint8_t address, uint8_t value)
{
 800251c:	b530      	push	{r4, r5, lr}
	IMU_SPI_CS_L;
 800251e:	4c12      	ldr	r4, [pc, #72]	; (8002568 <_ZN3Imu8mpuWriteEhh+0x4c>)
{
 8002520:	b083      	sub	sp, #12
 8002522:	4605      	mov	r5, r0
 8002524:	f88d 1007 	strb.w	r1, [sp, #7]
	IMU_SPI_CS_L;
 8002528:	4620      	mov	r0, r4
{
 800252a:	f88d 2006 	strb.w	r2, [sp, #6]
	IMU_SPI_CS_L;
 800252e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002532:	2200      	movs	r2, #0
 8002534:	f001 fb4a 	bl	8003bcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, &address, 1, 1000);
 8002538:	f10d 0107 	add.w	r1, sp, #7
 800253c:	6828      	ldr	r0, [r5, #0]
 800253e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002542:	2201      	movs	r2, #1
 8002544:	f003 f8cc 	bl	80056e0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi_, &value, 1, 1000);
 8002548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254c:	f10d 0106 	add.w	r1, sp, #6
 8002550:	6828      	ldr	r0, [r5, #0]
 8002552:	2201      	movs	r2, #1
 8002554:	f003 f8c4 	bl	80056e0 <HAL_SPI_Transmit>
	IMU_SPI_CS_H;
 8002558:	4620      	mov	r0, r4
 800255a:	2201      	movs	r2, #1
 800255c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002560:	f001 fb34 	bl	8003bcc <HAL_GPIO_WritePin>
}
 8002564:	b003      	add	sp, #12
 8002566:	bd30      	pop	{r4, r5, pc}
 8002568:	58020000 	.word	0x58020000

0800256c <_ZN3Imu8gyroInitEv>:
	IMU_SPI_CS_H;
	return temp;
}

void Imu::gyroInit(void)
{
 800256c:	b510      	push	{r4, lr}
 800256e:	4604      	mov	r4, r0
	HAL_Delay(100);
 8002570:	2064      	movs	r0, #100	; 0x64
 8002572:	f000 fb07 	bl	8002b84 <HAL_Delay>
	//  mpuWrite( 0x6B, 0x80);             //PWR_MGMT_1    -- DEVICE_RESET 1
	HAL_Delay(10);
 8002576:	200a      	movs	r0, #10
 8002578:	f000 fb04 	bl	8002b84 <HAL_Delay>
	//mpuWrite( 0x6B, 0x01);             //PWR_MGMT_1    -- SLEEP 0; CYCLE 0; TEMP_DIS 0; CLKSEL 3 (PLL with Z Gyro reference)
	HAL_Delay(1); //very important!, some duration for process the setting
 800257c:	2001      	movs	r0, #1
 800257e:	f000 fb01 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x6A, 0x10);             //disable i2c communication
 8002582:	4620      	mov	r0, r4
 8002584:	2210      	movs	r2, #16
 8002586:	216a      	movs	r1, #106	; 0x6a
 8002588:	f7ff ffc8 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 800258c:	2001      	movs	r0, #1
 800258e:	f000 faf9 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x1A, GYRO_DLPF_CFG); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 8002592:	4620      	mov	r0, r4
 8002594:	2201      	movs	r2, #1
 8002596:	211a      	movs	r1, #26
 8002598:	f7ff ffc0 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 800259c:	2001      	movs	r0, #1
 800259e:	f000 faf1 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x1B, 0x18);             //GYRO_CONFIG   -- FS_SEL = 3: Full scale set to 2000 deg/sec
 80025a2:	4620      	mov	r0, r4
 80025a4:	2218      	movs	r2, #24
 80025a6:	211b      	movs	r1, #27
 80025a8:	f7ff ffb8 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(10); //very importnat! between gyro and acc
 80025ac:	200a      	movs	r0, #10
}
 80025ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(10); //very importnat! between gyro and acc
 80025b2:	f000 bae7 	b.w	8002b84 <HAL_Delay>
 80025b6:	bf00      	nop

080025b8 <_ZN3Imu7accInitEv>:

void Imu::accInit (void) {
 80025b8:	b510      	push	{r4, lr}
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 80025ba:	2210      	movs	r2, #16
void Imu::accInit (void) {
 80025bc:	4604      	mov	r4, r0
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 80025be:	211c      	movs	r1, #28
 80025c0:	f7ff ffac 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 80025c4:	2001      	movs	r0, #1
 80025c6:	f000 fadd 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x1D, ACC_DLPF_CFG);
 80025ca:	4620      	mov	r0, r4
 80025cc:	2203      	movs	r2, #3
 80025ce:	211d      	movs	r1, #29
 80025d0:	f7ff ffa4 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(10);
 80025d4:	200a      	movs	r0, #10
}
 80025d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(10);
 80025da:	f000 bad3 	b.w	8002b84 <HAL_Delay>
 80025de:	bf00      	nop

080025e0 <_ZN3Imu7magInitEv>:


void Imu::magInit(void)
{
 80025e0:	b510      	push	{r4, lr}
 80025e2:	4604      	mov	r4, r0
	HAL_Delay(10);
 80025e4:	200a      	movs	r0, #10
 80025e6:	f000 facd 	bl	8002b84 <HAL_Delay>
	//at this stage, the MAG is configured via the original MAG init function in I2C bypass mode
	//now we configure MPU as a I2C Master device to handle the MAG via the I2C AUX port (done here for HMC5883)
	mpuWrite( 0x6A, 0x20); //USER_CTRL -- DMP_EN=0 ; FIFO_EN=0 ; I2C_MST_EN=1 (I2C master mode) ; I2C_IF_DIS=0 ; FIFO_RESET=0 ; I2C_MST_RESET=0 ; SIG_COND_RESET=0
 80025ea:	2220      	movs	r2, #32
 80025ec:	4620      	mov	r0, r4
 80025ee:	216a      	movs	r1, #106	; 0x6a
 80025f0:	f7ff ff94 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(10);
 80025f4:	200a      	movs	r0, #10
 80025f6:	f000 fac5 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x37, 0x00); //INT_PIN_CFG -- INT_LEVEL=0 ; INT_OPEN=0 ; LATCH_INT_EN=0 ; INT_RD_CLEAR=0 ; FSYNC_INT_LEVEL=0 ; FSYNC_INT_EN=0 ; I2C_BYPASS_EN=0 ; CLKOUT_EN=0
 80025fa:	4620      	mov	r0, r4
 80025fc:	2200      	movs	r2, #0
 80025fe:	2137      	movs	r1, #55	; 0x37
 8002600:	f7ff ff8c 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 8002604:	2001      	movs	r0, #1
 8002606:	f000 fabd 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x24, 0x0D); //I2C_MST_CTRL -- MULT_MST_EN=0 ; WAIT_FOR_ES=0 ; SLV_3_FIFO_EN=0 ; I2C_MST_P_NSR=0 ; I2C_MST_CLK=13 (I2C slave speed bus = 400kHz)
 800260a:	4620      	mov	r0, r4
 800260c:	220d      	movs	r2, #13
 800260e:	2124      	movs	r1, #36	; 0x24
 8002610:	f7ff ff84 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 8002614:	2001      	movs	r0, #1
 8002616:	f000 fab5 	bl	8002b84 <HAL_Delay>

	//write mode
	mpuWrite( 0x25, MAG_ADDRESS);
 800261a:	4620      	mov	r0, r4
 800261c:	220c      	movs	r2, #12
 800261e:	2125      	movs	r1, #37	; 0x25
 8002620:	f7ff ff7c 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 8002624:	2001      	movs	r0, #1
 8002626:	f000 faad 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x26, 0x0B);
 800262a:	4620      	mov	r0, r4
 800262c:	220b      	movs	r2, #11
 800262e:	2126      	movs	r1, #38	; 0x26
 8002630:	f7ff ff74 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 8002634:	2001      	movs	r0, #1
 8002636:	f000 faa5 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x63, 0x01);
 800263a:	4620      	mov	r0, r4
 800263c:	2201      	movs	r2, #1
 800263e:	2163      	movs	r1, #99	; 0x63
 8002640:	f7ff ff6c 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f000 fa9d 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 800264a:	4620      	mov	r0, r4
 800264c:	2281      	movs	r2, #129	; 0x81
 800264e:	2127      	movs	r1, #39	; 0x27
 8002650:	f7ff ff64 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 8002654:	2001      	movs	r0, #1
 8002656:	f000 fa95 	bl	8002b84 <HAL_Delay>

	mpuWrite( 0x26, 0x0A);
 800265a:	4620      	mov	r0, r4
 800265c:	220a      	movs	r2, #10
 800265e:	2126      	movs	r1, #38	; 0x26
 8002660:	f7ff ff5c 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 8002664:	2001      	movs	r0, #1
 8002666:	f000 fa8d 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x63, 0x16);
 800266a:	4620      	mov	r0, r4
 800266c:	2216      	movs	r2, #22
 800266e:	2163      	movs	r1, #99	; 0x63
 8002670:	f7ff ff54 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 8002674:	2001      	movs	r0, #1
 8002676:	f000 fa85 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 800267a:	4620      	mov	r0, r4
 800267c:	2281      	movs	r2, #129	; 0x81
 800267e:	2127      	movs	r1, #39	; 0x27
 8002680:	f7ff ff4c 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 8002684:	2001      	movs	r0, #1
 8002686:	f000 fa7d 	bl	8002b84 <HAL_Delay>

	//read mode
	mpuWrite( 0x25, 0x80|MAG_ADDRESS);//I2C_SLV0_ADDR -- I2C_SLV4_RW=1 (read operation) ; I2C_SLV4_ADDR=MAG_ADDRESS
 800268a:	4620      	mov	r0, r4
 800268c:	228c      	movs	r2, #140	; 0x8c
 800268e:	2125      	movs	r1, #37	; 0x25
 8002690:	f7ff ff44 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 8002694:	2001      	movs	r0, #1
 8002696:	f000 fa75 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x26, MAG_DATA_REGISTER);//I2C_SLV0_REG -- 6 data bytes of MAG are stored in 6 registers. First register address is MAG_DATA_REGISTER
 800269a:	4620      	mov	r0, r4
 800269c:	2203      	movs	r2, #3
 800269e:	2126      	movs	r1, #38	; 0x26
 80026a0:	f7ff ff3c 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f000 fa6d 	bl	8002b84 <HAL_Delay>
	mpuWrite( 0x27, 0x87);
 80026aa:	4620      	mov	r0, r4
 80026ac:	2287      	movs	r2, #135	; 0x87
 80026ae:	2127      	movs	r1, #39	; 0x27
 80026b0:	f7ff ff34 	bl	800251c <_ZN3Imu8mpuWriteEhh>
	HAL_Delay(1);
 80026b4:	2001      	movs	r0, #1
}
 80026b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1);
 80026ba:	f000 ba63 	b.w	8002b84 <HAL_Delay>
 80026be:	bf00      	nop

080026c0 <_ZN3Imu4initEP19__SPI_HandleTypeDef>:
{
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4604      	mov	r4, r0
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
	   __niter > 0; --__niter, ++__first)
	*__first = __tmp;
 80026c4:	2500      	movs	r5, #0
 80026c6:	4815      	ldr	r0, [pc, #84]	; (800271c <_ZN3Imu4initEP19__SPI_HandleTypeDef+0x5c>)
 80026c8:	f104 0316 	add.w	r3, r4, #22
 80026cc:	f104 061d 	add.w	r6, r4, #29
		dummy_[i] = 0;
 80026d0:	462a      	mov	r2, r5
 80026d2:	80a5      	strh	r5, [r4, #4]
 80026d4:	80e5      	strh	r5, [r4, #6]
 80026d6:	8125      	strh	r5, [r4, #8]
 80026d8:	8165      	strh	r5, [r4, #10]
 80026da:	81a5      	strh	r5, [r4, #12]
 80026dc:	81e5      	strh	r5, [r4, #14]
 80026de:	8225      	strh	r5, [r4, #16]
 80026e0:	8265      	strh	r5, [r4, #18]
 80026e2:	82a5      	strh	r5, [r4, #20]
 80026e4:	f803 2b01 	strb.w	r2, [r3], #1
	for(int i = 0; i < SENSOR_DATA_LENGTH; i++)
 80026e8:	42b3      	cmp	r3, r6
		adc_[i] = 0;
 80026ea:	f800 2f01 	strb.w	r2, [r0, #1]!
	for(int i = 0; i < SENSOR_DATA_LENGTH; i++)
 80026ee:	d1f9      	bne.n	80026e4 <_ZN3Imu4initEP19__SPI_HandleTypeDef+0x24>
	hspi_ = hspi;
 80026f0:	6021      	str	r1, [r4, #0]
	gyroInit();
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7ff ff3a 	bl	800256c <_ZN3Imu8gyroInitEv>
	accInit();
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7ff ff5d 	bl	80025b8 <_ZN3Imu7accInitEv>
	magInit();
 80026fe:	4620      	mov	r0, r4
 8002700:	f7ff ff6e 	bl	80025e0 <_ZN3Imu7magInitEv>
	hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800270e:	601a      	str	r2, [r3, #0]
	hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	bd70      	pop	{r4, r5, r6, pc}
 800271a:	bf00      	nop
 800271c:	200001d7 	.word	0x200001d7

08002720 <StartLED1Task>:

  /* USER CODE BEGIN StartLED1Task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8002720:	4c05      	ldr	r4, [pc, #20]	; (8002738 <StartLED1Task+0x18>)
{
 8002722:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8002724:	4620      	mov	r0, r4
 8002726:	2104      	movs	r1, #4
 8002728:	f001 fa56 	bl	8003bd8 <HAL_GPIO_TogglePin>
	  osDelay(300);
 800272c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002730:	f004 f99c 	bl	8006a6c <osDelay>
 8002734:	e7f6      	b.n	8002724 <StartLED1Task+0x4>
 8002736:	bf00      	nop
 8002738:	58021000 	.word	0x58021000

0800273c <StartLED2Task>:
{
  /* USER CODE BEGIN StartLED2Task */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800273c:	4c05      	ldr	r4, [pc, #20]	; (8002754 <StartLED2Task+0x18>)
{
 800273e:	b508      	push	{r3, lr}
    HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8002740:	4620      	mov	r0, r4
 8002742:	2108      	movs	r1, #8
 8002744:	f001 fa48 	bl	8003bd8 <HAL_GPIO_TogglePin>
	  osDelay(600);
 8002748:	f44f 7016 	mov.w	r0, #600	; 0x258
 800274c:	f004 f98e 	bl	8006a6c <osDelay>
 8002750:	e7f6      	b.n	8002740 <StartLED2Task+0x4>
 8002752:	bf00      	nop
 8002754:	58021000 	.word	0x58021000

08002758 <StartJ1uartport>:
uint8_t rx_servo[6];

/* StartJ1uartport function */
//uart2
void StartJ1uartport(void const * argument)
{
 8002758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800275c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80027e8 <StartJ1uartport+0x90>
 8002760:	b089      	sub	sp, #36	; 0x24
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
				motornum++;
				//now send to data
				HAL_UART_Transmit(&huart2,datatosend,3,1);
 8002762:	4e1f      	ldr	r6, [pc, #124]	; (80027e0 <StartJ1uartport+0x88>)
				HAL_UART_Receive_IT(&huart2,rx_servo,6);
 8002764:	4f1f      	ldr	r7, [pc, #124]	; (80027e4 <StartJ1uartport+0x8c>)
		if(xQueuePeek(J1vectorqueueHandle,&anglevector,0)==pdPASS)
 8002766:	2301      	movs	r3, #1
 8002768:	2200      	movs	r2, #0
 800276a:	a902      	add	r1, sp, #8
 800276c:	f8d8 0000 	ldr.w	r0, [r8]
 8002770:	f004 fdde 	bl	8007330 <xQueueGenericReceive>
 8002774:	2801      	cmp	r0, #1
 8002776:	d12e      	bne.n	80027d6 <StartJ1uartport+0x7e>
				if(motornum>=anglevector.servonum)
 8002778:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f2      	beq.n	8002766 <StartJ1uartport+0xe>
 8002780:	2500      	movs	r5, #0
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002782:	ab08      	add	r3, sp, #32
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002784:	f89d 4009 	ldrb.w	r4, [sp, #9]
				motornum++;
 8002788:	f105 0c01 	add.w	ip, r5, #1
				HAL_UART_Transmit(&huart2,datatosend,3,1);
 800278c:	a901      	add	r1, sp, #4
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 800278e:	eb03 0245 	add.w	r2, r3, r5, lsl #1
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002792:	3c80      	subs	r4, #128	; 0x80
				HAL_UART_Transmit(&huart2,datatosend,3,1);
 8002794:	2301      	movs	r3, #1
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002796:	f832 0c16 	ldrh.w	r0, [r2, #-22]
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 800279a:	442c      	add	r4, r5
				HAL_UART_Transmit(&huart2,datatosend,3,1);
 800279c:	2203      	movs	r2, #3
				motornum++;
 800279e:	fa5f f58c 	uxtb.w	r5, ip
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 80027a2:	f000 0e7f 	and.w	lr, r0, #127	; 0x7f
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80027a6:	f3c0 19c6 	ubfx	r9, r0, #7, #7
				HAL_UART_Transmit(&huart2,datatosend,3,1);
 80027aa:	4630      	mov	r0, r6
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80027ac:	f88d 4004 	strb.w	r4, [sp, #4]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 80027b0:	f88d e006 	strb.w	lr, [sp, #6]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80027b4:	f88d 9005 	strb.w	r9, [sp, #5]
				HAL_UART_Transmit(&huart2,datatosend,3,1);
 80027b8:	f003 ffe8 	bl	800678c <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart2,rx_servo,6);
 80027bc:	2206      	movs	r2, #6
 80027be:	4639      	mov	r1, r7
 80027c0:	4630      	mov	r0, r6
 80027c2:	f003 fa33 	bl	8005c2c <HAL_UART_Receive_IT>
				//delayUs(100);
				osDelay(100);
 80027c6:	2064      	movs	r0, #100	; 0x64
 80027c8:	f004 f950 	bl	8006a6c <osDelay>
				if(motornum>=anglevector.servonum)
 80027cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80027d0:	42ab      	cmp	r3, r5
 80027d2:	d8d6      	bhi.n	8002782 <StartJ1uartport+0x2a>
 80027d4:	e7c7      	b.n	8002766 <StartJ1uartport+0xe>
			}
		}
		else
			osDelay(1);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f004 f948 	bl	8006a6c <osDelay>
 80027dc:	e7c3      	b.n	8002766 <StartJ1uartport+0xe>
 80027de:	bf00      	nop
 80027e0:	20004520 	.word	0x20004520
 80027e4:	200045b8 	.word	0x200045b8
 80027e8:	2000412c 	.word	0x2000412c

080027ec <StartJ2uartport>:
}

/* StartJ2uartport function */
//uart7
void StartJ2uartport(void const * argument)
{
 80027ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027f0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002880 <StartJ2uartport+0x94>
 80027f4:	b088      	sub	sp, #32
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
				motornum++;
				//now send to data
				HAL_UART_Receive_IT(&huart7,rx_servo,6);
 80027f6:	4f20      	ldr	r7, [pc, #128]	; (8002878 <StartJ2uartport+0x8c>)
 80027f8:	4c20      	ldr	r4, [pc, #128]	; (800287c <StartJ2uartport+0x90>)
		if(xQueuePeek(J2vectorqueueHandle,&anglevector,0)==pdPASS)
 80027fa:	2301      	movs	r3, #1
 80027fc:	2200      	movs	r2, #0
 80027fe:	a902      	add	r1, sp, #8
 8002800:	f8d8 0000 	ldr.w	r0, [r8]
 8002804:	f004 fd94 	bl	8007330 <xQueueGenericReceive>
 8002808:	2801      	cmp	r0, #1
 800280a:	d130      	bne.n	800286e <StartJ2uartport+0x82>
				if(motornum>=anglevector.servonum)
 800280c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f2      	beq.n	80027fa <StartJ2uartport+0xe>
 8002814:	2500      	movs	r5, #0
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002816:	aa08      	add	r2, sp, #32
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002818:	f89d 3009 	ldrb.w	r3, [sp, #9]
				motornum++;
 800281c:	f105 0c01 	add.w	ip, r5, #1
				HAL_UART_Receive_IT(&huart7,rx_servo,6);
 8002820:	4620      	mov	r0, r4
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002822:	eb02 0145 	add.w	r1, r2, r5, lsl #1
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002826:	3b80      	subs	r3, #128	; 0x80
				HAL_UART_Receive_IT(&huart7,rx_servo,6);
 8002828:	2206      	movs	r2, #6
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 800282a:	f831 6c16 	ldrh.w	r6, [r1, #-22]
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 800282e:	442b      	add	r3, r5
				HAL_UART_Receive_IT(&huart7,rx_servo,6);
 8002830:	4639      	mov	r1, r7
				motornum++;
 8002832:	fa5f f58c 	uxtb.w	r5, ip
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002836:	f3c6 1ec6 	ubfx	lr, r6, #7, #7
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 800283a:	f006 067f 	and.w	r6, r6, #127	; 0x7f
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 800283e:	f88d 3004 	strb.w	r3, [sp, #4]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002842:	f88d e005 	strb.w	lr, [sp, #5]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002846:	f88d 6006 	strb.w	r6, [sp, #6]
				HAL_UART_Receive_IT(&huart7,rx_servo,6);
 800284a:	f003 f9ef 	bl	8005c2c <HAL_UART_Receive_IT>
				while(HAL_UART_Transmit(&huart7,datatosend,3,1));
 800284e:	2301      	movs	r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	a901      	add	r1, sp, #4
 8002854:	4620      	mov	r0, r4
 8002856:	f003 ff99 	bl	800678c <HAL_UART_Transmit>
 800285a:	2800      	cmp	r0, #0
 800285c:	d1f7      	bne.n	800284e <StartJ2uartport+0x62>
				//delayUs(100);
				osDelay(1);
 800285e:	2001      	movs	r0, #1
 8002860:	f004 f904 	bl	8006a6c <osDelay>
				if(motornum>=anglevector.servonum)
 8002864:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002868:	42ab      	cmp	r3, r5
 800286a:	d8d4      	bhi.n	8002816 <StartJ2uartport+0x2a>
 800286c:	e7c5      	b.n	80027fa <StartJ2uartport+0xe>
			}
		}
		else
			osDelay(1);
 800286e:	2001      	movs	r0, #1
 8002870:	f004 f8fc 	bl	8006a6c <osDelay>
 8002874:	e7c1      	b.n	80027fa <StartJ2uartport+0xe>
 8002876:	bf00      	nop
 8002878:	200045b8 	.word	0x200045b8
 800287c:	20004220 	.word	0x20004220
 8002880:	20004140 	.word	0x20004140

08002884 <StartJ3uartport>:
}

/* StartJ3uartport function */
//uart5
void StartJ3uartport(void const * argument)
{
 8002884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002888:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8002914 <StartJ3uartport+0x90>
 800288c:	b089      	sub	sp, #36	; 0x24
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
				motornum++;
				//now send to data
				HAL_UART_Transmit(&huart5,datatosend,3,1);
 800288e:	4e1f      	ldr	r6, [pc, #124]	; (800290c <StartJ3uartport+0x88>)
				HAL_UART_Receive_IT(&huart5,rx_servo,6);
 8002890:	4f1f      	ldr	r7, [pc, #124]	; (8002910 <StartJ3uartport+0x8c>)
		if(xQueuePeek(J3vectorqueueHandle,&anglevector,0)==pdPASS)
 8002892:	2301      	movs	r3, #1
 8002894:	2200      	movs	r2, #0
 8002896:	a902      	add	r1, sp, #8
 8002898:	f8d8 0000 	ldr.w	r0, [r8]
 800289c:	f004 fd48 	bl	8007330 <xQueueGenericReceive>
 80028a0:	2801      	cmp	r0, #1
 80028a2:	d12e      	bne.n	8002902 <StartJ3uartport+0x7e>
				if(motornum>=anglevector.servonum)
 80028a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f2      	beq.n	8002892 <StartJ3uartport+0xe>
 80028ac:	2500      	movs	r5, #0
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80028ae:	ab08      	add	r3, sp, #32
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80028b0:	f89d 4009 	ldrb.w	r4, [sp, #9]
				motornum++;
 80028b4:	f105 0c01 	add.w	ip, r5, #1
				HAL_UART_Transmit(&huart5,datatosend,3,1);
 80028b8:	a901      	add	r1, sp, #4
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80028ba:	eb03 0245 	add.w	r2, r3, r5, lsl #1
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80028be:	3c80      	subs	r4, #128	; 0x80
				HAL_UART_Transmit(&huart5,datatosend,3,1);
 80028c0:	2301      	movs	r3, #1
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80028c2:	f832 0c16 	ldrh.w	r0, [r2, #-22]
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80028c6:	442c      	add	r4, r5
				HAL_UART_Transmit(&huart5,datatosend,3,1);
 80028c8:	2203      	movs	r2, #3
				motornum++;
 80028ca:	fa5f f58c 	uxtb.w	r5, ip
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 80028ce:	f000 0e7f 	and.w	lr, r0, #127	; 0x7f
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80028d2:	f3c0 19c6 	ubfx	r9, r0, #7, #7
				HAL_UART_Transmit(&huart5,datatosend,3,1);
 80028d6:	4630      	mov	r0, r6
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80028d8:	f88d 4004 	strb.w	r4, [sp, #4]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 80028dc:	f88d e006 	strb.w	lr, [sp, #6]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80028e0:	f88d 9005 	strb.w	r9, [sp, #5]
				HAL_UART_Transmit(&huart5,datatosend,3,1);
 80028e4:	f003 ff52 	bl	800678c <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart5,rx_servo,6);
 80028e8:	2206      	movs	r2, #6
 80028ea:	4639      	mov	r1, r7
 80028ec:	4630      	mov	r0, r6
 80028ee:	f003 f99d 	bl	8005c2c <HAL_UART_Receive_IT>
				//delayUs(100);
				osDelay(100);
 80028f2:	2064      	movs	r0, #100	; 0x64
 80028f4:	f004 f8ba 	bl	8006a6c <osDelay>
				if(motornum>=anglevector.servonum)
 80028f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80028fc:	42ab      	cmp	r3, r5
 80028fe:	d8d6      	bhi.n	80028ae <StartJ3uartport+0x2a>
 8002900:	e7c7      	b.n	8002892 <StartJ3uartport+0xe>
			}
		}
		else
			osDelay(1);
 8002902:	2001      	movs	r0, #1
 8002904:	f004 f8b2 	bl	8006a6c <osDelay>
 8002908:	e7c3      	b.n	8002892 <StartJ3uartport+0xe>
 800290a:	bf00      	nop
 800290c:	20004320 	.word	0x20004320
 8002910:	200045b8 	.word	0x200045b8
 8002914:	2000413c 	.word	0x2000413c

08002918 <StartJ4uartport>:
}

/* StartJ4uartport function */
//uart4
void StartJ4uartport(void const * argument)
{
 8002918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800291c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80029a8 <StartJ4uartport+0x90>
 8002920:	b089      	sub	sp, #36	; 0x24
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
				motornum++;
				//now send to data
				HAL_UART_Transmit(&huart4,datatosend,3,1);
 8002922:	4e1f      	ldr	r6, [pc, #124]	; (80029a0 <StartJ4uartport+0x88>)
				HAL_UART_Receive_IT(&huart4,rx_servo,6);
 8002924:	4f1f      	ldr	r7, [pc, #124]	; (80029a4 <StartJ4uartport+0x8c>)
		if(xQueuePeek(J4vectorqueueHandle,&anglevector,0)==pdPASS)
 8002926:	2301      	movs	r3, #1
 8002928:	2200      	movs	r2, #0
 800292a:	a902      	add	r1, sp, #8
 800292c:	f8d8 0000 	ldr.w	r0, [r8]
 8002930:	f004 fcfe 	bl	8007330 <xQueueGenericReceive>
 8002934:	2801      	cmp	r0, #1
 8002936:	d12e      	bne.n	8002996 <StartJ4uartport+0x7e>
				if(motornum>=anglevector.servonum)
 8002938:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f2      	beq.n	8002926 <StartJ4uartport+0xe>
 8002940:	2500      	movs	r5, #0
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002942:	ab08      	add	r3, sp, #32
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002944:	f89d 4009 	ldrb.w	r4, [sp, #9]
				motornum++;
 8002948:	f105 0c01 	add.w	ip, r5, #1
				HAL_UART_Transmit(&huart4,datatosend,3,1);
 800294c:	a901      	add	r1, sp, #4
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 800294e:	eb03 0245 	add.w	r2, r3, r5, lsl #1
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002952:	3c80      	subs	r4, #128	; 0x80
				HAL_UART_Transmit(&huart4,datatosend,3,1);
 8002954:	2301      	movs	r3, #1
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002956:	f832 0c16 	ldrh.w	r0, [r2, #-22]
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 800295a:	442c      	add	r4, r5
				HAL_UART_Transmit(&huart4,datatosend,3,1);
 800295c:	2203      	movs	r2, #3
				motornum++;
 800295e:	fa5f f58c 	uxtb.w	r5, ip
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002962:	f000 0e7f 	and.w	lr, r0, #127	; 0x7f
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002966:	f3c0 19c6 	ubfx	r9, r0, #7, #7
				HAL_UART_Transmit(&huart4,datatosend,3,1);
 800296a:	4630      	mov	r0, r6
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 800296c:	f88d 4004 	strb.w	r4, [sp, #4]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002970:	f88d e006 	strb.w	lr, [sp, #6]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002974:	f88d 9005 	strb.w	r9, [sp, #5]
				HAL_UART_Transmit(&huart4,datatosend,3,1);
 8002978:	f003 ff08 	bl	800678c <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart4,rx_servo,6);
 800297c:	2206      	movs	r2, #6
 800297e:	4639      	mov	r1, r7
 8002980:	4630      	mov	r0, r6
 8002982:	f003 f953 	bl	8005c2c <HAL_UART_Receive_IT>
				//delayUs(100);
				osDelay(100);
 8002986:	2064      	movs	r0, #100	; 0x64
 8002988:	f004 f870 	bl	8006a6c <osDelay>
				if(motornum>=anglevector.servonum)
 800298c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002990:	42ab      	cmp	r3, r5
 8002992:	d8d6      	bhi.n	8002942 <StartJ4uartport+0x2a>
 8002994:	e7c7      	b.n	8002926 <StartJ4uartport+0xe>
			}
		}
		else
			osDelay(1);
 8002996:	2001      	movs	r0, #1
 8002998:	f004 f868 	bl	8006a6c <osDelay>
 800299c:	e7c3      	b.n	8002926 <StartJ4uartport+0xe>
 800299e:	bf00      	nop
 80029a0:	200044a0 	.word	0x200044a0
 80029a4:	200045b8 	.word	0x200045b8
 80029a8:	20004144 	.word	0x20004144

080029ac <StartJ5uartport>:
}

/* StartJ5uartport function */
//uart3
void StartJ5uartport(void const * argument)
{
 80029ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029b0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8002a3c <StartJ5uartport+0x90>
 80029b4:	b089      	sub	sp, #36	; 0x24
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
				motornum++;
				//now send to data
				HAL_UART_Transmit(&huart3,datatosend,3,1);
 80029b6:	4e1f      	ldr	r6, [pc, #124]	; (8002a34 <StartJ5uartport+0x88>)
				HAL_UART_Receive_IT(&huart3,rx_servo,6);
 80029b8:	4f1f      	ldr	r7, [pc, #124]	; (8002a38 <StartJ5uartport+0x8c>)
		if(xQueuePeek(J5vectorqueueHandle,&anglevector,0)==pdPASS)
 80029ba:	2301      	movs	r3, #1
 80029bc:	2200      	movs	r2, #0
 80029be:	a902      	add	r1, sp, #8
 80029c0:	f8d8 0000 	ldr.w	r0, [r8]
 80029c4:	f004 fcb4 	bl	8007330 <xQueueGenericReceive>
 80029c8:	2801      	cmp	r0, #1
 80029ca:	d12e      	bne.n	8002a2a <StartJ5uartport+0x7e>
				if(motornum>=anglevector.servonum)
 80029cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f2      	beq.n	80029ba <StartJ5uartport+0xe>
 80029d4:	2500      	movs	r5, #0
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80029d6:	ab08      	add	r3, sp, #32
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80029d8:	f89d 4009 	ldrb.w	r4, [sp, #9]
				motornum++;
 80029dc:	f105 0c01 	add.w	ip, r5, #1
				HAL_UART_Transmit(&huart3,datatosend,3,1);
 80029e0:	a901      	add	r1, sp, #4
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80029e2:	eb03 0245 	add.w	r2, r3, r5, lsl #1
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80029e6:	3c80      	subs	r4, #128	; 0x80
				HAL_UART_Transmit(&huart3,datatosend,3,1);
 80029e8:	2301      	movs	r3, #1
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80029ea:	f832 0c16 	ldrh.w	r0, [r2, #-22]
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 80029ee:	442c      	add	r4, r5
				HAL_UART_Transmit(&huart3,datatosend,3,1);
 80029f0:	2203      	movs	r2, #3
				motornum++;
 80029f2:	fa5f f58c 	uxtb.w	r5, ip
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 80029f6:	f000 0e7f 	and.w	lr, r0, #127	; 0x7f
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 80029fa:	f3c0 19c6 	ubfx	r9, r0, #7, #7
				HAL_UART_Transmit(&huart3,datatosend,3,1);
 80029fe:	4630      	mov	r0, r6
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002a00:	f88d 4004 	strb.w	r4, [sp, #4]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002a04:	f88d e006 	strb.w	lr, [sp, #6]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002a08:	f88d 9005 	strb.w	r9, [sp, #5]
				HAL_UART_Transmit(&huart3,datatosend,3,1);
 8002a0c:	f003 febe 	bl	800678c <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3,rx_servo,6);
 8002a10:	2206      	movs	r2, #6
 8002a12:	4639      	mov	r1, r7
 8002a14:	4630      	mov	r0, r6
 8002a16:	f003 f909 	bl	8005c2c <HAL_UART_Receive_IT>
				//delayUs(100);
				osDelay(100);
 8002a1a:	2064      	movs	r0, #100	; 0x64
 8002a1c:	f004 f826 	bl	8006a6c <osDelay>
				if(motornum>=anglevector.servonum)
 8002a20:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002a24:	42ab      	cmp	r3, r5
 8002a26:	d8d6      	bhi.n	80029d6 <StartJ5uartport+0x2a>
 8002a28:	e7c7      	b.n	80029ba <StartJ5uartport+0xe>
			}
		}
		else
			osDelay(1);
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f004 f81e 	bl	8006a6c <osDelay>
 8002a30:	e7c3      	b.n	80029ba <StartJ5uartport+0xe>
 8002a32:	bf00      	nop
 8002a34:	200042a0 	.word	0x200042a0
 8002a38:	200045b8 	.word	0x200045b8
 8002a3c:	20004120 	.word	0x20004120

08002a40 <StartJ6uartport>:
}

/* StartJ6uartport function */
//uart1
void StartJ6uartport(void const * argument)
{
 8002a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a44:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8002ad0 <StartJ6uartport+0x90>
 8002a48:	b089      	sub	sp, #36	; 0x24
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
				motornum++;
				//now send to data
				HAL_UART_Transmit(&huart1,datatosend,3,1);
 8002a4a:	4e1f      	ldr	r6, [pc, #124]	; (8002ac8 <StartJ6uartport+0x88>)
				HAL_UART_Receive_IT(&huart1,rx_servo,6);
 8002a4c:	4f1f      	ldr	r7, [pc, #124]	; (8002acc <StartJ6uartport+0x8c>)
		if(xQueuePeek(J6vectorqueueHandle,&anglevector,0)==pdPASS)
 8002a4e:	2301      	movs	r3, #1
 8002a50:	2200      	movs	r2, #0
 8002a52:	a902      	add	r1, sp, #8
 8002a54:	f8d8 0000 	ldr.w	r0, [r8]
 8002a58:	f004 fc6a 	bl	8007330 <xQueueGenericReceive>
 8002a5c:	2801      	cmp	r0, #1
 8002a5e:	d12e      	bne.n	8002abe <StartJ6uartport+0x7e>
				if(motornum>=anglevector.servonum)
 8002a60:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f2      	beq.n	8002a4e <StartJ6uartport+0xe>
 8002a68:	2500      	movs	r5, #0
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002a6a:	ab08      	add	r3, sp, #32
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002a6c:	f89d 4009 	ldrb.w	r4, [sp, #9]
				motornum++;
 8002a70:	f105 0c01 	add.w	ip, r5, #1
				HAL_UART_Transmit(&huart1,datatosend,3,1);
 8002a74:	a901      	add	r1, sp, #4
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002a76:	eb03 0245 	add.w	r2, r3, r5, lsl #1
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002a7a:	3c80      	subs	r4, #128	; 0x80
				HAL_UART_Transmit(&huart1,datatosend,3,1);
 8002a7c:	2301      	movs	r3, #1
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002a7e:	f832 0c16 	ldrh.w	r0, [r2, #-22]
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002a82:	442c      	add	r4, r5
				HAL_UART_Transmit(&huart1,datatosend,3,1);
 8002a84:	2203      	movs	r2, #3
				motornum++;
 8002a86:	fa5f f58c 	uxtb.w	r5, ip
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002a8a:	f000 0e7f 	and.w	lr, r0, #127	; 0x7f
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002a8e:	f3c0 19c6 	ubfx	r9, r0, #7, #7
				HAL_UART_Transmit(&huart1,datatosend,3,1);
 8002a92:	4630      	mov	r0, r6
				datatosend[0] = 0x80 + motornum + anglevector.servoIDstart;
 8002a94:	f88d 4004 	strb.w	r4, [sp, #4]
				datatosend[2] = (uint8_t)(anglevector.angle[motornum]&0x007f);//low byte
 8002a98:	f88d e006 	strb.w	lr, [sp, #6]
				datatosend[1] = (uint8_t)((anglevector.angle[motornum]&0x3f80) >> 7);//high byte
 8002a9c:	f88d 9005 	strb.w	r9, [sp, #5]
				HAL_UART_Transmit(&huart1,datatosend,3,1);
 8002aa0:	f003 fe74 	bl	800678c <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart1,rx_servo,6);
 8002aa4:	2206      	movs	r2, #6
 8002aa6:	4639      	mov	r1, r7
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	f003 f8bf 	bl	8005c2c <HAL_UART_Receive_IT>
				//delayUs(100);
				osDelay(100);
 8002aae:	2064      	movs	r0, #100	; 0x64
 8002ab0:	f003 ffdc 	bl	8006a6c <osDelay>
				if(motornum>=anglevector.servonum)
 8002ab4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002ab8:	42ab      	cmp	r3, r5
 8002aba:	d8d6      	bhi.n	8002a6a <StartJ6uartport+0x2a>
 8002abc:	e7c7      	b.n	8002a4e <StartJ6uartport+0xe>
			}
		}
		else
			osDelay(1);
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f003 ffd4 	bl	8006a6c <osDelay>
 8002ac4:	e7c3      	b.n	8002a4e <StartJ6uartport+0xe>
 8002ac6:	bf00      	nop
 8002ac8:	200043a0 	.word	0x200043a0
 8002acc:	200045b8 	.word	0x200045b8
 8002ad0:	20004128 	.word	0x20004128

08002ad4 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ad4:	4914      	ldr	r1, [pc, #80]	; (8002b28 <SystemInit+0x54>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ad6:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8002ad8:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <SystemInit+0x58>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002ada:	4815      	ldr	r0, [pc, #84]	; (8002b30 <SystemInit+0x5c>)
{
 8002adc:	b4f0      	push	{r4, r5, r6, r7}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ade:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8002ae2:	2701      	movs	r7, #1

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8002ae4:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8002ae8:	4e12      	ldr	r6, [pc, #72]	; (8002b34 <SystemInit+0x60>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aea:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8002aee:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8002af2:	681c      	ldr	r4, [r3, #0]
 8002af4:	433c      	orrs	r4, r7
 8002af6:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002af8:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002afa:	681c      	ldr	r4, [r3, #0]
 8002afc:	4020      	ands	r0, r4
 8002afe:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8002b00:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8002b02:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8002b04:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8002b08:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8002b0c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8002b10:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8002b14:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002b1c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8002b1e:	661a      	str	r2, [r3, #96]	; 0x60
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8002b20:	6037      	str	r7, [r6, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8002b22:	608d      	str	r5, [r1, #8]
#endif

}
 8002b24:	bcf0      	pop	{r4, r5, r6, r7}
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b34:	51008108 	.word	0x51008108

08002b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b38:	b500      	push	{lr}
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b3a:	2003      	movs	r0, #3
{
 8002b3c:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b3e:	f000 fccf 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7ff f8a8 	bl	8001c98 <HAL_InitTick>
 8002b48:	b118      	cbz	r0, 8002b52 <HAL_Init+0x1a>
  {
    return HAL_ERROR;
 8002b4a:	2001      	movs	r0, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8002b4c:	b003      	add	sp, #12
 8002b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b52:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 8002b54:	f7ff f85e 	bl	8001c14 <HAL_MspInit>
  return HAL_OK;
 8002b58:	9801      	ldr	r0, [sp, #4]
}
 8002b5a:	b003      	add	sp, #12
 8002b5c:	f85d fb04 	ldr.w	pc, [sp], #4

08002b60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002b60:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <HAL_IncTick+0x10>)
 8002b62:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <HAL_IncTick+0x14>)
 8002b64:	6811      	ldr	r1, [r2, #0]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	440b      	add	r3, r1
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	200001e8 	.word	0x200001e8
 8002b74:	2000009c 	.word	0x2000009c

08002b78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b78:	4b01      	ldr	r3, [pc, #4]	; (8002b80 <HAL_GetTick+0x8>)
 8002b7a:	6818      	ldr	r0, [r3, #0]
}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	200001e8 	.word	0x200001e8

08002b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b88:	f7ff fff6 	bl	8002b78 <HAL_GetTick>
 8002b8c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b8e:	1c63      	adds	r3, r4, #1
 8002b90:	d002      	beq.n	8002b98 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b92:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <HAL_Delay+0x20>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b98:	f7ff ffee 	bl	8002b78 <HAL_GetTick>
 8002b9c:	1b40      	subs	r0, r0, r5
 8002b9e:	4284      	cmp	r4, r0
 8002ba0:	d8fa      	bhi.n	8002b98 <HAL_Delay+0x14>
  {
  }
}
 8002ba2:	bd38      	pop	{r3, r4, r5, pc}
 8002ba4:	2000009c 	.word	0x2000009c

08002ba8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpCFGR = 0;
  __IO uint32_t wait_loop_index = 0;
 8002baa:	2300      	movs	r3, #0
{
 8002bac:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8002bae:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if(hadc == NULL)
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	f000 80e9 	beq.w	8002d88 <HAL_ADC_Init+0x1e0>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));


  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bb6:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002bb8:	4604      	mov	r4, r0
 8002bba:	2d00      	cmp	r5, #0
 8002bbc:	f000 80d9 	beq.w	8002d72 <HAL_ADC_Init+0x1ca>
  }


  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  /*  Exit deep power down mode if still in that state                        */
  if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 8002bc0:	6822      	ldr	r2, [r4, #0]
 8002bc2:	6893      	ldr	r3, [r2, #8]
 8002bc4:	0099      	lsls	r1, r3, #2
 8002bc6:	d503      	bpl.n	8002bd0 <HAL_ADC_Init+0x28>
  {
    /* Exit deep power down mode */
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8002bc8:	6893      	ldr	r3, [r2, #8]
 8002bca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002bce:	6093      	str	r3, [r2, #8]
       be relaunched or a previously saved calibration factor
       re-applied once the ADC voltage regulator is enabled   */
  }


  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002bd0:	6893      	ldr	r3, [r2, #8]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	d415      	bmi.n	8002c02 <HAL_ADC_Init+0x5a>
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
    /* Delay for ADC stabilization time                                       */
    /* Wait loop initialization and execution                                 */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8002bd6:	4b96      	ldr	r3, [pc, #600]	; (8002e30 <HAL_ADC_Init+0x288>)
 8002bd8:	4896      	ldr	r0, [pc, #600]	; (8002e34 <HAL_ADC_Init+0x28c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8002bdc:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8002bde:	fba0 0303 	umull	r0, r3, r0, r3
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8002be2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8002be6:	0cdb      	lsrs	r3, r3, #19
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8002be8:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8002bea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002bf2:	9b01      	ldr	r3, [sp, #4]
 8002bf4:	b12b      	cbz	r3, 8002c02 <HAL_ADC_Init+0x5a>
    {
      wait_loop_index--;
 8002bf6:	9b01      	ldr	r3, [sp, #4]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002bfc:	9b01      	ldr	r3, [sp, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f9      	bne.n	8002bf6 <HAL_ADC_Init+0x4e>


  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002c02:	6893      	ldr	r3, [r2, #8]
 8002c04:	00df      	lsls	r7, r3, #3
 8002c06:	f140 80a1 	bpl.w	8002d4c <HAL_ADC_Init+0x1a4>

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c0c:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c0e:	06de      	lsls	r6, r3, #27
 8002c10:	f100 80a8 	bmi.w	8002d64 <HAL_ADC_Init+0x1bc>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
 8002c14:	6893      	ldr	r3, [r2, #8]
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c16:	075d      	lsls	r5, r3, #29
 8002c18:	f100 80a4 	bmi.w	8002d64 <HAL_ADC_Init+0x1bc>
  {

    /* Initialize the ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002c1c:	6d61      	ldr	r1, [r4, #84]	; 0x54

    /* Configuration of common ADC parameters                                 */

    if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 8002c1e:	4b86      	ldr	r3, [pc, #536]	; (8002e38 <HAL_ADC_Init+0x290>)
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002c20:	f041 0102 	orr.w	r1, r1, #2
    if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 8002c24:	4d85      	ldr	r5, [pc, #532]	; (8002e3c <HAL_ADC_Init+0x294>)
      tmpADC_Common = ADC12_COMMON_REGISTER(hadc);
    }
    else
    {
      /* Pointer to the common control register                               */
      tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 8002c26:	4e86      	ldr	r6, [pc, #536]	; (8002e40 <HAL_ADC_Init+0x298>)
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002c28:	6561      	str	r1, [r4, #84]	; 0x54
      tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 8002c2a:	42aa      	cmp	r2, r5
 8002c2c:	bf18      	it	ne
 8002c2e:	429a      	cmpne	r2, r3
    }

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8002c30:	6891      	ldr	r1, [r2, #8]
      tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 8002c32:	f105 55c0 	add.w	r5, r5, #402653184	; 0x18000000
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8002c3c:	f001 0103 	and.w	r1, r1, #3
      tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 8002c40:	f505 4584 	add.w	r5, r5, #16896	; 0x4200
 8002c44:	bf08      	it	eq
 8002c46:	4635      	moveq	r5, r6
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8002c48:	2901      	cmp	r1, #1
 8002c4a:	f000 8098 	beq.w	8002d7e <HAL_ADC_Init+0x1d6>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8002c4e:	497a      	ldr	r1, [pc, #488]	; (8002e38 <HAL_ADC_Init+0x290>)
 8002c50:	428a      	cmp	r2, r1
 8002c52:	f000 80af 	beq.w	8002db4 <HAL_ADC_Init+0x20c>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 80ce 	bne.w	8002df8 <HAL_ADC_Init+0x250>
 8002c5c:	688b      	ldr	r3, [r1, #8]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	f000 80d4 	beq.w	8002e10 <HAL_ADC_Init+0x268>
 8002c68:	4974      	ldr	r1, [pc, #464]	; (8002e3c <HAL_ADC_Init+0x294>)
 8002c6a:	688b      	ldr	r3, [r1, #8]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f000 80ac 	beq.w	8002dce <HAL_ADC_Init+0x226>
      /*     HAL_ADCEx_MultiModeConfigChannel())                              */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */

      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_PRESC|ADC_CCR_CKMODE, hadc->Init.ClockPrescaler);
 8002c76:	68ab      	ldr	r3, [r5, #8]
 8002c78:	6861      	ldr	r1, [r4, #4]
 8002c7a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	60ab      	str	r3, [r5, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8002c86:	fa95 f5a5 	rbit	r5, r5
 8002c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8002c8e:	fab5 f585 	clz	r5, r5
                 hadc->Init.Overrun                                          |
                 hadc->Init.Resolution                                       |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8002c92:	7f27      	ldrb	r7, [r4, #28]
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	fab3 f383 	clz	r3, r3
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8002c9c:	f894 e015 	ldrb.w	lr, [r4, #21]
                 hadc->Init.Overrun                                          |
 8002ca0:	6b21      	ldr	r1, [r4, #48]	; 0x30

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca2:	2f01      	cmp	r7, #1
                 hadc->Init.Overrun                                          |
 8002ca4:	68a6      	ldr	r6, [r4, #8]
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8002ca6:	fa0e fe05 	lsl.w	lr, lr, r5
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8002caa:	fa07 f503 	lsl.w	r5, r7, r3
                 hadc->Init.Overrun                                          |
 8002cae:	ea41 0306 	orr.w	r3, r1, r6
 8002cb2:	ea43 030e 	orr.w	r3, r3, lr
    tmpCFGR  = ( ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)          |
 8002cb6:	ea43 0305 	orr.w	r3, r3, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cba:	d068      	beq.n	8002d8e <HAL_ADC_Init+0x1e6>
    /* start.                                                                 */
    /*  - external trigger to start conversion     Init.ExternalTrigConv      */
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /* Note:  parameter ExternalTrigConvEdge set to "trigger edge none" is    */
    /*        equivalent to software start.                                   */
    if ((hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002cbe:	2901      	cmp	r1, #1
 8002cc0:	d003      	beq.n	8002cca <HAL_ADC_Init+0x122>
        && (hadc->Init.ExternalTrigConvEdge != ADC_EXTERNALTRIGCONVEDGE_NONE))
 8002cc2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002cc4:	b10d      	cbz	r5, 8002cca <HAL_ADC_Init+0x122>
    {
      tmpCFGR |= ( hadc->Init.ExternalTrigConv |  hadc->Init.ExternalTrigConvEdge);
 8002cc6:	4329      	orrs	r1, r5
 8002cc8:	430b      	orrs	r3, r1
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cca:	68d5      	ldr	r5, [r2, #12]
 8002ccc:	495d      	ldr	r1, [pc, #372]	; (8002e44 <HAL_ADC_Init+0x29c>)
 8002cce:	4029      	ands	r1, r5
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	60d3      	str	r3, [r2, #12]
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    /*  - Boost Mode                      BoostMode                           */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002cd4:	6893      	ldr	r3, [r2, #8]
 8002cd6:	f013 0f0c 	tst.w	r3, #12
 8002cda:	d128      	bne.n	8002d2e <HAL_ADC_Init+0x186>
 8002cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ce0:	fa91 f1a1 	rbit	r1, r1
    {
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.ConversionDataManagement) );

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ce4:	4b58      	ldr	r3, [pc, #352]	; (8002e48 <HAL_ADC_Init+0x2a0>)
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002ce6:	fab1 f181 	clz	r1, r1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cea:	68d6      	ldr	r6, [r2, #12]
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002cec:	7d25      	ldrb	r5, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cee:	4033      	ands	r3, r6
 8002cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      tmpCFGR = ( ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002cf2:	fa05 f101 	lsl.w	r1, r5, r1


      if (hadc->Init.OversamplingMode == ENABLE)
 8002cf6:	f894 5039 	ldrb.w	r5, [r4, #57]	; 0x39
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cfa:	4333      	orrs	r3, r6
      if (hadc->Init.OversamplingMode == ENABLE)
 8002cfc:	2d01      	cmp	r5, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cfe:	ea43 0301 	orr.w	r3, r3, r1
 8002d02:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002d04:	d068      	beq.n	8002dd8 <HAL_ADC_Init+0x230>
                                         hadc->Init.Oversampling.OversamplingStopReset);
      }
      else
      {
        /* Disable Regular OverSampling */
        CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d06:	6913      	ldr	r3, [r2, #16]
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	6113      	str	r3, [r2, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002d0e:	6913      	ldr	r3, [r2, #16]
 8002d10:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002d12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000

      /* Configure the BOOST Mode */
      if(hadc->Init.BoostMode == ENABLE)
 8002d16:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002d1a:	432b      	orrs	r3, r5
      if(hadc->Init.BoostMode == ENABLE)
 8002d1c:	2901      	cmp	r1, #1
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002d1e:	6113      	str	r3, [r2, #16]
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 8002d20:	6893      	ldr	r3, [r2, #8]
 8002d22:	bf0c      	ite	eq
 8002d24:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST);
 8002d28:	f423 7380 	bicne.w	r3, r3, #256	; 0x100
 8002d2c:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d2e:	68e3      	ldr	r3, [r4, #12]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d037      	beq.n	8002da4 <HAL_ADC_Init+0x1fc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d34:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d36:	f023 030f 	bic.w	r3, r3, #15
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
    }


    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d3e:	f023 0303 	bic.w	r3, r3, #3
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6563      	str	r3, [r4, #84]	; 0x54


  /* Return function status */
  return tmp_hal_status;

}
 8002d48:	b003      	add	sp, #12
 8002d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002d4e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d50:	f043 0310 	orr.w	r3, r3, #16
 8002d54:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d58:	4303      	orrs	r3, r0
 8002d5a:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d5e:	06de      	lsls	r6, r3, #27
 8002d60:	f57f af58 	bpl.w	8002c14 <HAL_ADC_Init+0x6c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d64:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002d66:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d68:	f043 0310 	orr.w	r3, r3, #16
 8002d6c:	6563      	str	r3, [r4, #84]	; 0x54
}
 8002d6e:	b003      	add	sp, #12
 8002d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8002d72:	f7fe fc2f 	bl	80015d4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002d76:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002d78:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8002d7c:	e720      	b.n	8002bc0 <HAL_ADC_Init+0x18>
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8002d7e:	6811      	ldr	r1, [r2, #0]
 8002d80:	07c9      	lsls	r1, r1, #31
 8002d82:	f53f af7e 	bmi.w	8002c82 <HAL_ADC_Init+0xda>
 8002d86:	e762      	b.n	8002c4e <HAL_ADC_Init+0xa6>
    return HAL_ERROR;
 8002d88:	2001      	movs	r0, #1
}
 8002d8a:	b003      	add	sp, #12
 8002d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d8e:	f44f 2560 	mov.w	r5, #917504	; 0xe0000
 8002d92:	fa95 f5a5 	rbit	r5, r5
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d96:	6a21      	ldr	r1, [r4, #32]
 8002d98:	fab5 f585 	clz	r5, r5
 8002d9c:	3901      	subs	r1, #1
 8002d9e:	40a9      	lsls	r1, r5
 8002da0:	430b      	orrs	r3, r1
 8002da2:	e78b      	b.n	8002cbc <HAL_ADC_Init+0x114>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002da4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002da6:	69a3      	ldr	r3, [r4, #24]
 8002da8:	f021 010f 	bic.w	r1, r1, #15
 8002dac:	3b01      	subs	r3, #1
 8002dae:	430b      	orrs	r3, r1
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	e7c3      	b.n	8002d3c <HAL_ADC_Init+0x194>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8002db4:	4921      	ldr	r1, [pc, #132]	; (8002e3c <HAL_ADC_Init+0x294>)
 8002db6:	688b      	ldr	r3, [r1, #8]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d02c      	beq.n	8002e1a <HAL_ADC_Init+0x272>
 8002dc0:	4922      	ldr	r1, [pc, #136]	; (8002e4c <HAL_ADC_Init+0x2a4>)
 8002dc2:	688b      	ldr	r3, [r1, #8]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	f47f af54 	bne.w	8002c76 <HAL_ADC_Init+0xce>
 8002dce:	680b      	ldr	r3, [r1, #0]
 8002dd0:	07db      	lsls	r3, r3, #31
 8002dd2:	f53f af56 	bmi.w	8002c82 <HAL_ADC_Init+0xda>
 8002dd6:	e74e      	b.n	8002c76 <HAL_ADC_Init+0xce>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002dd8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ddc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002dde:	430b      	orrs	r3, r1
 8002de0:	6917      	ldr	r7, [r2, #16]
 8002de2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	4e19      	ldr	r6, [pc, #100]	; (8002e50 <HAL_ADC_Init+0x2a8>)
 8002dea:	432b      	orrs	r3, r5
 8002dec:	403e      	ands	r6, r7
 8002dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002df2:	4333      	orrs	r3, r6
 8002df4:	6113      	str	r3, [r2, #16]
 8002df6:	e78a      	b.n	8002d0e <HAL_ADC_Init+0x166>
        (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8002df8:	688b      	ldr	r3, [r1, #8]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d010      	beq.n	8002e24 <HAL_ADC_Init+0x27c>
 8002e02:	4912      	ldr	r1, [pc, #72]	; (8002e4c <HAL_ADC_Init+0x2a4>)
 8002e04:	688b      	ldr	r3, [r1, #8]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	f47f af2c 	bne.w	8002c68 <HAL_ADC_Init+0xc0>
 8002e10:	680b      	ldr	r3, [r1, #0]
 8002e12:	07d9      	lsls	r1, r3, #31
 8002e14:	f53f af35 	bmi.w	8002c82 <HAL_ADC_Init+0xda>
 8002e18:	e726      	b.n	8002c68 <HAL_ADC_Init+0xc0>
 8002e1a:	680b      	ldr	r3, [r1, #0]
 8002e1c:	07df      	lsls	r7, r3, #31
 8002e1e:	f53f af30 	bmi.w	8002c82 <HAL_ADC_Init+0xda>
 8002e22:	e7cd      	b.n	8002dc0 <HAL_ADC_Init+0x218>
 8002e24:	680b      	ldr	r3, [r1, #0]
 8002e26:	07de      	lsls	r6, r3, #31
 8002e28:	f53f af2b 	bmi.w	8002c82 <HAL_ADC_Init+0xda>
 8002e2c:	e7e9      	b.n	8002e02 <HAL_ADC_Init+0x25a>
 8002e2e:	bf00      	nop
 8002e30:	20000094 	.word	0x20000094
 8002e34:	431bde83 	.word	0x431bde83
 8002e38:	40022000 	.word	0x40022000
 8002e3c:	40022100 	.word	0x40022100
 8002e40:	40022300 	.word	0x40022300
 8002e44:	fff0c003 	.word	0xfff0c003
 8002e48:	ffffbffc 	.word	0xffffbffc
 8002e4c:	58026000 	.word	0x58026000
 8002e50:	fc00f81e 	.word	0xfc00f81e

08002e54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e54:	4602      	mov	r2, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8002e56:	2000      	movs	r0, #0
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e58:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
{
 8002e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8002e60:	2b01      	cmp	r3, #1
{
 8002e62:	b084      	sub	sp, #16
  __IO uint32_t wait_loop_index = 0;
 8002e64:	9003      	str	r0, [sp, #12]
  __HAL_LOCK(hadc);
 8002e66:	d06f      	beq.n	8002f48 <HAL_ADC_ConfigChannel+0xf4>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  /*  - Preselection of ADC inputs                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e68:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hadc);
 8002e6a:	2001      	movs	r0, #1
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e6c:	68cf      	ldr	r7, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e6e:	689c      	ldr	r4, [r3, #8]
  __HAL_LOCK(hadc);
 8002e70:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e74:	0765      	lsls	r5, r4, #29
 8002e76:	d509      	bpl.n	8002e8c <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002e7a:	f043 0320 	orr.w	r3, r3, #32
 8002e7e:	6553      	str	r3, [r2, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e80:	2300      	movs	r3, #0
 8002e82:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002e86:	b004      	add	sp, #16
 8002e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hadc->Instance->PCSEL |= (1U << sConfig->Channel);
 8002e8c:	680e      	ldr	r6, [r1, #0]
 8002e8e:	69dd      	ldr	r5, [r3, #28]
    if (sConfig->Rank < 5)
 8002e90:	684c      	ldr	r4, [r1, #4]
    hadc->Instance->PCSEL |= (1U << sConfig->Channel);
 8002e92:	40b0      	lsls	r0, r6
    if (sConfig->Rank < 5)
 8002e94:	2c04      	cmp	r4, #4
    hadc->Instance->PCSEL |= (1U << sConfig->Channel);
 8002e96:	ea45 0500 	orr.w	r5, r5, r0
 8002e9a:	61dd      	str	r5, [r3, #28]
    if (sConfig->Rank < 5)
 8002e9c:	d958      	bls.n	8002f50 <HAL_ADC_ConfigChannel+0xfc>
    else if (sConfig->Rank < 10)
 8002e9e:	2c09      	cmp	r4, #9
 8002ea0:	f200 80ba 	bhi.w	8003018 <HAL_ADC_ConfigChannel+0x1c4>
      MODIFY_REG(hadc->Instance->SQR2,
 8002ea4:	f8d3 e034 	ldr.w	lr, [r3, #52]	; 0x34
 8002ea8:	f44f 65f8 	mov.w	r5, #1984	; 0x7c0
 8002eac:	fa95 fca5 	rbit	ip, r5
 8002eb0:	fabc fc8c 	clz	ip, ip
 8002eb4:	3c05      	subs	r4, #5
 8002eb6:	fa95 f5a5 	rbit	r5, r5
 8002eba:	f04f 081f 	mov.w	r8, #31
 8002ebe:	fab5 f585 	clz	r5, r5
 8002ec2:	fb04 fc0c 	mul.w	ip, r4, ip
 8002ec6:	fb04 f405 	mul.w	r4, r4, r5
 8002eca:	fa08 f50c 	lsl.w	r5, r8, ip
 8002ece:	fa06 f404 	lsl.w	r4, r6, r4
 8002ed2:	ea2e 0505 	bic.w	r5, lr, r5
 8002ed6:	432c      	orrs	r4, r5
 8002ed8:	635c      	str	r4, [r3, #52]	; 0x34
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002eda:	689c      	ldr	r4, [r3, #8]
 8002edc:	f014 0f0c 	tst.w	r4, #12
 8002ee0:	d154      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x138>
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ee2:	2e09      	cmp	r6, #9
 8002ee4:	d97e      	bls.n	8002fe4 <HAL_ADC_ConfigChannel+0x190>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002ee6:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8002eea:	2538      	movs	r5, #56	; 0x38
 8002eec:	fa95 fca5 	rbit	ip, r5
 8002ef0:	fabc fc8c 	clz	ip, ip
 8002ef4:	f1a6 040a 	sub.w	r4, r6, #10
 8002ef8:	fa95 f5a5 	rbit	r5, r5
 8002efc:	f04f 0807 	mov.w	r8, #7
 8002f00:	fab5 f585 	clz	r5, r5
 8002f04:	fb04 fc0c 	mul.w	ip, r4, ip
 8002f08:	fb04 f405 	mul.w	r4, r4, r5
 8002f0c:	688d      	ldr	r5, [r1, #8]
 8002f0e:	fa08 fc0c 	lsl.w	ip, r8, ip
 8002f12:	40a5      	lsls	r5, r4
 8002f14:	ea2e 040c 	bic.w	r4, lr, ip
 8002f18:	432c      	orrs	r4, r5
 8002f1a:	619c      	str	r4, [r3, #24]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002f1c:	694d      	ldr	r5, [r1, #20]
 8002f1e:	68dc      	ldr	r4, [r3, #12]
 8002f20:	9501      	str	r5, [sp, #4]
 8002f22:	f3c4 0482 	ubfx	r4, r4, #2, #3
      switch (sConfig->OffsetNumber)
 8002f26:	690d      	ldr	r5, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002f28:	0064      	lsls	r4, r4, #1
      switch (sConfig->OffsetNumber)
 8002f2a:	f105 3eff 	add.w	lr, r5, #4294967295
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002f2e:	9d01      	ldr	r5, [sp, #4]
 8002f30:	40a5      	lsls	r5, r4
 8002f32:	462c      	mov	r4, r5
      switch (sConfig->OffsetNumber)
 8002f34:	f1be 0f03 	cmp.w	lr, #3
 8002f38:	f200 8184 	bhi.w	8003244 <HAL_ADC_ConfigChannel+0x3f0>
 8002f3c:	e8df f01e 	tbh	[pc, lr, lsl #1]
 8002f40:	00e60106 	.word	0x00e60106
 8002f44:	00a600c6 	.word	0x00a600c6
  __HAL_LOCK(hadc);
 8002f48:	2002      	movs	r0, #2
}
 8002f4a:	b004      	add	sp, #16
 8002f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 8002f50:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8002f54:	f44f 65f8 	mov.w	r5, #1984	; 0x7c0
 8002f58:	fa95 fca5 	rbit	ip, r5
 8002f5c:	fabc fc8c 	clz	ip, ip
 8002f60:	fa95 f5a5 	rbit	r5, r5
 8002f64:	f04f 081f 	mov.w	r8, #31
 8002f68:	fab5 f585 	clz	r5, r5
 8002f6c:	fb04 fc0c 	mul.w	ip, r4, ip
 8002f70:	fb04 f405 	mul.w	r4, r4, r5
 8002f74:	fa08 f50c 	lsl.w	r5, r8, ip
 8002f78:	fa06 f404 	lsl.w	r4, r6, r4
 8002f7c:	ea2e 0505 	bic.w	r5, lr, r5
 8002f80:	432c      	orrs	r4, r5
 8002f82:	631c      	str	r4, [r3, #48]	; 0x30
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f84:	689c      	ldr	r4, [r3, #8]
 8002f86:	f014 0f0c 	tst.w	r4, #12
 8002f8a:	d0aa      	beq.n	8002ee2 <HAL_ADC_ConfigChannel+0x8e>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002f8c:	689c      	ldr	r4, [r3, #8]
 8002f8e:	f004 0403 	and.w	r4, r4, #3
 8002f92:	2c01      	cmp	r4, #1
 8002f94:	d022      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0x188>
      if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f96:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002f9a:	f000 8128 	beq.w	80031ee <HAL_ADC_ConfigChannel+0x39a>
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f9e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002fa2:	ea21 0000 	bic.w	r0, r1, r0
 8002fa6:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
      if((hadc->Instance == ADC1) || (hadc->Instance == ADC2))
 8002faa:	49c3      	ldr	r1, [pc, #780]	; (80032b8 <HAL_ADC_ConfigChannel+0x464>)
 8002fac:	48c3      	ldr	r0, [pc, #780]	; (80032bc <HAL_ADC_ConfigChannel+0x468>)
        tmpADC_Common = ADC3_COMMON_REGISTER(hadc);
 8002fae:	4cc4      	ldr	r4, [pc, #784]	; (80032c0 <HAL_ADC_ConfigChannel+0x46c>)
 8002fb0:	4283      	cmp	r3, r0
 8002fb2:	bf18      	it	ne
 8002fb4:	428b      	cmpne	r3, r1
 8002fb6:	f100 50c0 	add.w	r0, r0, #402653184	; 0x18000000
 8002fba:	f500 4084 	add.w	r0, r0, #16896	; 0x4200
 8002fbe:	bf0e      	itee	eq
 8002fc0:	2101      	moveq	r1, #1
 8002fc2:	2100      	movne	r1, #0
 8002fc4:	4604      	movne	r4, r0
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fc6:	2e12      	cmp	r6, #18
 8002fc8:	f000 8134 	beq.w	8003234 <HAL_ADC_ConfigChannel+0x3e0>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002fcc:	2e11      	cmp	r6, #17
 8002fce:	f000 8135 	beq.w	800323c <HAL_ADC_ConfigChannel+0x3e8>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002fd2:	2e13      	cmp	r6, #19
 8002fd4:	f000 80da 	beq.w	800318c <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd8:	2000      	movs	r0, #0
 8002fda:	e751      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x2c>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002fdc:	681c      	ldr	r4, [r3, #0]
 8002fde:	07e4      	lsls	r4, r4, #31
 8002fe0:	d5d9      	bpl.n	8002f96 <HAL_ADC_ConfigChannel+0x142>
 8002fe2:	e7f9      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x184>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002fe4:	f8d3 e014 	ldr.w	lr, [r3, #20]
 8002fe8:	2438      	movs	r4, #56	; 0x38
 8002fea:	fa94 fca4 	rbit	ip, r4
 8002fee:	fabc fc8c 	clz	ip, ip
 8002ff2:	fa94 f4a4 	rbit	r4, r4
 8002ff6:	f04f 0807 	mov.w	r8, #7
 8002ffa:	fab4 f484 	clz	r4, r4
 8002ffe:	fb06 fc0c 	mul.w	ip, r6, ip
 8003002:	688d      	ldr	r5, [r1, #8]
 8003004:	fb06 f404 	mul.w	r4, r6, r4
 8003008:	fa08 fc0c 	lsl.w	ip, r8, ip
 800300c:	40a5      	lsls	r5, r4
 800300e:	ea2e 040c 	bic.w	r4, lr, ip
 8003012:	432c      	orrs	r4, r5
 8003014:	615c      	str	r4, [r3, #20]
 8003016:	e781      	b.n	8002f1c <HAL_ADC_ConfigChannel+0xc8>
    else if (sConfig->Rank < 15)
 8003018:	2c0e      	cmp	r4, #14
 800301a:	d81b      	bhi.n	8003054 <HAL_ADC_ConfigChannel+0x200>
      MODIFY_REG(hadc->Instance->SQR3,
 800301c:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
 8003020:	f44f 65f8 	mov.w	r5, #1984	; 0x7c0
 8003024:	fa95 fca5 	rbit	ip, r5
 8003028:	fabc fc8c 	clz	ip, ip
 800302c:	3c0a      	subs	r4, #10
 800302e:	fa95 f5a5 	rbit	r5, r5
 8003032:	f04f 081f 	mov.w	r8, #31
 8003036:	fab5 f585 	clz	r5, r5
 800303a:	fb04 fc0c 	mul.w	ip, r4, ip
 800303e:	fb04 f405 	mul.w	r4, r4, r5
 8003042:	fa08 f50c 	lsl.w	r5, r8, ip
 8003046:	fa06 f404 	lsl.w	r4, r6, r4
 800304a:	ea2e 0505 	bic.w	r5, lr, r5
 800304e:	432c      	orrs	r4, r5
 8003050:	639c      	str	r4, [r3, #56]	; 0x38
 8003052:	e742      	b.n	8002eda <HAL_ADC_ConfigChannel+0x86>
      MODIFY_REG(hadc->Instance->SQR4,
 8003054:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
 8003058:	f44f 65f8 	mov.w	r5, #1984	; 0x7c0
 800305c:	fa95 fca5 	rbit	ip, r5
 8003060:	fabc fc8c 	clz	ip, ip
 8003064:	3c0f      	subs	r4, #15
 8003066:	fa95 f5a5 	rbit	r5, r5
 800306a:	f04f 081f 	mov.w	r8, #31
 800306e:	fab5 f585 	clz	r5, r5
 8003072:	fb04 fc0c 	mul.w	ip, r4, ip
 8003076:	fb04 f405 	mul.w	r4, r4, r5
 800307a:	fa08 f50c 	lsl.w	r5, r8, ip
 800307e:	fa06 f404 	lsl.w	r4, r6, r4
 8003082:	ea2e 0505 	bic.w	r5, lr, r5
 8003086:	432c      	orrs	r4, r5
 8003088:	63dc      	str	r4, [r3, #60]	; 0x3c
 800308a:	e726      	b.n	8002eda <HAL_ADC_ConfigChannel+0x86>
          MODIFY_REG(hadc->Instance->OFR4,
 800308c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800308e:	f04f 4ef8 	mov.w	lr, #2080374784	; 0x7c000000
 8003092:	fa9e feae 	rbit	lr, lr
 8003096:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 800309a:	fabe fe8e 	clz	lr, lr
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT4, (sConfig->OffsetRightShift)<<3);
 800309e:	f891 c018 	ldrb.w	ip, [r1, #24]
          MODIFY_REG(hadc->Instance->OFR4,
 80030a2:	432c      	orrs	r4, r5
 80030a4:	fa06 fe0e 	lsl.w	lr, r6, lr
          if(sConfig->OffsetSignedSaturation != DISABLE)
 80030a8:	7e4d      	ldrb	r5, [r1, #25]
          MODIFY_REG(hadc->Instance->OFR4,
 80030aa:	ea44 040e 	orr.w	r4, r4, lr
 80030ae:	66dc      	str	r4, [r3, #108]	; 0x6c
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT4, (sConfig->OffsetRightShift)<<3);
 80030b0:	691c      	ldr	r4, [r3, #16]
 80030b2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80030b6:	ea44 04cc 	orr.w	r4, r4, ip, lsl #3
 80030ba:	611c      	str	r4, [r3, #16]
            SET_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80030bc:	6edc      	ldr	r4, [r3, #108]	; 0x6c
          if(sConfig->OffsetSignedSaturation != DISABLE)
 80030be:	2d00      	cmp	r5, #0
 80030c0:	f000 80f6 	beq.w	80032b0 <HAL_ADC_ConfigChannel+0x45c>
            SET_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80030c4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80030c8:	66dc      	str	r4, [r3, #108]	; 0x6c
 80030ca:	e75f      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x138>
          MODIFY_REG(hadc->Instance->OFR3,
 80030cc:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 80030ce:	f04f 4ef8 	mov.w	lr, #2080374784	; 0x7c000000
 80030d2:	fa9e feae 	rbit	lr, lr
 80030d6:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 80030da:	fabe fe8e 	clz	lr, lr
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT3, (sConfig->OffsetRightShift)<<2);
 80030de:	f891 c018 	ldrb.w	ip, [r1, #24]
          MODIFY_REG(hadc->Instance->OFR3,
 80030e2:	432c      	orrs	r4, r5
 80030e4:	fa06 fe0e 	lsl.w	lr, r6, lr
           if(sConfig->OffsetSignedSaturation != DISABLE)
 80030e8:	7e4d      	ldrb	r5, [r1, #25]
          MODIFY_REG(hadc->Instance->OFR3,
 80030ea:	ea44 040e 	orr.w	r4, r4, lr
 80030ee:	669c      	str	r4, [r3, #104]	; 0x68
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT3, (sConfig->OffsetRightShift)<<2);
 80030f0:	691c      	ldr	r4, [r3, #16]
 80030f2:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 80030f6:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 80030fa:	611c      	str	r4, [r3, #16]
              SET_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80030fc:	6e9c      	ldr	r4, [r3, #104]	; 0x68
           if(sConfig->OffsetSignedSaturation != DISABLE)
 80030fe:	2d00      	cmp	r5, #0
 8003100:	f000 810a 	beq.w	8003318 <HAL_ADC_ConfigChannel+0x4c4>
              SET_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003104:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8003108:	669c      	str	r4, [r3, #104]	; 0x68
 800310a:	e73f      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x138>
          MODIFY_REG(hadc->Instance->OFR2,
 800310c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800310e:	f04f 4ef8 	mov.w	lr, #2080374784	; 0x7c000000
 8003112:	fa9e feae 	rbit	lr, lr
 8003116:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 800311a:	fabe fe8e 	clz	lr, lr
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT2, (sConfig->OffsetRightShift)<<1);
 800311e:	f891 c018 	ldrb.w	ip, [r1, #24]
          MODIFY_REG(hadc->Instance->OFR2,
 8003122:	432c      	orrs	r4, r5
 8003124:	fa06 fe0e 	lsl.w	lr, r6, lr
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8003128:	7e4d      	ldrb	r5, [r1, #25]
          MODIFY_REG(hadc->Instance->OFR2,
 800312a:	ea44 040e 	orr.w	r4, r4, lr
 800312e:	665c      	str	r4, [r3, #100]	; 0x64
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT2, (sConfig->OffsetRightShift)<<1);
 8003130:	691c      	ldr	r4, [r3, #16]
 8003132:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003136:	ea44 044c 	orr.w	r4, r4, ip, lsl #1
 800313a:	611c      	str	r4, [r3, #16]
              SET_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800313c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
           if(sConfig->OffsetSignedSaturation != DISABLE)
 800313e:	2d00      	cmp	r5, #0
 8003140:	f000 80ee 	beq.w	8003320 <HAL_ADC_ConfigChannel+0x4cc>
              SET_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003144:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8003148:	665c      	str	r4, [r3, #100]	; 0x64
 800314a:	e71f      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x138>
           MODIFY_REG(hadc->Instance->OFR1,
 800314c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800314e:	f04f 4ef8 	mov.w	lr, #2080374784	; 0x7c000000
 8003152:	fa9e feae 	rbit	lr, lr
 8003156:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 800315a:	fabe fe8e 	clz	lr, lr
           MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT1, sConfig->OffsetRightShift);
 800315e:	f891 c018 	ldrb.w	ip, [r1, #24]
           MODIFY_REG(hadc->Instance->OFR1,
 8003162:	432c      	orrs	r4, r5
 8003164:	fa06 fe0e 	lsl.w	lr, r6, lr
           if(sConfig->OffsetSignedSaturation != DISABLE)
 8003168:	7e4d      	ldrb	r5, [r1, #25]
           MODIFY_REG(hadc->Instance->OFR1,
 800316a:	ea44 040e 	orr.w	r4, r4, lr
 800316e:	661c      	str	r4, [r3, #96]	; 0x60
           MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_RSHIFT1, sConfig->OffsetRightShift);
 8003170:	691c      	ldr	r4, [r3, #16]
 8003172:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8003176:	ea44 040c 	orr.w	r4, r4, ip
 800317a:	611c      	str	r4, [r3, #16]
              SET_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800317c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
           if(sConfig->OffsetSignedSaturation != DISABLE)
 800317e:	2d00      	cmp	r5, #0
 8003180:	f000 80c6 	beq.w	8003310 <HAL_ADC_ConfigChannel+0x4bc>
              SET_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003184:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8003188:	661c      	str	r4, [r3, #96]	; 0x60
 800318a:	e6ff      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x138>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800318c:	68a0      	ldr	r0, [r4, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800318e:	0245      	lsls	r5, r0, #9
 8003190:	f53f af22 	bmi.w	8002fd8 <HAL_ADC_ConfigChannel+0x184>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8003194:	6898      	ldr	r0, [r3, #8]
 8003196:	f000 0003 	and.w	r0, r0, #3
 800319a:	2801      	cmp	r0, #1
 800319c:	f000 80ae 	beq.w	80032fc <HAL_ADC_ConfigChannel+0x4a8>
 80031a0:	4845      	ldr	r0, [pc, #276]	; (80032b8 <HAL_ADC_ConfigChannel+0x464>)
 80031a2:	4283      	cmp	r3, r0
 80031a4:	f000 80df 	beq.w	8003366 <HAL_ADC_ConfigChannel+0x512>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 80031a8:	2900      	cmp	r1, #0
 80031aa:	f040 80cc 	bne.w	8003346 <HAL_ADC_ConfigChannel+0x4f2>
 80031ae:	6881      	ldr	r1, [r0, #8]
 80031b0:	f001 0103 	and.w	r1, r1, #3
 80031b4:	2901      	cmp	r1, #1
 80031b6:	f000 80d2 	beq.w	800335e <HAL_ADC_ConfigChannel+0x50a>
 80031ba:	4840      	ldr	r0, [pc, #256]	; (80032bc <HAL_ADC_ConfigChannel+0x468>)
 80031bc:	6881      	ldr	r1, [r0, #8]
 80031be:	f001 0103 	and.w	r1, r1, #3
 80031c2:	2901      	cmp	r1, #1
 80031c4:	f000 80dc 	beq.w	8003380 <HAL_ADC_ConfigChannel+0x52c>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 80031c8:	2e12      	cmp	r6, #18
 80031ca:	493e      	ldr	r1, [pc, #248]	; (80032c4 <HAL_ADC_ConfigChannel+0x470>)
 80031cc:	f000 80dc 	beq.w	8003388 <HAL_ADC_ConfigChannel+0x534>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT_DIV4) && ((hadc->Instance == ADC3)))
 80031d0:	2e11      	cmp	r6, #17
 80031d2:	f000 80f4 	beq.w	80033be <HAL_ADC_ConfigChannel+0x56a>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && (hadc->Instance == ADC3))
 80031d6:	428b      	cmp	r3, r1
 80031d8:	f47f aefe 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x184>
 80031dc:	2e13      	cmp	r6, #19
 80031de:	f47f aefb 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x184>
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80031e2:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e4:	2000      	movs	r0, #0
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80031e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031ea:	60a3      	str	r3, [r4, #8]
 80031ec:	e648      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x2c>
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80031ee:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
        if (sConfig->Channel >= ADC_CHANNEL_9)
 80031f2:	2e08      	cmp	r6, #8
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80031f4:	ea40 0004 	orr.w	r0, r0, r4
 80031f8:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
        if (sConfig->Channel >= ADC_CHANNEL_9)
 80031fc:	d964      	bls.n	80032c8 <HAL_ADC_ConfigChannel+0x474>
          MODIFY_REG(hadc->Instance->SMPR2,
 80031fe:	699d      	ldr	r5, [r3, #24]
 8003200:	2438      	movs	r4, #56	; 0x38
 8003202:	fa94 f7a4 	rbit	r7, r4
 8003206:	fab7 f787 	clz	r7, r7
 800320a:	f1a6 0009 	sub.w	r0, r6, #9
 800320e:	fa94 f4a4 	rbit	r4, r4
 8003212:	f04f 0e07 	mov.w	lr, #7
 8003216:	fb00 f707 	mul.w	r7, r0, r7
 800321a:	fab4 f484 	clz	r4, r4
 800321e:	6889      	ldr	r1, [r1, #8]
 8003220:	fa0e f707 	lsl.w	r7, lr, r7
 8003224:	fb00 f004 	mul.w	r0, r0, r4
 8003228:	4081      	lsls	r1, r0
 800322a:	ea25 0007 	bic.w	r0, r5, r7
 800322e:	4308      	orrs	r0, r1
 8003230:	6198      	str	r0, [r3, #24]
 8003232:	e6ba      	b.n	8002faa <HAL_ADC_ConfigChannel+0x156>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003234:	68a0      	ldr	r0, [r4, #8]
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003236:	0200      	lsls	r0, r0, #8
 8003238:	d5ac      	bpl.n	8003194 <HAL_ADC_ConfigChannel+0x340>
 800323a:	e6cd      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x184>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800323c:	68a0      	ldr	r0, [r4, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT_DIV4)       &&
 800323e:	01c7      	lsls	r7, r0, #7
 8003240:	d5a8      	bpl.n	8003194 <HAL_ADC_ConfigChannel+0x340>
 8003242:	e6c9      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x184>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003244:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8003246:	f04f 44f8 	mov.w	r4, #2080374784	; 0x7c000000
 800324a:	fa94 f4a4 	rbit	r4, r4
 800324e:	fab4 f484 	clz	r4, r4
 8003252:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003256:	fa06 f404 	lsl.w	r4, r6, r4
 800325a:	42a5      	cmp	r5, r4
 800325c:	d06e      	beq.n	800333c <HAL_ADC_ConfigChannel+0x4e8>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800325e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8003260:	f04f 44f8 	mov.w	r4, #2080374784	; 0x7c000000
 8003264:	fa94 f4a4 	rbit	r4, r4
 8003268:	fab4 f484 	clz	r4, r4
 800326c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003270:	fa06 f404 	lsl.w	r4, r6, r4
 8003274:	42a5      	cmp	r5, r4
 8003276:	d05c      	beq.n	8003332 <HAL_ADC_ConfigChannel+0x4de>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003278:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800327a:	f04f 44f8 	mov.w	r4, #2080374784	; 0x7c000000
 800327e:	fa94 f4a4 	rbit	r4, r4
 8003282:	fab4 f484 	clz	r4, r4
 8003286:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800328a:	fa06 f404 	lsl.w	r4, r6, r4
 800328e:	42a5      	cmp	r5, r4
 8003290:	d04a      	beq.n	8003328 <HAL_ADC_ConfigChannel+0x4d4>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003292:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8003294:	f04f 44f8 	mov.w	r4, #2080374784	; 0x7c000000
 8003298:	fa94 f4a4 	rbit	r4, r4
 800329c:	fab4 f484 	clz	r4, r4
 80032a0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80032a4:	fa06 f404 	lsl.w	r4, r6, r4
 80032a8:	42a5      	cmp	r5, r4
 80032aa:	f47f ae6f 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x138>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80032ae:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 80032b0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80032b4:	66dc      	str	r4, [r3, #108]	; 0x6c
 80032b6:	e669      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x138>
 80032b8:	40022000 	.word	0x40022000
 80032bc:	40022100 	.word	0x40022100
 80032c0:	40022300 	.word	0x40022300
 80032c4:	58026000 	.word	0x58026000
          MODIFY_REG(hadc->Instance->SMPR1,
 80032c8:	695d      	ldr	r5, [r3, #20]
 80032ca:	2438      	movs	r4, #56	; 0x38
 80032cc:	fa94 f7a4 	rbit	r7, r4
 80032d0:	fab7 f787 	clz	r7, r7
 80032d4:	1c70      	adds	r0, r6, #1
 80032d6:	fa94 f4a4 	rbit	r4, r4
 80032da:	f04f 0e07 	mov.w	lr, #7
 80032de:	fb00 f707 	mul.w	r7, r0, r7
 80032e2:	fab4 f484 	clz	r4, r4
 80032e6:	6889      	ldr	r1, [r1, #8]
 80032e8:	fa0e f707 	lsl.w	r7, lr, r7
 80032ec:	fb00 f004 	mul.w	r0, r0, r4
 80032f0:	4081      	lsls	r1, r0
 80032f2:	ea25 0007 	bic.w	r0, r5, r7
 80032f6:	4308      	orrs	r0, r1
 80032f8:	6158      	str	r0, [r3, #20]
 80032fa:	e656      	b.n	8002faa <HAL_ADC_ConfigChannel+0x156>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	07c0      	lsls	r0, r0, #31
 8003300:	f57f af4e 	bpl.w	80031a0 <HAL_ADC_ConfigChannel+0x34c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003304:	6d53      	ldr	r3, [r2, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8003306:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003308:	f043 0320 	orr.w	r3, r3, #32
 800330c:	6553      	str	r3, [r2, #84]	; 0x54
 800330e:	e5b7      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x2c>
             CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003310:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003314:	661c      	str	r4, [r3, #96]	; 0x60
 8003316:	e639      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x138>
             CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003318:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800331c:	669c      	str	r4, [r3, #104]	; 0x68
 800331e:	e635      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x138>
             CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003320:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003324:	665c      	str	r4, [r3, #100]	; 0x64
 8003326:	e631      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x138>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003328:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800332a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800332e:	669c      	str	r4, [r3, #104]	; 0x68
 8003330:	e7af      	b.n	8003292 <HAL_ADC_ConfigChannel+0x43e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003332:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003334:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003338:	665c      	str	r4, [r3, #100]	; 0x64
 800333a:	e79d      	b.n	8003278 <HAL_ADC_ConfigChannel+0x424>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800333c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800333e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003342:	661c      	str	r4, [r3, #96]	; 0x60
 8003344:	e78b      	b.n	800325e <HAL_ADC_ConfigChannel+0x40a>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8003346:	6881      	ldr	r1, [r0, #8]
 8003348:	f001 0103 	and.w	r1, r1, #3
 800334c:	2901      	cmp	r1, #1
 800334e:	d043      	beq.n	80033d8 <HAL_ADC_ConfigChannel+0x584>
 8003350:	4823      	ldr	r0, [pc, #140]	; (80033e0 <HAL_ADC_ConfigChannel+0x58c>)
 8003352:	6881      	ldr	r1, [r0, #8]
 8003354:	f001 0103 	and.w	r1, r1, #3
 8003358:	2901      	cmp	r1, #1
 800335a:	f47f af2e 	bne.w	80031ba <HAL_ADC_ConfigChannel+0x366>
 800335e:	6801      	ldr	r1, [r0, #0]
 8003360:	07c8      	lsls	r0, r1, #31
 8003362:	d4cf      	bmi.n	8003304 <HAL_ADC_ConfigChannel+0x4b0>
 8003364:	e729      	b.n	80031ba <HAL_ADC_ConfigChannel+0x366>
 8003366:	481f      	ldr	r0, [pc, #124]	; (80033e4 <HAL_ADC_ConfigChannel+0x590>)
 8003368:	6881      	ldr	r1, [r0, #8]
 800336a:	f001 0103 	and.w	r1, r1, #3
 800336e:	2901      	cmp	r1, #1
 8003370:	d02e      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x57c>
 8003372:	481b      	ldr	r0, [pc, #108]	; (80033e0 <HAL_ADC_ConfigChannel+0x58c>)
 8003374:	6881      	ldr	r1, [r0, #8]
 8003376:	f001 0103 	and.w	r1, r1, #3
 800337a:	2901      	cmp	r1, #1
 800337c:	f47f af24 	bne.w	80031c8 <HAL_ADC_ConfigChannel+0x374>
 8003380:	6801      	ldr	r1, [r0, #0]
 8003382:	07c9      	lsls	r1, r1, #31
 8003384:	d4be      	bmi.n	8003304 <HAL_ADC_ConfigChannel+0x4b0>
 8003386:	e71f      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x374>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((hadc->Instance == ADC3)))
 8003388:	428b      	cmp	r3, r1
 800338a:	f47f ae25 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x184>
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 800338e:	4916      	ldr	r1, [pc, #88]	; (80033e8 <HAL_ADC_ConfigChannel+0x594>)
 8003390:	2378      	movs	r3, #120	; 0x78
 8003392:	4d16      	ldr	r5, [pc, #88]	; (80033ec <HAL_ADC_ConfigChannel+0x598>)
 8003394:	6808      	ldr	r0, [r1, #0]
             SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003396:	68a1      	ldr	r1, [r4, #8]
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8003398:	fbb0 f0f5 	udiv	r0, r0, r5
             SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800339c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 80033a0:	fb03 f300 	mul.w	r3, r3, r0
             SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80033a4:	60a1      	str	r1, [r4, #8]
            wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 80033a6:	9303      	str	r3, [sp, #12]
            while(wait_loop_index != 0)
 80033a8:	9b03      	ldr	r3, [sp, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f43f ae14 	beq.w	8002fd8 <HAL_ADC_ConfigChannel+0x184>
              wait_loop_index--;
 80033b0:	9b03      	ldr	r3, [sp, #12]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	9303      	str	r3, [sp, #12]
            while(wait_loop_index != 0)
 80033b6:	9b03      	ldr	r3, [sp, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f9      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x55c>
 80033bc:	e60c      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x184>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT_DIV4) && ((hadc->Instance == ADC3)))
 80033be:	428b      	cmp	r3, r1
 80033c0:	f47f ae0a 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x184>
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80033c4:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c6:	2000      	movs	r0, #0
            SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80033c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033cc:	60a3      	str	r3, [r4, #8]
 80033ce:	e557      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x2c>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 80033d0:	6801      	ldr	r1, [r0, #0]
 80033d2:	07cf      	lsls	r7, r1, #31
 80033d4:	d496      	bmi.n	8003304 <HAL_ADC_ConfigChannel+0x4b0>
 80033d6:	e7cc      	b.n	8003372 <HAL_ADC_ConfigChannel+0x51e>
 80033d8:	6801      	ldr	r1, [r0, #0]
 80033da:	07cd      	lsls	r5, r1, #31
 80033dc:	d492      	bmi.n	8003304 <HAL_ADC_ConfigChannel+0x4b0>
 80033de:	e7b7      	b.n	8003350 <HAL_ADC_ConfigChannel+0x4fc>
 80033e0:	58026000 	.word	0x58026000
 80033e4:	40022100 	.word	0x40022100
 80033e8:	20000094 	.word	0x20000094
 80033ec:	001e8480 	.word	0x001e8480

080033f0 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f0:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80033f4:	2a01      	cmp	r2, #1
 80033f6:	d040      	beq.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2001      	movs	r0, #1
{
 80033fc:	b470      	push	{r4, r5, r6}

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4c33      	ldr	r4, [pc, #204]	; (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003402:	680d      	ldr	r5, [r1, #0]
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003404:	42a2      	cmp	r2, r4
  __HAL_LOCK(hadc);
 8003406:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800340a:	d008      	beq.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800340c:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800340e:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003410:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 8003414:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status ;
}
 800341a:	bc70      	pop	{r4, r5, r6}
 800341c:	4770      	bx	lr
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800341e:	6890      	ldr	r0, [r2, #8]
 8003420:	0740      	lsls	r0, r0, #29
 8003422:	d509      	bpl.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x48>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status  = HAL_ERROR;
 8003426:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003428:	f042 0220 	orr.w	r2, r2, #32
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003434:	bc70      	pop	{r4, r5, r6}
 8003436:	4770      	bx	lr
      && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave) == RESET) )
 8003438:	4826      	ldr	r0, [pc, #152]	; (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 800343a:	6880      	ldr	r0, [r0, #8]
 800343c:	0746      	lsls	r6, r0, #29
 800343e:	d4f1      	bmi.n	8003424 <HAL_ADCEx_MultiModeConfigChannel+0x34>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003440:	b1ed      	cbz	r5, 800347e <HAL_ADCEx_MultiModeConfigChannel+0x8e>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003442:	4c25      	ldr	r4, [pc, #148]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8003444:	684e      	ldr	r6, [r1, #4]
 8003446:	68a0      	ldr	r0, [r4, #8]
 8003448:	f420 4040 	bic.w	r0, r0, #49152	; 0xc000
 800344c:	4330      	orrs	r0, r6
 800344e:	60a0      	str	r0, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8003450:	6890      	ldr	r0, [r2, #8]
 8003452:	f000 0003 	and.w	r0, r0, #3
 8003456:	2801      	cmp	r0, #1
 8003458:	d02d      	beq.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 800345a:	481e      	ldr	r0, [pc, #120]	; (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 800345c:	6882      	ldr	r2, [r0, #8]
 800345e:	f002 0203 	and.w	r2, r2, #3
 8003462:	2a01      	cmp	r2, #1
 8003464:	d02f      	beq.n	80034c6 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
        MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY,
 8003466:	4c1c      	ldr	r4, [pc, #112]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 8003468:	2000      	movs	r0, #0
        MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY,
 800346a:	688e      	ldr	r6, [r1, #8]
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 800346e:	68a1      	ldr	r1, [r4, #8]
 8003470:	4335      	orrs	r5, r6
 8003472:	400a      	ands	r2, r1
 8003474:	4315      	orrs	r5, r2
 8003476:	60a5      	str	r5, [r4, #8]
 8003478:	e7d9      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 800347a:	2002      	movs	r0, #2
 800347c:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800347e:	4816      	ldr	r0, [pc, #88]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8003480:	6881      	ldr	r1, [r0, #8]
 8003482:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8003486:	6081      	str	r1, [r0, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8003488:	6891      	ldr	r1, [r2, #8]
 800348a:	f001 0103 	and.w	r1, r1, #3
 800348e:	2901      	cmp	r1, #1
 8003490:	d00c      	beq.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0xbc>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 8003492:	4910      	ldr	r1, [pc, #64]	; (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8003494:	688a      	ldr	r2, [r1, #8]
 8003496:	f002 0203 	and.w	r2, r2, #3
 800349a:	2a01      	cmp	r2, #1
 800349c:	d00f      	beq.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0xce>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800349e:	490e      	ldr	r1, [pc, #56]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 80034a0:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034a2:	4a0e      	ldr	r2, [pc, #56]	; (80034dc <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 80034a4:	688c      	ldr	r4, [r1, #8]
 80034a6:	4022      	ands	r2, r4
 80034a8:	608a      	str	r2, [r1, #8]
 80034aa:	e7c0      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	07d1      	lsls	r1, r2, #31
 80034b0:	d5ef      	bpl.n	8003492 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
  HAL_StatusTypeDef  tmp_hal_status  = HAL_OK;
 80034b2:	2000      	movs	r0, #0
 80034b4:	e7bb      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	07d4      	lsls	r4, r2, #31
 80034ba:	d5ce      	bpl.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x6a>
 80034bc:	e7f9      	b.n	80034b2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 80034be:	680a      	ldr	r2, [r1, #0]
 80034c0:	07d2      	lsls	r2, r2, #31
 80034c2:	d4f6      	bmi.n	80034b2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80034c4:	e7eb      	b.n	800349e <HAL_ADCEx_MultiModeConfigChannel+0xae>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 80034c6:	6802      	ldr	r2, [r0, #0]
 80034c8:	07d0      	lsls	r0, r2, #31
 80034ca:	d4f2      	bmi.n	80034b2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80034cc:	e7cb      	b.n	8003466 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 80034ce:	bf00      	nop
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40022100 	.word	0x40022100
 80034d8:	40022300 	.word	0x40022300
 80034dc:	fffff0e0 	.word	0xfffff0e0

080034e0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e0:	4907      	ldr	r1, [pc, #28]	; (8003500 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80034e2:	0200      	lsls	r0, r0, #8
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80034e8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ee:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80034f2:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80034f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034f8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034fa:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80034fc:	60c8      	str	r0, [r1, #12]
 80034fe:	4770      	bx	lr
 8003500:	e000ed00 	.word	0xe000ed00
 8003504:	05fa0000 	.word	0x05fa0000

08003508 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350a:	b470      	push	{r4, r5, r6}
 800350c:	68dc      	ldr	r4, [r3, #12]
 800350e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003512:	f1c4 0607 	rsb	r6, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003516:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003518:	2e04      	cmp	r6, #4
 800351a:	bf28      	it	cs
 800351c:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351e:	2b06      	cmp	r3, #6
 8003520:	d919      	bls.n	8003556 <HAL_NVIC_SetPriority+0x4e>
 8003522:	3c03      	subs	r4, #3
 8003524:	2501      	movs	r5, #1
 8003526:	40a5      	lsls	r5, r4
 8003528:	3d01      	subs	r5, #1
 800352a:	402a      	ands	r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	2301      	movs	r3, #1
  if ((int32_t)(IRQn) >= 0)
 800352e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003530:	fa03 f306 	lsl.w	r3, r3, r6
 8003534:	f103 33ff 	add.w	r3, r3, #4294967295
 8003538:	ea01 0103 	and.w	r1, r1, r3
 800353c:	fa01 f104 	lsl.w	r1, r1, r4
 8003540:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003544:	db0a      	blt.n	800355c <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003546:	0109      	lsls	r1, r1, #4
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_NVIC_SetPriority+0x6c>)
 800354a:	b2c9      	uxtb	r1, r1
 800354c:	4403      	add	r3, r0
 800354e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003552:	bc70      	pop	{r4, r5, r6}
 8003554:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003556:	2200      	movs	r2, #0
 8003558:	4614      	mov	r4, r2
 800355a:	e7e7      	b.n	800352c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355c:	f000 000f 	and.w	r0, r0, #15
 8003560:	0109      	lsls	r1, r1, #4
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_NVIC_SetPriority+0x70>)
 8003564:	b2c9      	uxtb	r1, r1
 8003566:	4403      	add	r3, r0
 8003568:	7619      	strb	r1, [r3, #24]
 800356a:	bc70      	pop	{r4, r5, r6}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000ed00 	.word	0xe000ed00
 8003574:	e000e100 	.word	0xe000e100
 8003578:	e000ecfc 	.word	0xe000ecfc

0800357c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800357c:	2800      	cmp	r0, #0
 800357e:	db07      	blt.n	8003590 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003580:	f000 011f 	and.w	r1, r0, #31
 8003584:	2301      	movs	r3, #1
 8003586:	0940      	lsrs	r0, r0, #5
 8003588:	4a02      	ldr	r2, [pc, #8]	; (8003594 <HAL_NVIC_EnableIRQ+0x18>)
 800358a:	408b      	lsls	r3, r1
 800358c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000e100 	.word	0xe000e100

08003598 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003598:	3801      	subs	r0, #1
 800359a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800359e:	d20d      	bcs.n	80035bc <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a0:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a4:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035a6:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a8:	25f0      	movs	r5, #240	; 0xf0
 80035aa:	4c06      	ldr	r4, [pc, #24]	; (80035c4 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ac:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ae:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80035b8:	bc30      	pop	{r4, r5}
 80035ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80035bc:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80035be:	4770      	bx	lr
 80035c0:	e000e010 	.word	0xe000e010
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80035c8:	4a04      	ldr	r2, [pc, #16]	; (80035dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80035ca:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80035cc:	6813      	ldr	r3, [r2, #0]
 80035ce:	bf0c      	ite	eq
 80035d0:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80035d4:	f023 0304 	bicne.w	r3, r3, #4
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4770      	bx	lr
 80035dc:	e000e010 	.word	0xe000e010

080035e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = 0U;
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;

  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 80035e0:	4a18      	ldr	r2, [pc, #96]	; (8003644 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>)
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 80035e2:	6803      	ldr	r3, [r0, #0]
  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 80035e4:	441a      	add	r2, r3
 80035e6:	2a8c      	cmp	r2, #140	; 0x8c
{
 80035e8:	b430      	push	{r4, r5}
  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 80035ea:	d918      	bls.n	800361e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
  }
  else
  {
    /*DMA1/DMA2 Streams are connected to DMAMUX1 channels*/
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4c16      	ldr	r4, [pc, #88]	; (8003648 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80035f0:	4916      	ldr	r1, [pc, #88]	; (800364c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035f2:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80035f4:	4419      	add	r1, r3
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035f6:	fba4 2302 	umull	r2, r3, r4, r2
     (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80035fa:	4a15      	ldr	r2, [pc, #84]	; (8003650 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80035fc:	29a8      	cmp	r1, #168	; 0xa8
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80035fe:	f04f 0101 	mov.w	r1, #1
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003602:	ea4f 1313 	mov.w	r3, r3, lsr #4
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003606:	4c13      	ldr	r4, [pc, #76]	; (8003654 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
      stream_number += 8U;
 8003608:	bf98      	it	ls
 800360a:	3308      	addls	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800360c:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800360e:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003614:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 8003616:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003618:	6602      	str	r2, [r0, #96]	; 0x60
  }
}
 800361a:	bc30      	pop	{r4, r5}
 800361c:	4770      	bx	lr
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800361e:	b2db      	uxtb	r3, r3
 8003620:	4d0d      	ldr	r5, [pc, #52]	; (8003658 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003622:	4a0e      	ldr	r2, [pc, #56]	; (800365c <DMA_CalcDMAMUXChannelBaseAndMask+0x7c>)
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 8003624:	2101      	movs	r1, #1
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003626:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003628:	4c0d      	ldr	r4, [pc, #52]	; (8003660 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800362a:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800362e:	6644      	str	r4, [r0, #100]	; 0x64
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003630:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003632:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003638:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 800363a:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800363c:	6602      	str	r2, [r0, #96]	; 0x60
}
 800363e:	bc30      	pop	{r4, r5}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	a7fdabf8 	.word	0xa7fdabf8
 8003648:	aaaaaaab 	.word	0xaaaaaaab
 800364c:	bffdfbf0 	.word	0xbffdfbf0
 8003650:	10008200 	.word	0x10008200
 8003654:	40020880 	.word	0x40020880
 8003658:	cccccccd 	.word	0xcccccccd
 800365c:	16009600 	.word	0x16009600
 8003660:	58025880 	.word	0x58025880

08003664 <HAL_DMA_Init>:
{
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003668:	f7ff fa86 	bl	8002b78 <HAL_GetTick>
  if(hdma == NULL)
 800366c:	2c00      	cmp	r4, #0
 800366e:	f000 80f2 	beq.w	8003856 <HAL_DMA_Init+0x1f2>
  if(IS_D2_DMA_INSTANCE(hdma) != RESET) /*DMA2/DMA1 stream , D2 domain*/
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	4a8b      	ldr	r2, [pc, #556]	; (80038a4 <HAL_DMA_Init+0x240>)
 8003676:	441a      	add	r2, r3
 8003678:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 800367c:	d858      	bhi.n	8003730 <HAL_DMA_Init+0xcc>
    hdma->State = HAL_DMA_STATE_BUSY;
 800367e:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8003680:	2100      	movs	r1, #0
 8003682:	4605      	mov	r5, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003684:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003688:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 800368a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e006      	b.n	80036a4 <HAL_DMA_Init+0x40>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003696:	f7ff fa6f 	bl	8002b78 <HAL_GetTick>
 800369a:	1b40      	subs	r0, r0, r5
 800369c:	2805      	cmp	r0, #5
 800369e:	f200 8097 	bhi.w	80037d0 <HAL_DMA_Init+0x16c>
 80036a2:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	07d1      	lsls	r1, r2, #31
 80036a8:	d4f5      	bmi.n	8003696 <HAL_DMA_Init+0x32>
    registerValue |=  hdma->Init.Direction           |
 80036aa:	68e1      	ldr	r1, [r4, #12]
 80036ac:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ae:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 80036b0:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b2:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b4:	69a6      	ldr	r6, [r4, #24]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b6:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b8:	69e5      	ldr	r5, [r4, #28]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036ba:	4f7b      	ldr	r7, [pc, #492]	; (80038a8 <HAL_DMA_Init+0x244>)
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036bc:	430a      	orrs	r2, r1
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80036be:	6819      	ldr	r1, [r3, #0]
            hdma->Init.Mode                | hdma->Init.Priority;
 80036c0:	6a20      	ldr	r0, [r4, #32]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c2:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036c4:	400f      	ands	r7, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c8:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ca:	2904      	cmp	r1, #4
            hdma->Init.Mode                | hdma->Init.Priority;
 80036cc:	ea42 0200 	orr.w	r2, r2, r0
    registerValue |=  hdma->Init.Direction           |
 80036d0:	ea42 0207 	orr.w	r2, r2, r7
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036d4:	f000 8085 	beq.w	80037e2 <HAL_DMA_Init+0x17e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80036d8:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80036da:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036dc:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 80036e0:	4311      	orrs	r1, r2
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	4d71      	ldr	r5, [pc, #452]	; (80038ac <HAL_DMA_Init+0x248>)
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036e6:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e8:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ea:	4871      	ldr	r0, [pc, #452]	; (80038b0 <HAL_DMA_Init+0x24c>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036ec:	fba5 1202 	umull	r1, r2, r5, r2
 80036f0:	0912      	lsrs	r2, r2, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036f2:	5c81      	ldrb	r1, [r0, r2]
  if (stream_number > 3U)
 80036f4:	2a03      	cmp	r2, #3
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036f6:	4a6f      	ldr	r2, [pc, #444]	; (80038b4 <HAL_DMA_Init+0x250>)
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036f8:	4620      	mov	r0, r4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036fa:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036fc:	ea02 0203 	and.w	r2, r2, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003700:	f04f 033f 	mov.w	r3, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003704:	bf88      	it	hi
 8003706:	3204      	addhi	r2, #4
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003708:	408b      	lsls	r3, r1
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800370a:	65a2      	str	r2, [r4, #88]	; 0x58
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800370c:	6093      	str	r3, [r2, #8]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800370e:	f7ff ff67 	bl	80035e0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003712:	68a3      	ldr	r3, [r4, #8]
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	d142      	bne.n	800379e <HAL_DMA_Init+0x13a>
     hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003718:	2300      	movs	r3, #0
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800371a:	6e20      	ldr	r0, [r4, #96]	; 0x60
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800371c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800371e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
     hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003720:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003722:	6003      	str	r3, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003724:	6051      	str	r1, [r2, #4]
    hdma->DMAmuxRequestGen = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	66e3      	str	r3, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800372a:	6723      	str	r3, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800372c:	6763      	str	r3, [r4, #116]	; 0x74
 800372e:	e049      	b.n	80037c4 <HAL_DMA_Init+0x160>
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET) /*<BDMA channel , D3 domain*/
 8003730:	4961      	ldr	r1, [pc, #388]	; (80038b8 <HAL_DMA_Init+0x254>)
 8003732:	4419      	add	r1, r3
 8003734:	298c      	cmp	r1, #140	; 0x8c
 8003736:	d876      	bhi.n	8003826 <HAL_DMA_Init+0x1c2>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003738:	2002      	movs	r0, #2
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800373a:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE  | BDMA_CCR_PSIZE  | \
 800373c:	4f5f      	ldr	r7, [pc, #380]	; (80038bc <HAL_DMA_Init+0x258>)
    __HAL_UNLOCK(hdma);
 800373e:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003740:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8003744:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003746:	6818      	ldr	r0, [r3, #0]
    __HAL_UNLOCK(hdma);
 8003748:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE  | BDMA_CCR_PSIZE  | \
 800374c:	ea07 0700 	and.w	r7, r7, r0
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8003750:	d045      	beq.n	80037de <HAL_DMA_Init+0x17a>
 8003752:	2a80      	cmp	r2, #128	; 0x80
 8003754:	bf08      	it	eq
 8003756:	f44f 4580 	moveq.w	r5, #16384	; 0x4000
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 800375a:	6922      	ldr	r2, [r4, #16]
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800375c:	68e0      	ldr	r0, [r4, #12]
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 800375e:	08d2      	lsrs	r2, r2, #3
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003760:	6966      	ldr	r6, [r4, #20]
 8003762:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003766:	69a0      	ldr	r0, [r4, #24]
 8003768:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      D2_TO_D3_DMA_PRIORITY(hdma->Init.Priority);
 800376c:	6a26      	ldr	r6, [r4, #32]
 800376e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 8003772:	69e0      	ldr	r0, [r4, #28]
 8003774:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003778:	4e51      	ldr	r6, [pc, #324]	; (80038c0 <HAL_DMA_Init+0x25c>)
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 800377a:	08c0      	lsrs	r0, r0, #3
 800377c:	433a      	orrs	r2, r7
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800377e:	fba6 6101 	umull	r6, r1, r6, r1
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 8003782:	f000 0020 	and.w	r0, r0, #32
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003786:	0909      	lsrs	r1, r1, #4
 8003788:	4302      	orrs	r2, r0
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800378a:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800378c:	0089      	lsls	r1, r1, #2
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800378e:	432a      	orrs	r2, r5
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003790:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003792:	65e1      	str	r1, [r4, #92]	; 0x5c
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003794:	f7ff ff24 	bl	80035e0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003798:	68a3      	ldr	r3, [r4, #8]
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d0bc      	beq.n	8003718 <HAL_DMA_Init+0xb4>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800379e:	6863      	ldr	r3, [r4, #4]
 80037a0:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80037a2:	b2da      	uxtb	r2, r3
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037a4:	3b01      	subs	r3, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037a6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80037a8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037aa:	2b07      	cmp	r3, #7
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037ac:	602a      	str	r2, [r5, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ae:	6048      	str	r0, [r1, #4]
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037b0:	d8b9      	bhi.n	8003726 <HAL_DMA_Init+0xc2>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80037b2:	1e50      	subs	r0, r2, #1
 80037b4:	2807      	cmp	r0, #7
 80037b6:	d93d      	bls.n	8003834 <HAL_DMA_Init+0x1d0>
 80037b8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80037ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80037bc:	6f22      	ldr	r2, [r4, #112]	; 0x70
     hdma->DMAmuxRequestGen->RGCR = 0U;
 80037be:	2100      	movs	r1, #0
 80037c0:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037c2:	6050      	str	r0, [r2, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80037c6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80037ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80037ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037d0:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80037d2:	2303      	movs	r3, #3
        return HAL_ERROR;
 80037d4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037d6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80037d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 80037dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 80037de:	2510      	movs	r5, #16
 80037e0:	e7bb      	b.n	800375a <HAL_DMA_Init+0xf6>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80037e4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80037e6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037e8:	ea45 0001 	orr.w	r0, r5, r1
      registerValue |= hdma->Init.FIFOThreshold;
 80037ec:	f047 0104 	orr.w	r1, r7, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037f0:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037f2:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037f4:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037f6:	f022 0207 	bic.w	r2, r2, #7
      registerValue |= hdma->Init.FIFOThreshold;
 80037fa:	4311      	orrs	r1, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037fc:	2d00      	cmp	r5, #0
 80037fe:	f43f af70 	beq.w	80036e2 <HAL_DMA_Init+0x7e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003802:	2e00      	cmp	r6, #0
 8003804:	d131      	bne.n	800386a <HAL_DMA_Init+0x206>
    switch (hdma->Init.FIFOThreshold)
 8003806:	2f01      	cmp	r7, #1
 8003808:	d038      	beq.n	800387c <HAL_DMA_Init+0x218>
 800380a:	d302      	bcc.n	8003812 <HAL_DMA_Init+0x1ae>
 800380c:	2f02      	cmp	r7, #2
 800380e:	f47f af68 	bne.w	80036e2 <HAL_DMA_Init+0x7e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003812:	01ea      	lsls	r2, r5, #7
 8003814:	f57f af65 	bpl.w	80036e2 <HAL_DMA_Init+0x7e>
          hdma->State = HAL_DMA_STATE_READY;
 8003818:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800381a:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800381c:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800381e:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8003820:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003826:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003828:	2303      	movs	r3, #3
    return HAL_ERROR;
 800382a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800382c:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800382e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8003832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 8003834:	6821      	ldr	r1, [r4, #0]
 8003836:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <HAL_DMA_Init+0x254>)
 8003838:	440b      	add	r3, r1
 800383a:	2b8c      	cmp	r3, #140	; 0x8c
 800383c:	d80d      	bhi.n	800385a <HAL_DMA_Init+0x1f6>
      (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
    {
      /*BDMA Channels are connected to DMAMUX2 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <HAL_DMA_Init+0x260>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003840:	4921      	ldr	r1, [pc, #132]	; (80038c8 <HAL_DMA_Init+0x264>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003842:	4413      	add	r3, r2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003844:	460a      	mov	r2, r1
 8003846:	6721      	str	r1, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1U << (request - 1U);
 800384c:	2101      	movs	r1, #1
 800384e:	4081      	lsls	r1, r0
 8003850:	4608      	mov	r0, r1
 8003852:	6761      	str	r1, [r4, #116]	; 0x74
 8003854:	e7b3      	b.n	80037be <HAL_DMA_Init+0x15a>
    return HAL_ERROR;
 8003856:	2001      	movs	r0, #1
 8003858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800385a:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <HAL_DMA_Init+0x268>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800385c:	491c      	ldr	r1, [pc, #112]	; (80038d0 <HAL_DMA_Init+0x26c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800385e:	4413      	add	r3, r2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003860:	6721      	str	r1, [r4, #112]	; 0x70
 8003862:	460a      	mov	r2, r1
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003868:	e7f0      	b.n	800384c <HAL_DMA_Init+0x1e8>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800386a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800386e:	d00a      	beq.n	8003886 <HAL_DMA_Init+0x222>
    switch (hdma->Init.FIFOThreshold)
 8003870:	2f02      	cmp	r7, #2
 8003872:	d9d1      	bls.n	8003818 <HAL_DMA_Init+0x1b4>
 8003874:	2f03      	cmp	r7, #3
 8003876:	f47f af34 	bne.w	80036e2 <HAL_DMA_Init+0x7e>
 800387a:	e7ca      	b.n	8003812 <HAL_DMA_Init+0x1ae>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800387c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003880:	f47f af2f 	bne.w	80036e2 <HAL_DMA_Init+0x7e>
 8003884:	e7c8      	b.n	8003818 <HAL_DMA_Init+0x1b4>
    switch (hdma->Init.FIFOThreshold)
 8003886:	2f03      	cmp	r7, #3
 8003888:	f63f af2b 	bhi.w	80036e2 <HAL_DMA_Init+0x7e>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <HAL_DMA_Init+0x230>)
 800388e:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8003892:	bf00      	nop
 8003894:	08003819 	.word	0x08003819
 8003898:	08003813 	.word	0x08003813
 800389c:	08003819 	.word	0x08003819
 80038a0:	0800387d 	.word	0x0800387d
 80038a4:	bffdfff0 	.word	0xbffdfff0
 80038a8:	fe10803f 	.word	0xfe10803f
 80038ac:	aaaaaaab 	.word	0xaaaaaaab
 80038b0:	080082bc 	.word	0x080082bc
 80038b4:	fffffc00 	.word	0xfffffc00
 80038b8:	a7fdabf8 	.word	0xa7fdabf8
 80038bc:	ffff800f 	.word	0xffff800f
 80038c0:	cccccccd 	.word	0xcccccccd
 80038c4:	1600963f 	.word	0x1600963f
 80038c8:	58025940 	.word	0x58025940
 80038cc:	1000823f 	.word	0x1000823f
 80038d0:	40020940 	.word	0x40020940

080038d4 <HAL_DMA_Abort_IT>:
{
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hdma == NULL)
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d041      	beq.n	800395e <HAL_DMA_Abort_IT+0x8a>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038da:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d004      	beq.n	80038ec <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e2:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80038e4:	2401      	movs	r4, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e6:	6542      	str	r2, [r0, #84]	; 0x54
}
 80038e8:	4620      	mov	r0, r4
 80038ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 80038ec:	6802      	ldr	r2, [r0, #0]
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <HAL_DMA_Abort_IT+0x94>)
 80038f0:	4413      	add	r3, r2
 80038f2:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
 80038f6:	d928      	bls.n	800394a <HAL_DMA_Abort_IT+0x76>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038f8:	6811      	ldr	r1, [r2, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 80038fa:	2301      	movs	r3, #1
 80038fc:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038fe:	f021 010e 	bic.w	r1, r1, #14
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003902:	6e05      	ldr	r5, [r0, #96]	; 0x60
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003904:	6e46      	ldr	r6, [r0, #100]	; 0x64
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8003906:	40a3      	lsls	r3, r4
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003908:	6011      	str	r1, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 800390a:	6811      	ldr	r1, [r2, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800390c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
      __HAL_DMA_DISABLE(hdma);
 800390e:	f021 0101 	bic.w	r1, r1, #1
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8003912:	4f16      	ldr	r7, [pc, #88]	; (800396c <HAL_DMA_Abort_IT+0x98>)
      __HAL_DMA_DISABLE(hdma);
 8003914:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003916:	682a      	ldr	r2, [r5, #0]
 8003918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800391c:	602a      	str	r2, [r5, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 800391e:	607b      	str	r3, [r7, #4]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003920:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003922:	6073      	str	r3, [r6, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8003924:	b134      	cbz	r4, 8003934 <HAL_DMA_Abort_IT+0x60>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003926:	6823      	ldr	r3, [r4, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003928:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800392a:	6f41      	ldr	r1, [r0, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800392c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003930:	6023      	str	r3, [r4, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003932:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003934:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003936:	2201      	movs	r2, #1
      if(hdma->XferAbortCallback != NULL)
 8003938:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800393a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800393e:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8003942:	b17b      	cbz	r3, 8003964 <HAL_DMA_Abort_IT+0x90>
        hdma->XferAbortCallback(hdma);
 8003944:	4798      	blx	r3
}
 8003946:	4620      	mov	r0, r4
 8003948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 800394a:	2104      	movs	r1, #4
  return HAL_OK;
 800394c:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800394e:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
}
 8003952:	4620      	mov	r0, r4
      __HAL_DMA_DISABLE(hdma);
 8003954:	6811      	ldr	r1, [r2, #0]
 8003956:	f021 0101 	bic.w	r1, r1, #1
 800395a:	6011      	str	r1, [r2, #0]
}
 800395c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800395e:	2401      	movs	r4, #1
}
 8003960:	4620      	mov	r0, r4
 8003962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003964:	461c      	mov	r4, r3
 8003966:	e7bf      	b.n	80038e8 <HAL_DMA_Abort_IT+0x14>
 8003968:	bffdfff0 	.word	0xbffdfff0
 800396c:	58025400 	.word	0x58025400

08003970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 8003974:	f8df c23c 	ldr.w	ip, [pc, #572]	; 8003bb4 <HAL_GPIO_Init+0x244>
{
 8003978:	b083      	sub	sp, #12
  for(position = 0; position < GPIO_NUMBER; position++)
 800397a:	2500      	movs	r5, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397c:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8003bb8 <HAL_GPIO_Init+0x248>
 8003980:	f8d1 e000 	ldr.w	lr, [r1]
 8003984:	e003      	b.n	800398e <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8003986:	3501      	adds	r5, #1
 8003988:	2d10      	cmp	r5, #16
 800398a:	f000 80c2 	beq.w	8003b12 <HAL_GPIO_Init+0x1a2>
    ioposition = ((uint32_t)0x01) << position;
 800398e:	2301      	movs	r3, #1
 8003990:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003992:	ea03 020e 	and.w	r2, r3, lr
    if(iocurrent == ioposition)
 8003996:	4293      	cmp	r3, r2
 8003998:	d1f5      	bne.n	8003986 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800399a:	684e      	ldr	r6, [r1, #4]
 800399c:	f026 0910 	bic.w	r9, r6, #16
 80039a0:	f1b9 0f02 	cmp.w	r9, #2
 80039a4:	f040 80b8 	bne.w	8003b18 <HAL_GPIO_Init+0x1a8>
        temp = GPIOx->AFR[position >> 3];
 80039a8:	ea4f 09d5 	mov.w	r9, r5, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039ac:	f005 0a07 	and.w	sl, r5, #7
 80039b0:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039b4:	690c      	ldr	r4, [r1, #16]
 80039b6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039ba:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80039be:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039c2:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039c6:	fa04 f40a 	lsl.w	r4, r4, sl
 80039ca:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039ce:	ea27 070b 	bic.w	r7, r7, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039d2:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039d6:	433c      	orrs	r4, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039d8:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80039dc:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3] = temp;
 80039e0:	f8c9 4020 	str.w	r4, [r9, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039e4:	ea6f 040b 	mvn.w	r4, fp
      temp = GPIOx->MODER;
 80039e8:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80039ec:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039f0:	ea09 0904 	and.w	r9, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80039f4:	ea47 0709 	orr.w	r7, r7, r9
      GPIOx->MODER = temp;
 80039f8:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80039fa:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80039fc:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a00:	ea07 0b04 	and.w	fp, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a04:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003a06:	fa09 f905 	lsl.w	r9, r9, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a0a:	fa07 f70a 	lsl.w	r7, r7, sl
 8003a0e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8003a12:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003a14:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a16:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003a1a:	ea49 0303 	orr.w	r3, r9, r3
        GPIOx->OTYPER = temp;
 8003a1e:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8003a20:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a22:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a24:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a26:	fa03 f30a 	lsl.w	r3, r3, sl
 8003a2a:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8003a2c:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a2e:	00f3      	lsls	r3, r6, #3
 8003a30:	d5a9      	bpl.n	8003986 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8003a36:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a3a:	f005 0303 	and.w	r3, r5, #3
 8003a3e:	f04f 090f 	mov.w	r9, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a42:	f044 0402 	orr.w	r4, r4, #2
 8003a46:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a4a:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4c:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8003a50:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003a54:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a58:	fa09 f903 	lsl.w	r9, r9, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5c:	f004 0402 	and.w	r4, r4, #2
 8003a60:	9401      	str	r4, [sp, #4]
 8003a62:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003a64:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a66:	ea24 0a09 	bic.w	sl, r4, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a6a:	4c4d      	ldr	r4, [pc, #308]	; (8003ba0 <HAL_GPIO_Init+0x230>)
 8003a6c:	42a0      	cmp	r0, r4
 8003a6e:	d06c      	beq.n	8003b4a <HAL_GPIO_Init+0x1da>
 8003a70:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a74:	42a0      	cmp	r0, r4
 8003a76:	d06a      	beq.n	8003b4e <HAL_GPIO_Init+0x1de>
 8003a78:	4c4a      	ldr	r4, [pc, #296]	; (8003ba4 <HAL_GPIO_Init+0x234>)
 8003a7a:	42a0      	cmp	r0, r4
 8003a7c:	d06c      	beq.n	8003b58 <HAL_GPIO_Init+0x1e8>
 8003a7e:	4c4a      	ldr	r4, [pc, #296]	; (8003ba8 <HAL_GPIO_Init+0x238>)
 8003a80:	42a0      	cmp	r0, r4
 8003a82:	d06e      	beq.n	8003b62 <HAL_GPIO_Init+0x1f2>
 8003a84:	4c49      	ldr	r4, [pc, #292]	; (8003bac <HAL_GPIO_Init+0x23c>)
 8003a86:	42a0      	cmp	r0, r4
 8003a88:	d070      	beq.n	8003b6c <HAL_GPIO_Init+0x1fc>
 8003a8a:	4c49      	ldr	r4, [pc, #292]	; (8003bb0 <HAL_GPIO_Init+0x240>)
 8003a8c:	42a0      	cmp	r0, r4
 8003a8e:	d072      	beq.n	8003b76 <HAL_GPIO_Init+0x206>
 8003a90:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8003bbc <HAL_GPIO_Init+0x24c>
 8003a94:	4548      	cmp	r0, r9
 8003a96:	d073      	beq.n	8003b80 <HAL_GPIO_Init+0x210>
 8003a98:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8003bc0 <HAL_GPIO_Init+0x250>
 8003a9c:	4548      	cmp	r0, r9
 8003a9e:	d074      	beq.n	8003b8a <HAL_GPIO_Init+0x21a>
 8003aa0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8003bc4 <HAL_GPIO_Init+0x254>
 8003aa4:	4548      	cmp	r0, r9
 8003aa6:	d075      	beq.n	8003b94 <HAL_GPIO_Init+0x224>
 8003aa8:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8003bc8 <HAL_GPIO_Init+0x258>
 8003aac:	4548      	cmp	r0, r9
 8003aae:	bf0c      	ite	eq
 8003ab0:	f04f 0909 	moveq.w	r9, #9
 8003ab4:	f04f 090a 	movne.w	r9, #10
 8003ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8003abc:	ea43 030a 	orr.w	r3, r3, sl
        temp &= ~((uint32_t)iocurrent);
 8003ac0:	43d4      	mvns	r4, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ac2:	3501      	adds	r5, #1
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ac4:	60bb      	str	r3, [r7, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ac6:	03f7      	lsls	r7, r6, #15
        temp = EXTI_Ptr->IMR1;
 8003ac8:	f8dc 3000 	ldr.w	r3, [ip]
        {
          temp |= iocurrent;
 8003acc:	bf4c      	ite	mi
 8003ace:	4313      	orrmi	r3, r2
        temp &= ~((uint32_t)iocurrent);
 8003ad0:	4023      	andpl	r3, r4
        }
        EXTI_Ptr->IMR1 = temp;

        temp = EXTI_Ptr->EMR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ad2:	03b7      	lsls	r7, r6, #14
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ad4:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_Ptr->IMR1 = temp;
 8003ad8:	f8cc 3000 	str.w	r3, [ip]
        temp = EXTI_Ptr->EMR1;
 8003adc:	f8dc 3004 	ldr.w	r3, [ip, #4]
          temp |= iocurrent;
 8003ae0:	bf4c      	ite	mi
 8003ae2:	4313      	orrmi	r3, r2
        temp &= ~((uint32_t)iocurrent);
 8003ae4:	4023      	andpl	r3, r4
        EXTI_Ptr->EMR1 = temp;
 8003ae6:	f8cc 3004 	str.w	r3, [ip, #4]
        temp = EXTI->RTSR1;
 8003aea:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aec:	02f7      	lsls	r7, r6, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003aee:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 8003af2:	bf4c      	ite	mi
 8003af4:	4313      	orrmi	r3, r2
        temp &= ~((uint32_t)iocurrent);
 8003af6:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003af8:	02b6      	lsls	r6, r6, #10
        EXTI->RTSR1 = temp;
 8003afa:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 8003afc:	687b      	ldr	r3, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 8003afe:	bf54      	ite	pl
 8003b00:	ea04 0203 	andpl.w	r2, r4, r3
        {
          temp |= iocurrent;
 8003b04:	431a      	orrmi	r2, r3
        }
        EXTI->FTSR1 = temp;
 8003b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b0a:	2d10      	cmp	r5, #16
        EXTI->FTSR1 = temp;
 8003b0c:	605a      	str	r2, [r3, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b0e:	f47f af3e 	bne.w	800398e <HAL_GPIO_Init+0x1e>
      }      
    }
  }
}
 8003b12:	b003      	add	sp, #12
 8003b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b18:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b1c:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8003b1e:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b22:	f109 39ff 	add.w	r9, r9, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b26:	ea06 0704 	and.w	r7, r6, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b2a:	fa04 f40a 	lsl.w	r4, r4, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b2e:	f1b9 0f01 	cmp.w	r9, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b32:	ea6f 0404 	mvn.w	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b36:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b3a:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b3e:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;
 8003b42:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b44:	f63f af6c 	bhi.w	8003a20 <HAL_GPIO_Init+0xb0>
 8003b48:	e757      	b.n	80039fa <HAL_GPIO_Init+0x8a>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e7b6      	b.n	8003abc <HAL_GPIO_Init+0x14c>
 8003b4e:	f04f 0901 	mov.w	r9, #1
 8003b52:	fa09 f303 	lsl.w	r3, r9, r3
 8003b56:	e7b1      	b.n	8003abc <HAL_GPIO_Init+0x14c>
 8003b58:	f04f 0902 	mov.w	r9, #2
 8003b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8003b60:	e7ac      	b.n	8003abc <HAL_GPIO_Init+0x14c>
 8003b62:	f04f 0903 	mov.w	r9, #3
 8003b66:	fa09 f303 	lsl.w	r3, r9, r3
 8003b6a:	e7a7      	b.n	8003abc <HAL_GPIO_Init+0x14c>
 8003b6c:	f04f 0904 	mov.w	r9, #4
 8003b70:	fa09 f303 	lsl.w	r3, r9, r3
 8003b74:	e7a2      	b.n	8003abc <HAL_GPIO_Init+0x14c>
 8003b76:	f04f 0905 	mov.w	r9, #5
 8003b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b7e:	e79d      	b.n	8003abc <HAL_GPIO_Init+0x14c>
 8003b80:	f04f 0906 	mov.w	r9, #6
 8003b84:	fa09 f303 	lsl.w	r3, r9, r3
 8003b88:	e798      	b.n	8003abc <HAL_GPIO_Init+0x14c>
 8003b8a:	f04f 0907 	mov.w	r9, #7
 8003b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b92:	e793      	b.n	8003abc <HAL_GPIO_Init+0x14c>
 8003b94:	f04f 0908 	mov.w	r9, #8
 8003b98:	fa09 f303 	lsl.w	r3, r9, r3
 8003b9c:	e78e      	b.n	8003abc <HAL_GPIO_Init+0x14c>
 8003b9e:	bf00      	nop
 8003ba0:	58020000 	.word	0x58020000
 8003ba4:	58020800 	.word	0x58020800
 8003ba8:	58020c00 	.word	0x58020c00
 8003bac:	58021000 	.word	0x58021000
 8003bb0:	58021400 	.word	0x58021400
 8003bb4:	58000080 	.word	0x58000080
 8003bb8:	58024400 	.word	0x58024400
 8003bbc:	58021800 	.word	0x58021800
 8003bc0:	58021c00 	.word	0x58021c00
 8003bc4:	58022000 	.word	0x58022000
 8003bc8:	58022400 	.word	0x58022400

08003bcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bcc:	b90a      	cbnz	r2, 8003bd2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8003bce:	8341      	strh	r1, [r0, #26]
 8003bd0:	4770      	bx	lr
    GPIOx->BSRRL = GPIO_Pin;
 8003bd2:	8301      	strh	r1, [r0, #24]
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop

08003bd8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003bd8:	6943      	ldr	r3, [r0, #20]
 8003bda:	4059      	eors	r1, r3
 8003bdc:	6141      	str	r1, [r0, #20]
 8003bde:	4770      	bx	lr

08003be0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	6803      	ldr	r3, [r0, #0]
{
 8003be4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be6:	07d9      	lsls	r1, r3, #31
 8003be8:	d530      	bpl.n	8003c4c <HAL_RCC_OscConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003bea:	49a9      	ldr	r1, [pc, #676]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003bec:	690a      	ldr	r2, [r1, #16]
 8003bee:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003bf2:	2a10      	cmp	r2, #16
 8003bf4:	f000 810c 	beq.w	8003e10 <HAL_RCC_OscConfig+0x230>
 8003bf8:	690a      	ldr	r2, [r1, #16]
 8003bfa:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003bfe:	2a18      	cmp	r2, #24
 8003c00:	f000 8100 	beq.w	8003e04 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c04:	6863      	ldr	r3, [r4, #4]
 8003c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0a:	f000 81a2 	beq.w	8003f52 <HAL_RCC_OscConfig+0x372>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8109 	beq.w	8003e26 <HAL_RCC_OscConfig+0x246>
 8003c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c18:	4b9d      	ldr	r3, [pc, #628]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	f000 81c6 	beq.w	8003fac <HAL_RCC_OscConfig+0x3cc>
 8003c20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fe ffa3 	bl	8002b78 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4d97      	ldr	r5, [pc, #604]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8003c34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	e005      	b.n	8003c44 <HAL_RCC_OscConfig+0x64>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fe ff9e 	bl	8002b78 <HAL_GetTick>
 8003c3c:	1b80      	subs	r0, r0, r6
 8003c3e:	2864      	cmp	r0, #100	; 0x64
 8003c40:	f200 8171 	bhi.w	8003f26 <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	039b      	lsls	r3, r3, #14
 8003c48:	d5f6      	bpl.n	8003c38 <HAL_RCC_OscConfig+0x58>
 8003c4a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4c:	0798      	lsls	r0, r3, #30
 8003c4e:	d531      	bpl.n	8003cb4 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c50:	4b8f      	ldr	r3, [pc, #572]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	f012 0f38 	tst.w	r2, #56	; 0x38
 8003c58:	f000 80b9 	beq.w	8003dce <HAL_RCC_OscConfig+0x1ee>
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003c62:	2a18      	cmp	r2, #24
 8003c64:	f000 80af 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x1e6>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c68:	68e2      	ldr	r2, [r4, #12]
 8003c6a:	2a00      	cmp	r2, #0
 8003c6c:	f000 8177 	beq.w	8003f5e <HAL_RCC_OscConfig+0x37e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c70:	4987      	ldr	r1, [pc, #540]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003c72:	680b      	ldr	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c74:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c76:	f023 0319 	bic.w	r3, r3, #25
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8003c7e:	f7fe ff7b 	bl	8002b78 <HAL_GetTick>
 8003c82:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c84:	e005      	b.n	8003c92 <HAL_RCC_OscConfig+0xb2>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c86:	f7fe ff77 	bl	8002b78 <HAL_GetTick>
 8003c8a:	1b80      	subs	r0, r0, r6
 8003c8c:	2802      	cmp	r0, #2
 8003c8e:	f200 814a 	bhi.w	8003f26 <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	682b      	ldr	r3, [r5, #0]
 8003c94:	075f      	lsls	r7, r3, #29
 8003c96:	d5f6      	bpl.n	8003c86 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c98:	6869      	ldr	r1, [r5, #4]
 8003c9a:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	fab3 f283 	clz	r2, r3
 8003ca6:	6923      	ldr	r3, [r4, #16]
 8003ca8:	f421 317c 	bic.w	r1, r1, #258048	; 0x3f000
 8003cac:	4093      	lsls	r3, r2
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	606b      	str	r3, [r5, #4]
 8003cb2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cb4:	06d9      	lsls	r1, r3, #27
 8003cb6:	d531      	bpl.n	8003d1c <HAL_RCC_OscConfig+0x13c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003cb8:	4975      	ldr	r1, [pc, #468]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003cba:	690a      	ldr	r2, [r1, #16]
 8003cbc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003cc0:	2a08      	cmp	r2, #8
 8003cc2:	f000 811a 	beq.w	8003efa <HAL_RCC_OscConfig+0x31a>
 8003cc6:	690a      	ldr	r2, [r1, #16]
 8003cc8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003ccc:	2a18      	cmp	r2, #24
 8003cce:	f000 810e 	beq.w	8003eee <HAL_RCC_OscConfig+0x30e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003cd2:	69e3      	ldr	r3, [r4, #28]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8128 	beq.w	8003f2a <HAL_RCC_OscConfig+0x34a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003cda:	4b6d      	ldr	r3, [pc, #436]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003cdc:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8003cde:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8003ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ce4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ce6:	f7fe ff47 	bl	8002b78 <HAL_GetTick>
 8003cea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8003cec:	e005      	b.n	8003cfa <HAL_RCC_OscConfig+0x11a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cee:	f7fe ff43 	bl	8002b78 <HAL_GetTick>
 8003cf2:	1b80      	subs	r0, r0, r6
 8003cf4:	2802      	cmp	r0, #2
 8003cf6:	f200 8116 	bhi.w	8003f26 <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8003cfa:	682b      	ldr	r3, [r5, #0]
 8003cfc:	05db      	lsls	r3, r3, #23
 8003cfe:	d5f6      	bpl.n	8003cee <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d00:	6869      	ldr	r1, [r5, #4]
 8003d02:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	fab3 f283 	clz	r2, r3
 8003d0e:	6a23      	ldr	r3, [r4, #32]
 8003d10:	f021 41f8 	bic.w	r1, r1, #2080374784	; 0x7c000000
 8003d14:	4093      	lsls	r3, r2
 8003d16:	430b      	orrs	r3, r1
 8003d18:	606b      	str	r3, [r5, #4]
 8003d1a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1c:	071d      	lsls	r5, r3, #28
 8003d1e:	d517      	bpl.n	8003d50 <HAL_RCC_OscConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d20:	6963      	ldr	r3, [r4, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8096 	beq.w	8003e54 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d28:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003d2a:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003d34:	f7fe ff20 	bl	8002b78 <HAL_GetTick>
 8003d38:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	e005      	b.n	8003d48 <HAL_RCC_OscConfig+0x168>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7fe ff1c 	bl	8002b78 <HAL_GetTick>
 8003d40:	1b80      	subs	r0, r0, r6
 8003d42:	2802      	cmp	r0, #2
 8003d44:	f200 80ef 	bhi.w	8003f26 <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d48:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003d4a:	0798      	lsls	r0, r3, #30
 8003d4c:	d5f6      	bpl.n	8003d3c <HAL_RCC_OscConfig+0x15c>
 8003d4e:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d50:	069a      	lsls	r2, r3, #26
 8003d52:	d517      	bpl.n	8003d84 <HAL_RCC_OscConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d54:	69a3      	ldr	r3, [r4, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8115 	beq.w	8003f86 <HAL_RCC_OscConfig+0x3a6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d5c:	4b4c      	ldr	r3, [pc, #304]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003d60:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8003d62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d66:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003d68:	f7fe ff06 	bl	8002b78 <HAL_GetTick>
 8003d6c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003d6e:	e005      	b.n	8003d7c <HAL_RCC_OscConfig+0x19c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d70:	f7fe ff02 	bl	8002b78 <HAL_GetTick>
 8003d74:	1b80      	subs	r0, r0, r6
 8003d76:	2802      	cmp	r0, #2
 8003d78:	f200 80d5 	bhi.w	8003f26 <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	049f      	lsls	r7, r3, #18
 8003d80:	d5f6      	bpl.n	8003d70 <HAL_RCC_OscConfig+0x190>
 8003d82:	6823      	ldr	r3, [r4, #0]
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d84:	0759      	lsls	r1, r3, #29
 8003d86:	d478      	bmi.n	8003e7a <HAL_RCC_OscConfig+0x29a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d8a:	b1d2      	cbz	r2, 8003dc2 <HAL_RCC_OscConfig+0x1e2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d8c:	4b40      	ldr	r3, [pc, #256]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003d8e:	6919      	ldr	r1, [r3, #16]
 8003d90:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003d94:	2918      	cmp	r1, #24
 8003d96:	d044      	beq.n	8003e22 <HAL_RCC_OscConfig+0x242>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d98:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9a:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d9c:	f000 810e 	beq.w	8003fbc <HAL_RCC_OscConfig+0x3dc>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da4:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8003da6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003da8:	f7fe fee6 	bl	8002b78 <HAL_GetTick>
 8003dac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	e005      	b.n	8003dbc <HAL_RCC_OscConfig+0x1dc>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fe fee2 	bl	8002b78 <HAL_GetTick>
 8003db4:	1b40      	subs	r0, r0, r5
 8003db6:	2802      	cmp	r0, #2
 8003db8:	f200 80b5 	bhi.w	8003f26 <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	019b      	lsls	r3, r3, #6
 8003dc0:	d4f6      	bmi.n	8003db0 <HAL_RCC_OscConfig+0x1d0>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	0799      	lsls	r1, r3, #30
 8003dca:	f47f af4d 	bne.w	8003c68 <HAL_RCC_OscConfig+0x88>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dce:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003dd0:	68e1      	ldr	r1, [r4, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	075a      	lsls	r2, r3, #29
 8003dd6:	d500      	bpl.n	8003dda <HAL_RCC_OscConfig+0x1fa>
 8003dd8:	b319      	cbz	r1, 8003e22 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003dda:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003ddc:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dde:	4615      	mov	r5, r2
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003de0:	f023 0319 	bic.w	r3, r3, #25
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003de8:	f7fe fec6 	bl	8002b78 <HAL_GetTick>
 8003dec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dee:	e005      	b.n	8003dfc <HAL_RCC_OscConfig+0x21c>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df0:	f7fe fec2 	bl	8002b78 <HAL_GetTick>
 8003df4:	1b80      	subs	r0, r0, r6
 8003df6:	2802      	cmp	r0, #2
 8003df8:	f200 8095 	bhi.w	8003f26 <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	075b      	lsls	r3, r3, #29
 8003e00:	d5f6      	bpl.n	8003df0 <HAL_RCC_OscConfig+0x210>
 8003e02:	e749      	b.n	8003c98 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e04:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e06:	f002 0203 	and.w	r2, r2, #3
 8003e0a:	2a02      	cmp	r2, #2
 8003e0c:	f47f aefa 	bne.w	8003c04 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	0392      	lsls	r2, r2, #14
 8003e16:	f57f af19 	bpl.w	8003c4c <HAL_RCC_OscConfig+0x6c>
 8003e1a:	6862      	ldr	r2, [r4, #4]
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	f47f af15 	bne.w	8003c4c <HAL_RCC_OscConfig+0x6c>
      return HAL_ERROR;
 8003e22:	2001      	movs	r0, #1
 8003e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e26:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003e28:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e3a:	f7fe fe9d 	bl	8002b78 <HAL_GetTick>
 8003e3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e40:	e004      	b.n	8003e4c <HAL_RCC_OscConfig+0x26c>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e42:	f7fe fe99 	bl	8002b78 <HAL_GetTick>
 8003e46:	1b80      	subs	r0, r0, r6
 8003e48:	2864      	cmp	r0, #100	; 0x64
 8003e4a:	d86c      	bhi.n	8003f26 <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	039f      	lsls	r7, r3, #14
 8003e50:	d4f7      	bmi.n	8003e42 <HAL_RCC_OscConfig+0x262>
 8003e52:	e6fa      	b.n	8003c4a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003e56:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003e60:	f7fe fe8a 	bl	8002b78 <HAL_GetTick>
 8003e64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e66:	e004      	b.n	8003e72 <HAL_RCC_OscConfig+0x292>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e68:	f7fe fe86 	bl	8002b78 <HAL_GetTick>
 8003e6c:	1b80      	subs	r0, r0, r6
 8003e6e:	2802      	cmp	r0, #2
 8003e70:	d859      	bhi.n	8003f26 <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e72:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003e74:	0799      	lsls	r1, r3, #30
 8003e76:	d4f7      	bmi.n	8003e68 <HAL_RCC_OscConfig+0x288>
 8003e78:	e769      	b.n	8003d4e <HAL_RCC_OscConfig+0x16e>
    PWR->CR1 |= PWR_CR1_DBP;
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCC_OscConfig+0x2b4>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e7e:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8003e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e84:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003e86:	f7fe fe77 	bl	8002b78 <HAL_GetTick>
 8003e8a:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e8c:	e009      	b.n	8003ea2 <HAL_RCC_OscConfig+0x2c2>
 8003e8e:	bf00      	nop
 8003e90:	58024400 	.word	0x58024400
 8003e94:	58024800 	.word	0x58024800
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fe fe6e 	bl	8002b78 <HAL_GetTick>
 8003e9c:	1b80      	subs	r0, r0, r6
 8003e9e:	2864      	cmp	r0, #100	; 0x64
 8003ea0:	d841      	bhi.n	8003f26 <HAL_RCC_OscConfig+0x346>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	05da      	lsls	r2, r3, #23
 8003ea6:	d5f7      	bpl.n	8003e98 <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea8:	68a3      	ldr	r3, [r4, #8]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	f000 810b 	beq.w	80040c6 <HAL_RCC_OscConfig+0x4e6>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80ee 	beq.w	8004092 <HAL_RCC_OscConfig+0x4b2>
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	4b8a      	ldr	r3, [pc, #552]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003eba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ebc:	f000 8109 	beq.w	80040d2 <HAL_RCC_OscConfig+0x4f2>
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	671a      	str	r2, [r3, #112]	; 0x70
 8003ec6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ec8:	f022 0204 	bic.w	r2, r2, #4
 8003ecc:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003ece:	f7fe fe53 	bl	8002b78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	4d84      	ldr	r5, [pc, #528]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
      tickstart = HAL_GetTick();
 8003ed4:	4607      	mov	r7, r0
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eda:	e004      	b.n	8003ee6 <HAL_RCC_OscConfig+0x306>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7fe fe4c 	bl	8002b78 <HAL_GetTick>
 8003ee0:	1bc0      	subs	r0, r0, r7
 8003ee2:	42b0      	cmp	r0, r6
 8003ee4:	d81f      	bhi.n	8003f26 <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003ee8:	079b      	lsls	r3, r3, #30
 8003eea:	d5f7      	bpl.n	8003edc <HAL_RCC_OscConfig+0x2fc>
 8003eec:	e74c      	b.n	8003d88 <HAL_RCC_OscConfig+0x1a8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003eee:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003ef0:	f002 0203 	and.w	r2, r2, #3
 8003ef4:	2a01      	cmp	r2, #1
 8003ef6:	f47f aeec 	bne.w	8003cd2 <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003efa:	4a7a      	ldr	r2, [pc, #488]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	05d2      	lsls	r2, r2, #23
 8003f00:	d502      	bpl.n	8003f08 <HAL_RCC_OscConfig+0x328>
 8003f02:	69e2      	ldr	r2, [r4, #28]
 8003f04:	2a80      	cmp	r2, #128	; 0x80
 8003f06:	d18c      	bne.n	8003e22 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f08:	4d76      	ldr	r5, [pc, #472]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8003f0e:	6868      	ldr	r0, [r5, #4]
 8003f10:	fa92 f2a2 	rbit	r2, r2
 8003f14:	fab2 f182 	clz	r1, r2
 8003f18:	6a22      	ldr	r2, [r4, #32]
 8003f1a:	f020 40f8 	bic.w	r0, r0, #2080374784	; 0x7c000000
 8003f1e:	408a      	lsls	r2, r1
 8003f20:	4302      	orrs	r2, r0
 8003f22:	606a      	str	r2, [r5, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f24:	e6fa      	b.n	8003d1c <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8003f26:	2003      	movs	r0, #3
 8003f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RCC_CSI_DISABLE();
 8003f2a:	4b6e      	ldr	r3, [pc, #440]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8003f2e:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8003f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f36:	f7fe fe1f 	bl	8002b78 <HAL_GetTick>
 8003f3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8003f3c:	e004      	b.n	8003f48 <HAL_RCC_OscConfig+0x368>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f3e:	f7fe fe1b 	bl	8002b78 <HAL_GetTick>
 8003f42:	1b80      	subs	r0, r0, r6
 8003f44:	2802      	cmp	r0, #2
 8003f46:	d8ee      	bhi.n	8003f26 <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	05df      	lsls	r7, r3, #23
 8003f4c:	d4f7      	bmi.n	8003f3e <HAL_RCC_OscConfig+0x35e>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	e6e4      	b.n	8003d1c <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f52:	4a64      	ldr	r2, [pc, #400]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f54:	6813      	ldr	r3, [r2, #0]
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e667      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e>
        __HAL_RCC_HSI_DISABLE();
 8003f5e:	4b61      	ldr	r3, [pc, #388]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f60:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f62:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f6a:	f7fe fe05 	bl	8002b78 <HAL_GetTick>
 8003f6e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f70:	e004      	b.n	8003f7c <HAL_RCC_OscConfig+0x39c>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f72:	f7fe fe01 	bl	8002b78 <HAL_GetTick>
 8003f76:	1b80      	subs	r0, r0, r6
 8003f78:	2802      	cmp	r0, #2
 8003f7a:	d8d4      	bhi.n	8003f26 <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	0758      	lsls	r0, r3, #29
 8003f80:	d4f7      	bmi.n	8003f72 <HAL_RCC_OscConfig+0x392>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	e696      	b.n	8003cb4 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSI48_DISABLE();
 8003f86:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f88:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003f8a:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8003f8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f90:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003f92:	f7fe fdf1 	bl	8002b78 <HAL_GetTick>
 8003f96:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003f98:	e004      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3c4>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f9a:	f7fe fded 	bl	8002b78 <HAL_GetTick>
 8003f9e:	1b80      	subs	r0, r0, r6
 8003fa0:	2802      	cmp	r0, #2
 8003fa2:	d8c0      	bhi.n	8003f26 <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	0498      	lsls	r0, r3, #18
 8003fa8:	d4f7      	bmi.n	8003f9a <HAL_RCC_OscConfig+0x3ba>
 8003faa:	e6ea      	b.n	8003d82 <HAL_RCC_OscConfig+0x1a2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e638      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e>
        __HAL_RCC_PLL_DISABLE();
 8003fbc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc0:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8003fc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fdd8 	bl	8002b78 <HAL_GetTick>
 8003fc8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	e004      	b.n	8003fd6 <HAL_RCC_OscConfig+0x3f6>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fe fdd4 	bl	8002b78 <HAL_GetTick>
 8003fd0:	1b80      	subs	r0, r0, r6
 8003fd2:	2802      	cmp	r0, #2
 8003fd4:	d8a7      	bhi.n	8003f26 <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	682b      	ldr	r3, [r5, #0]
 8003fd8:	0199      	lsls	r1, r3, #6
 8003fda:	d4f7      	bmi.n	8003fcc <HAL_RCC_OscConfig+0x3ec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fdc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003fde:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8003fe2:	4b41      	ldr	r3, [pc, #260]	; (80040e8 <HAL_RCC_OscConfig+0x508>)
 8003fe4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003fea:	4303      	orrs	r3, r0
 8003fec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003ff0:	62ab      	str	r3, [r5, #40]	; 0x28
 8003ff2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ff4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ff6:	1e50      	subs	r0, r2, #1
 8003ff8:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003ffe:	0400      	lsls	r0, r0, #16
 8004000:	3e01      	subs	r6, #1
 8004002:	025b      	lsls	r3, r3, #9
 8004004:	3a01      	subs	r2, #1
 8004006:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800400a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800400e:	b29b      	uxth	r3, r3
 8004010:	0612      	lsls	r2, r2, #24
 8004012:	4303      	orrs	r3, r0
 8004014:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004018:	4333      	orrs	r3, r6
 800401a:	4313      	orrs	r3, r2
 800401c:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800401e:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004020:	fa91 f3a1 	rbit	r3, r1
 8004024:	4931      	ldr	r1, [pc, #196]	; (80040ec <HAL_RCC_OscConfig+0x50c>)
 8004026:	fab3 f283 	clz	r2, r3
 800402a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800402c:	4001      	ands	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	4e2d      	ldr	r6, [pc, #180]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004030:	4093      	lsls	r3, r2
 8004032:	430b      	orrs	r3, r1
 8004034:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004036:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004038:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800403a:	f023 030c 	bic.w	r3, r3, #12
 800403e:	4313      	orrs	r3, r2
 8004040:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004042:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004044:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004046:	f023 0302 	bic.w	r3, r3, #2
 800404a:	4313      	orrs	r3, r2
 800404c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800404e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004056:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800405e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004064:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8004066:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800406e:	682b      	ldr	r3, [r5, #0]
 8004070:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004074:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004076:	f7fe fd7f 	bl	8002b78 <HAL_GetTick>
 800407a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407c:	e005      	b.n	800408a <HAL_RCC_OscConfig+0x4aa>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407e:	f7fe fd7b 	bl	8002b78 <HAL_GetTick>
 8004082:	1b00      	subs	r0, r0, r4
 8004084:	2802      	cmp	r0, #2
 8004086:	f63f af4e 	bhi.w	8003f26 <HAL_RCC_OscConfig+0x346>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408a:	6833      	ldr	r3, [r6, #0]
 800408c:	019a      	lsls	r2, r3, #6
 800408e:	d5f6      	bpl.n	800407e <HAL_RCC_OscConfig+0x49e>
 8004090:	e697      	b.n	8003dc2 <HAL_RCC_OscConfig+0x1e2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004098:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409a:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	671a      	str	r2, [r3, #112]	; 0x70
 80040a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040a4:	f022 0204 	bic.w	r2, r2, #4
 80040a8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80040aa:	f7fe fd65 	bl	8002b78 <HAL_GetTick>
 80040ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b0:	e005      	b.n	80040be <HAL_RCC_OscConfig+0x4de>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b2:	f7fe fd61 	bl	8002b78 <HAL_GetTick>
 80040b6:	1b80      	subs	r0, r0, r6
 80040b8:	42b8      	cmp	r0, r7
 80040ba:	f63f af34 	bhi.w	8003f26 <HAL_RCC_OscConfig+0x346>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80040c0:	0798      	lsls	r0, r3, #30
 80040c2:	d4f6      	bmi.n	80040b2 <HAL_RCC_OscConfig+0x4d2>
 80040c4:	e660      	b.n	8003d88 <HAL_RCC_OscConfig+0x1a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c6:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 80040c8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6713      	str	r3, [r2, #112]	; 0x70
 80040d0:	e6fd      	b.n	8003ece <HAL_RCC_OscConfig+0x2ee>
 80040d2:	f042 0204 	orr.w	r2, r2, #4
 80040d6:	671a      	str	r2, [r3, #112]	; 0x70
 80040d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	671a      	str	r2, [r3, #112]	; 0x70
 80040e0:	e6f5      	b.n	8003ece <HAL_RCC_OscConfig+0x2ee>
 80040e2:	bf00      	nop
 80040e4:	58024400 	.word	0x58024400
 80040e8:	fffffc0c 	.word	0xfffffc0c
 80040ec:	ffff0007 	.word	0xffff0007

080040f0 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f0:	4a47      	ldr	r2, [pc, #284]	; (8004210 <HAL_RCC_GetSysClockFreq+0x120>)
 80040f2:	6913      	ldr	r3, [r2, #16]
 80040f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d04b      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0xa4>
 80040fc:	2b18      	cmp	r3, #24
 80040fe:	d007      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x20>
 8004100:	b10b      	cbz	r3, 8004106 <HAL_RCC_GetSysClockFreq+0x16>
      }
      
    break;

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004102:	4844      	ldr	r0, [pc, #272]	; (8004214 <HAL_RCC_GetSysClockFreq+0x124>)
 8004104:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004106:	6813      	ldr	r3, [r2, #0]
 8004108:	0699      	lsls	r1, r3, #26
 800410a:	d445      	bmi.n	8004198 <HAL_RCC_GetSysClockFreq+0xa8>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800410c:	4842      	ldr	r0, [pc, #264]	; (8004218 <HAL_RCC_GetSysClockFreq+0x128>)
  default:
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
 800410e:	4770      	bx	lr
{
 8004110:	b410      	push	{r4}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004112:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004114:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004116:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004118:	f004 0403 	and.w	r4, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800411c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800411e:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004122:	f001 0101 	and.w	r1, r1, #1
    switch (pllsource)
 8004126:	2c01      	cmp	r4, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004128:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800412c:	fb01 f103 	mul.w	r1, r1, r3
 8004130:	ee07 1a90 	vmov	s15, r1
 8004134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8004138:	d034      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0xb4>
 800413a:	d33e      	bcc.n	80041ba <HAL_RCC_GetSysClockFreq+0xca>
 800413c:	2c02      	cmp	r4, #2
 800413e:	d131      	bne.n	80041a4 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8004140:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004146:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800421c <HAL_RCC_GetSysClockFreq+0x12c>
 800414a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	4b33      	ldr	r3, [pc, #204]	; (8004220 <HAL_RCC_GetSysClockFreq+0x130>)
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8004154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004158:	fbb3 f3f0 	udiv	r3, r3, r0
 800415c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004160:	ee07 3a10 	vmov	s14, r3
 8004164:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416c:	ee67 7a87 	vmul.f32	s15, s15, s14
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8004170:	4b27      	ldr	r3, [pc, #156]	; (8004210 <HAL_RCC_GetSysClockFreq+0x120>)
}
 8004172:	f85d 4b04 	ldr.w	r4, [sp], #4
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800417c:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 800417e:	ee07 3a10 	vmov	s14, r3
 8004182:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004186:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800418a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800418e:	ee17 0a90 	vmov	r0, s15
}
 8004192:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8004194:	4822      	ldr	r0, [pc, #136]	; (8004220 <HAL_RCC_GetSysClockFreq+0x130>)
 8004196:	4770      	bx	lr
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004198:	6813      	ldr	r3, [r2, #0]
 800419a:	481f      	ldr	r0, [pc, #124]	; (8004218 <HAL_RCC_GetSysClockFreq+0x128>)
 800419c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80041a0:	40d8      	lsrs	r0, r3
 80041a2:	4770      	bx	lr
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80041a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80041a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041aa:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800421c <HAL_RCC_GetSysClockFreq+0x12c>
 80041ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	4b17      	ldr	r3, [pc, #92]	; (8004214 <HAL_RCC_GetSysClockFreq+0x124>)
 80041b8:	e7cc      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x64>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041ba:	6813      	ldr	r3, [r2, #0]
 80041bc:	069b      	lsls	r3, r3, #26
 80041be:	d51c      	bpl.n	80041fa <HAL_RCC_GetSysClockFreq+0x10a>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041c0:	6811      	ldr	r1, [r2, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80041c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80041c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041c8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80041cc:	4b12      	ldr	r3, [pc, #72]	; (8004218 <HAL_RCC_GetSysClockFreq+0x128>)
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80041ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d2:	eddf 5a12 	vldr	s11, [pc, #72]	; 800421c <HAL_RCC_GetSysClockFreq+0x12c>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041d6:	40cb      	lsrs	r3, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80041d8:	ee07 2a90 	vmov	s15, r2
 80041dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80041e0:	fbb3 f3f0 	udiv	r3, r3, r0
 80041e4:	eee7 6a25 	vfma.f32	s13, s14, s11
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f0:	ee36 7a86 	vadd.f32	s14, s13, s12
 80041f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041f8:	e7ba      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80041fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80041fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004200:	ed9f 6a06 	vldr	s12, [pc, #24]	; 800421c <HAL_RCC_GetSysClockFreq+0x12c>
 8004204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	4b02      	ldr	r3, [pc, #8]	; (8004218 <HAL_RCC_GetSysClockFreq+0x128>)
 800420e:	e7a1      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x64>
 8004210:	58024400 	.word	0x58024400
 8004214:	003d0900 	.word	0x003d0900
 8004218:	03d09000 	.word	0x03d09000
 800421c:	39000000 	.word	0x39000000
 8004220:	007a1200 	.word	0x007a1200

08004224 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004224:	4a69      	ldr	r2, [pc, #420]	; (80043cc <HAL_RCC_ClockConfig+0x1a8>)
 8004226:	6813      	ldr	r3, [r2, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	428b      	cmp	r3, r1
 800422e:	d20b      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004230:	6813      	ldr	r3, [r2, #0]
 8004232:	f023 0307 	bic.w	r3, r3, #7
 8004236:	430b      	orrs	r3, r1
 8004238:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4299      	cmp	r1, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8004244:	2001      	movs	r0, #1
}
 8004246:	4770      	bx	lr
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004248:	6803      	ldr	r3, [r0, #0]
{
 800424a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424e:	079c      	lsls	r4, r3, #30
 8004250:	d506      	bpl.n	8004260 <HAL_RCC_ClockConfig+0x3c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004252:	4c5f      	ldr	r4, [pc, #380]	; (80043d0 <HAL_RCC_ClockConfig+0x1ac>)
 8004254:	68c5      	ldr	r5, [r0, #12]
 8004256:	69a2      	ldr	r2, [r4, #24]
 8004258:	f022 020f 	bic.w	r2, r2, #15
 800425c:	432a      	orrs	r2, r5
 800425e:	61a2      	str	r2, [r4, #24]
 8004260:	4606      	mov	r6, r0
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004262:	07d8      	lsls	r0, r3, #31
 8004264:	460c      	mov	r4, r1
 8004266:	d52f      	bpl.n	80042c8 <HAL_RCC_ClockConfig+0xa4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004268:	4a59      	ldr	r2, [pc, #356]	; (80043d0 <HAL_RCC_ClockConfig+0x1ac>)
 800426a:	68b1      	ldr	r1, [r6, #8]
 800426c:	6993      	ldr	r3, [r2, #24]
 800426e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004272:	430b      	orrs	r3, r1
 8004274:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004276:	6873      	ldr	r3, [r6, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004278:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427a:	2b02      	cmp	r3, #2
 800427c:	f000 809e 	beq.w	80043bc <HAL_RCC_ClockConfig+0x198>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004280:	2b03      	cmp	r3, #3
 8004282:	f000 8094 	beq.w	80043ae <HAL_RCC_ClockConfig+0x18a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004286:	2b01      	cmp	r3, #1
 8004288:	f000 809c 	beq.w	80043c4 <HAL_RCC_ClockConfig+0x1a0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428c:	0755      	lsls	r5, r2, #29
 800428e:	d52b      	bpl.n	80042e8 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004290:	4d4f      	ldr	r5, [pc, #316]	; (80043d0 <HAL_RCC_ClockConfig+0x1ac>)
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004292:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004296:	692a      	ldr	r2, [r5, #16]
 8004298:	f022 0207 	bic.w	r2, r2, #7
 800429c:	4313      	orrs	r3, r2
 800429e:	612b      	str	r3, [r5, #16]
      tickstart = HAL_GetTick();
 80042a0:	f7fe fc6a 	bl	8002b78 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a4:	6873      	ldr	r3, [r6, #4]
      tickstart = HAL_GetTick();
 80042a6:	4607      	mov	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d064      	beq.n	8004376 <HAL_RCC_ClockConfig+0x152>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d06d      	beq.n	800438c <HAL_RCC_ClockConfig+0x168>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d105      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 80042b4:	e075      	b.n	80043a2 <HAL_RCC_ClockConfig+0x17e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b6:	f7fe fc5f 	bl	8002b78 <HAL_GetTick>
 80042ba:	1bc0      	subs	r0, r0, r7
 80042bc:	4540      	cmp	r0, r8
 80042be:	d87a      	bhi.n	80043b6 <HAL_RCC_ClockConfig+0x192>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80042c0:	692b      	ldr	r3, [r5, #16]
 80042c2:	f013 0f38 	tst.w	r3, #56	; 0x38
 80042c6:	d1f6      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x92>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80042c8:	4a40      	ldr	r2, [pc, #256]	; (80043cc <HAL_RCC_ClockConfig+0x1a8>)
 80042ca:	6813      	ldr	r3, [r2, #0]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	429c      	cmp	r4, r3
 80042d2:	d20c      	bcs.n	80042ee <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d4:	6813      	ldr	r3, [r2, #0]
 80042d6:	f023 0307 	bic.w	r3, r3, #7
 80042da:	4323      	orrs	r3, r4
 80042dc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	429c      	cmp	r4, r3
 80042e6:	d002      	beq.n	80042ee <HAL_RCC_ClockConfig+0xca>
      return HAL_ERROR;
 80042e8:	2001      	movs	r0, #1
 80042ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042ee:	6833      	ldr	r3, [r6, #0]
 80042f0:	0758      	lsls	r0, r3, #29
 80042f2:	d506      	bpl.n	8004302 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042f4:	4936      	ldr	r1, [pc, #216]	; (80043d0 <HAL_RCC_ClockConfig+0x1ac>)
 80042f6:	6930      	ldr	r0, [r6, #16]
 80042f8:	698a      	ldr	r2, [r1, #24]
 80042fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80042fe:	4302      	orrs	r2, r0
 8004300:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004302:	0719      	lsls	r1, r3, #28
 8004304:	d506      	bpl.n	8004314 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004306:	4932      	ldr	r1, [pc, #200]	; (80043d0 <HAL_RCC_ClockConfig+0x1ac>)
 8004308:	6970      	ldr	r0, [r6, #20]
 800430a:	69ca      	ldr	r2, [r1, #28]
 800430c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004310:	4302      	orrs	r2, r0
 8004312:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004314:	06da      	lsls	r2, r3, #27
 8004316:	d506      	bpl.n	8004326 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004318:	492d      	ldr	r1, [pc, #180]	; (80043d0 <HAL_RCC_ClockConfig+0x1ac>)
 800431a:	69b0      	ldr	r0, [r6, #24]
 800431c:	69ca      	ldr	r2, [r1, #28]
 800431e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004322:	4302      	orrs	r2, r0
 8004324:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004326:	069b      	lsls	r3, r3, #26
 8004328:	d506      	bpl.n	8004338 <HAL_RCC_ClockConfig+0x114>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 800432a:	4a29      	ldr	r2, [pc, #164]	; (80043d0 <HAL_RCC_ClockConfig+0x1ac>)
 800432c:	69f1      	ldr	r1, [r6, #28]
 800432e:	6a13      	ldr	r3, [r2, #32]
 8004330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004334:	430b      	orrs	r3, r1
 8004336:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8004338:	f7ff feda 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 800433c:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_RCC_ClockConfig+0x1ac>)
 800433e:	4601      	mov	r1, r0
 8004340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	fa92 f2a2 	rbit	r2, r2
 800434a:	fab2 f282 	clz	r2, r2
 800434e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004352:	4c20      	ldr	r4, [pc, #128]	; (80043d4 <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (TICK_INT_PRIORITY);
 8004354:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8004356:	40d3      	lsrs	r3, r2
 8004358:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <HAL_RCC_ClockConfig+0x1b4>)
 800435a:	5ce3      	ldrb	r3, [r4, r3]
 800435c:	fa21 f303 	lsr.w	r3, r1, r3
 8004360:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004362:	f7fd fc99 	bl	8001c98 <HAL_InitTick>
  return HAL_OK;
 8004366:	2000      	movs	r0, #0
}
 8004368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800436c:	f7fe fc04 	bl	8002b78 <HAL_GetTick>
 8004370:	1bc0      	subs	r0, r0, r7
 8004372:	4540      	cmp	r0, r8
 8004374:	d81f      	bhi.n	80043b6 <HAL_RCC_ClockConfig+0x192>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8004376:	692b      	ldr	r3, [r5, #16]
 8004378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800437c:	2b10      	cmp	r3, #16
 800437e:	d1f5      	bne.n	800436c <HAL_RCC_ClockConfig+0x148>
 8004380:	e7a2      	b.n	80042c8 <HAL_RCC_ClockConfig+0xa4>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004382:	f7fe fbf9 	bl	8002b78 <HAL_GetTick>
 8004386:	1bc0      	subs	r0, r0, r7
 8004388:	4540      	cmp	r0, r8
 800438a:	d814      	bhi.n	80043b6 <HAL_RCC_ClockConfig+0x192>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800438c:	692b      	ldr	r3, [r5, #16]
 800438e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004392:	2b18      	cmp	r3, #24
 8004394:	d1f5      	bne.n	8004382 <HAL_RCC_ClockConfig+0x15e>
 8004396:	e797      	b.n	80042c8 <HAL_RCC_ClockConfig+0xa4>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004398:	f7fe fbee 	bl	8002b78 <HAL_GetTick>
 800439c:	1bc0      	subs	r0, r0, r7
 800439e:	4540      	cmp	r0, r8
 80043a0:	d809      	bhi.n	80043b6 <HAL_RCC_ClockConfig+0x192>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 80043a2:	692b      	ldr	r3, [r5, #16]
 80043a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d1f5      	bne.n	8004398 <HAL_RCC_ClockConfig+0x174>
 80043ac:	e78c      	b.n	80042c8 <HAL_RCC_ClockConfig+0xa4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	0192      	lsls	r2, r2, #6
 80043b0:	f53f af6e 	bmi.w	8004290 <HAL_RCC_ClockConfig+0x6c>
 80043b4:	e798      	b.n	80042e8 <HAL_RCC_ClockConfig+0xc4>
            return HAL_TIMEOUT;
 80043b6:	2003      	movs	r0, #3
 80043b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043bc:	0391      	lsls	r1, r2, #14
 80043be:	f53f af67 	bmi.w	8004290 <HAL_RCC_ClockConfig+0x6c>
 80043c2:	e791      	b.n	80042e8 <HAL_RCC_ClockConfig+0xc4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80043c4:	05d7      	lsls	r7, r2, #23
 80043c6:	f53f af63 	bmi.w	8004290 <HAL_RCC_ClockConfig+0x6c>
 80043ca:	e78d      	b.n	80042e8 <HAL_RCC_ClockConfig+0xc4>
 80043cc:	52002000 	.word	0x52002000
 80043d0:	58024400 	.word	0x58024400
 80043d4:	080082ac 	.word	0x080082ac
 80043d8:	20000094 	.word	0x20000094

080043dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043dc:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 80043de:	f001 f857 	bl	8005490 <HAL_RCCEx_GetD1SysClockFreq>
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <HAL_RCC_GetHCLKFreq+0x28>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	fa92 f2a2 	rbit	r2, r2
 80043ec:	fab2 f282 	clz	r2, r2
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	4904      	ldr	r1, [pc, #16]	; (8004408 <HAL_RCC_GetHCLKFreq+0x2c>)
 80043f6:	40d3      	lsrs	r3, r2
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <HAL_RCC_GetHCLKFreq+0x30>)
 80043fa:	5ccb      	ldrb	r3, [r1, r3]
 80043fc:	40d8      	lsrs	r0, r3
 80043fe:	6010      	str	r0, [r2, #0]
  return SystemD2Clock;
}
 8004400:	bd08      	pop	{r3, pc}
 8004402:	bf00      	nop
 8004404:	58024400 	.word	0x58024400
 8004408:	080082ac 	.word	0x080082ac
 800440c:	20000098 	.word	0x20000098

08004410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004410:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 8004412:	f7ff ffe3 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8004416:	4b07      	ldr	r3, [pc, #28]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004418:	2210      	movs	r2, #16
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	fa92 f2a2 	rbit	r2, r2
 8004420:	fab2 f282 	clz	r2, r2
 8004424:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004428:	4903      	ldr	r1, [pc, #12]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x28>)
 800442a:	40d3      	lsrs	r3, r2
 800442c:	5ccb      	ldrb	r3, [r1, r3]
}
 800442e:	40d8      	lsrs	r0, r3
 8004430:	bd08      	pop	{r3, pc}
 8004432:	bf00      	nop
 8004434:	58024400 	.word	0x58024400
 8004438:	080082ac 	.word	0x080082ac

0800443c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800443c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 800443e:	f7ff ffcd 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	fa92 f2a2 	rbit	r2, r2
 800444e:	fab2 f282 	clz	r2, r2
 8004452:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004456:	4903      	ldr	r1, [pc, #12]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004458:	40d3      	lsrs	r3, r2
 800445a:	5ccb      	ldrb	r3, [r1, r3]
}
 800445c:	40d8      	lsrs	r0, r3
 800445e:	bd08      	pop	{r3, pc}
 8004460:	58024400 	.word	0x58024400
 8004464:	080082ac 	.word	0x080082ac

08004468 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004468:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800446a:	223f      	movs	r2, #63	; 0x3f
 800446c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	f002 0207 	and.w	r2, r2, #7
 8004474:	6042      	str	r2, [r0, #4]

  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800447c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	f002 020f 	and.w	r2, r2, #15
 8004484:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800448c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004494:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800449c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800449e:	6a1b      	ldr	r3, [r3, #32]
{
 80044a0:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80044a2:	f003 0370 	and.w	r3, r3, #112	; 0x70


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044a6:	4c05      	ldr	r4, [pc, #20]	; (80044bc <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80044a8:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044aa:	6823      	ldr	r3, [r4, #0]
}
 80044ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	600b      	str	r3, [r1, #0]
}
 80044b6:	4770      	bx	lr
 80044b8:	58024400 	.word	0x58024400
 80044bc:	52002000 	.word	0x52002000

080044c0 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
  
  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044c0:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <RCCEx_PLL2_Config+0xb4>)
 80044c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d050      	beq.n	800456e <RCCEx_PLL2_Config+0xae>
  
  
  else    
  {  
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
{
 80044d2:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_PLL2_DISABLE();
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4606      	mov	r6, r0
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80044d8:	4614      	mov	r4, r2
    tickstart = HAL_GetTick();
 80044da:	f7fe fb4d 	bl	8002b78 <HAL_GetTick>
 80044de:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80044e0:	e004      	b.n	80044ec <RCCEx_PLL2_Config+0x2c>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044e2:	f7fe fb49 	bl	8002b78 <HAL_GetTick>
 80044e6:	1b40      	subs	r0, r0, r5
 80044e8:	2802      	cmp	r0, #2
 80044ea:	d83e      	bhi.n	800456a <RCCEx_PLL2_Config+0xaa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	011a      	lsls	r2, r3, #4
 80044f0:	d4f7      	bmi.n	80044e2 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044f4:	6832      	ldr	r2, [r6, #0]
 80044f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80044fa:	4d1e      	ldr	r5, [pc, #120]	; (8004574 <RCCEx_PLL2_Config+0xb4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044fc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004500:	62a3      	str	r3, [r4, #40]	; 0x28
 8004502:	68f2      	ldr	r2, [r6, #12]
 8004504:	68b3      	ldr	r3, [r6, #8]
 8004506:	1e51      	subs	r1, r2, #1
 8004508:	6870      	ldr	r0, [r6, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	6932      	ldr	r2, [r6, #16]
 800450e:	0409      	lsls	r1, r1, #16
 8004510:	3801      	subs	r0, #1
 8004512:	025b      	lsls	r3, r3, #9
 8004514:	3a01      	subs	r2, #1
 8004516:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800451a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800451e:	b29b      	uxth	r3, r3
 8004520:	0612      	lsls	r2, r2, #24
 8004522:	430b      	orrs	r3, r1
 8004524:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004528:	4303      	orrs	r3, r0
 800452a:	4313      	orrs	r3, r2
 800452c:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800452e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004530:	6972      	ldr	r2, [r6, #20]
 8004532:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004536:	4313      	orrs	r3, r2
 8004538:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800453a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800453c:	69b2      	ldr	r2, [r6, #24]
 800453e:	f023 0320 	bic.w	r3, r3, #32
 8004542:	4313      	orrs	r3, r2
 8004544:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800454c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800454e:	f7fe fb13 	bl	8002b78 <HAL_GetTick>
 8004552:	4604      	mov	r4, r0
 8004554:	e004      	b.n	8004560 <RCCEx_PLL2_Config+0xa0>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004556:	f7fe fb0f 	bl	8002b78 <HAL_GetTick>
 800455a:	1b00      	subs	r0, r0, r4
 800455c:	2802      	cmp	r0, #2
 800455e:	d804      	bhi.n	800456a <RCCEx_PLL2_Config+0xaa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	d5f7      	bpl.n	8004556 <RCCEx_PLL2_Config+0x96>
    }
    
  }
  
  
  return status;
 8004566:	2000      	movs	r0, #0
 8004568:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800456a:	2003      	movs	r0, #3
 800456c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800456e:	2001      	movs	r0, #1
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	58024400 	.word	0x58024400

08004578 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
  
  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004578:	4a2c      	ldr	r2, [pc, #176]	; (800462c <RCCEx_PLL3_Config+0xb4>)
 800457a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b03      	cmp	r3, #3
 8004582:	d050      	beq.n	8004626 <RCCEx_PLL3_Config+0xae>
  
  
  else    
  { 
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004584:	6813      	ldr	r3, [r2, #0]
 8004586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
{
 800458a:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_PLL3_DISABLE();
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	4606      	mov	r6, r0
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8004590:	4614      	mov	r4, r2
    tickstart = HAL_GetTick();
 8004592:	f7fe faf1 	bl	8002b78 <HAL_GetTick>
 8004596:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8004598:	e004      	b.n	80045a4 <RCCEx_PLL3_Config+0x2c>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800459a:	f7fe faed 	bl	8002b78 <HAL_GetTick>
 800459e:	1b40      	subs	r0, r0, r5
 80045a0:	2802      	cmp	r0, #2
 80045a2:	d83e      	bhi.n	8004622 <RCCEx_PLL3_Config+0xaa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	009a      	lsls	r2, r3, #2
 80045a8:	d4f7      	bmi.n	800459a <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045ac:	6832      	ldr	r2, [r6, #0]
 80045ae:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80045b2:	4d1e      	ldr	r5, [pc, #120]	; (800462c <RCCEx_PLL3_Config+0xb4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045b4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80045b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80045ba:	68f2      	ldr	r2, [r6, #12]
 80045bc:	68b3      	ldr	r3, [r6, #8]
 80045be:	1e51      	subs	r1, r2, #1
 80045c0:	6870      	ldr	r0, [r6, #4]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	6932      	ldr	r2, [r6, #16]
 80045c6:	0409      	lsls	r1, r1, #16
 80045c8:	3801      	subs	r0, #1
 80045ca:	025b      	lsls	r3, r3, #9
 80045cc:	3a01      	subs	r2, #1
 80045ce:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80045d2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	0612      	lsls	r2, r2, #24
 80045da:	430b      	orrs	r3, r1
 80045dc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80045e0:	4303      	orrs	r3, r0
 80045e2:	4313      	orrs	r3, r2
 80045e4:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045e8:	6972      	ldr	r2, [r6, #20]
 80045ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045ee:	4313      	orrs	r3, r2
 80045f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045f4:	69b2      	ldr	r2, [r6, #24]
 80045f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045fa:	4313      	orrs	r3, r2
 80045fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004604:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004606:	f7fe fab7 	bl	8002b78 <HAL_GetTick>
 800460a:	4604      	mov	r4, r0
 800460c:	e004      	b.n	8004618 <RCCEx_PLL3_Config+0xa0>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800460e:	f7fe fab3 	bl	8002b78 <HAL_GetTick>
 8004612:	1b00      	subs	r0, r0, r4
 8004614:	2802      	cmp	r0, #2
 8004616:	d804      	bhi.n	8004622 <RCCEx_PLL3_Config+0xaa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	d5f7      	bpl.n	800460e <RCCEx_PLL3_Config+0x96>
    }
    
  }
  
  
  return status;
 800461e:	2000      	movs	r0, #0
 8004620:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8004622:	2003      	movs	r0, #3
 8004624:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004626:	2001      	movs	r0, #1
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	58024400 	.word	0x58024400

08004630 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8004634:	6803      	ldr	r3, [r0, #0]
{
 8004636:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8004638:	f013 6500 	ands.w	r5, r3, #134217728	; 0x8000000
 800463c:	d015      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800463e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004640:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004644:	f000 850e 	beq.w	8005064 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004648:	f240 8557 	bls.w	80050fa <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800464c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8004650:	f000 84bb 	beq.w	8004fca <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8004654:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8004658:	f040 8596 	bne.w	8005188 <HAL_RCCEx_PeriphCLKConfig+0xb58>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800465c:	488d      	ldr	r0, [pc, #564]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800465e:	2500      	movs	r5, #0
 8004660:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004662:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8004666:	430a      	orrs	r2, r1
 8004668:	6502      	str	r2, [r0, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 800466a:	05de      	lsls	r6, r3, #23
 800466c:	d50a      	bpl.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 800466e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004670:	2a04      	cmp	r2, #4
 8004672:	f200 85b4 	bhi.w	80051de <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004676:	e8df f012 	tbh	[pc, r2, lsl #1]
 800467a:	048a      	.short	0x048a
 800467c:	04790491 	.word	0x04790491
 8004680:	045a045a 	.word	0x045a045a
 8004684:	462e      	mov	r6, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23)
 8004686:	0598      	lsls	r0, r3, #22
 8004688:	d51f      	bpl.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    switch(PeriphClkInit->Sai23ClockSelection)
 800468a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800468c:	2a80      	cmp	r2, #128	; 0x80
 800468e:	f000 84dc 	beq.w	800504a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004692:	f200 8562 	bhi.w	800515a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004696:	2a00      	cmp	r2, #0
 8004698:	f000 848b 	beq.w	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x982>
 800469c:	2a40      	cmp	r2, #64	; 0x40
 800469e:	f040 8563 	bne.w	8005168 <HAL_RCCEx_PeriphCLKConfig+0xb38>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046a2:	4a7c      	ldr	r2, [pc, #496]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80046a4:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80046a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ac:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80046ae:	f7ff ff07 	bl	80044c0 <RCCEx_PLL2_Config>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80046b6:	2e00      	cmp	r6, #0
 80046b8:	f040 8483 	bne.w	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x992>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046bc:	4975      	ldr	r1, [pc, #468]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046c0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80046c2:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80046c6:	4302      	orrs	r2, r0
 80046c8:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A)
 80046ca:	0559      	lsls	r1, r3, #21
 80046cc:	d523      	bpl.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai4AClockSelection)
 80046ce:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80046d2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80046d6:	f000 84dc 	beq.w	8005092 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80046da:	f200 8517 	bhi.w	800510c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80046de:	2a00      	cmp	r2, #0
 80046e0:	f000 848e 	beq.w	8005000 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80046e4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80046e8:	f040 8518 	bne.w	800511c <HAL_RCCEx_PeriphCLKConfig+0xaec>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046ec:	4a69      	ldr	r2, [pc, #420]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80046ee:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80046f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046f6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80046f8:	f7ff fee2 	bl	80044c0 <RCCEx_PLL2_Config>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004700:	2e00      	cmp	r6, #0
 8004702:	f040 8485 	bne.w	8005010 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004706:	4963      	ldr	r1, [pc, #396]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004708:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800470c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800470e:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8004712:	4302      	orrs	r2, r0
 8004714:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B)
 8004716:	051a      	lsls	r2, r3, #20
 8004718:	d523      	bpl.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x132>
    switch(PeriphClkInit->Sai4BClockSelection)
 800471a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800471e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8004722:	f000 8485 	beq.w	8005030 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004726:	f200 850b 	bhi.w	8005140 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 800472a:	2a00      	cmp	r2, #0
 800472c:	f000 845c 	beq.w	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8004730:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8004734:	f040 850c 	bne.w	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb20>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004738:	4a56      	ldr	r2, [pc, #344]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800473a:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800473c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800473e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004742:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004744:	f7ff febc 	bl	80044c0 <RCCEx_PLL2_Config>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800474c:	2e00      	cmp	r6, #0
 800474e:	f040 8453 	bne.w	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004752:	4950      	ldr	r1, [pc, #320]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004754:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8004758:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800475a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800475e:	4302      	orrs	r2, r0
 8004760:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI)
 8004762:	019f      	lsls	r7, r3, #6
 8004764:	d50e      	bpl.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch(PeriphClkInit->QspiClockSelection)
 8004766:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004768:	2a10      	cmp	r2, #16
 800476a:	f000 83eb 	beq.w	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800476e:	f240 8506 	bls.w	800517e <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8004772:	2a20      	cmp	r2, #32
 8004774:	f000 8390 	beq.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8004778:	2a30      	cmp	r2, #48	; 0x30
 800477a:	f000 8397 	beq.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      ret = HAL_ERROR;
 800477e:	2601      	movs	r6, #1
      status |= ret;
 8004780:	4335      	orrs	r5, r6
 8004782:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123)
 8004784:	04d8      	lsls	r0, r3, #19
 8004786:	d521      	bpl.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004788:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800478a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800478e:	f000 8473 	beq.w	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004792:	f200 84c8 	bhi.w	8005126 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004796:	2a00      	cmp	r2, #0
 8004798:	f000 843e 	beq.w	8005018 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800479c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80047a0:	f040 84c9 	bne.w	8005136 <HAL_RCCEx_PeriphCLKConfig+0xb06>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047a4:	4a3b      	ldr	r2, [pc, #236]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80047a6:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80047aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ae:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80047b0:	f7ff fe86 	bl	80044c0 <RCCEx_PLL2_Config>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80047b8:	2e00      	cmp	r6, #0
 80047ba:	f040 8435 	bne.w	8005028 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80047be:	4935      	ldr	r1, [pc, #212]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047c0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80047c2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80047c4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80047c8:	4302      	orrs	r2, r0
 80047ca:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45)
 80047cc:	0499      	lsls	r1, r3, #18
 80047ce:	d51f      	bpl.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Spi45ClockSelection)
 80047d0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80047d2:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80047d6:	f000 83bb 	beq.w	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x920>
 80047da:	f200 82f8 	bhi.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x79e>
 80047de:	b16a      	cbz	r2, 80047fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80047e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80047e4:	f040 82ff 	bne.w	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047e8:	4a2a      	ldr	r2, [pc, #168]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80047ea:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80047ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047f2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80047f4:	f7ff fe64 	bl	80044c0 <RCCEx_PLL2_Config>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80047fc:	2e00      	cmp	r6, #0
 80047fe:	f040 82f3 	bne.w	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004802:	4924      	ldr	r1, [pc, #144]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004804:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004806:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004808:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800480c:	4302      	orrs	r2, r0
 800480e:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6)
 8004810:	045a      	lsls	r2, r3, #17
 8004812:	d521      	bpl.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004814:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8004818:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800481c:	f000 835d 	beq.w	8004eda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8004820:	f200 8295 	bhi.w	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8004824:	b16a      	cbz	r2, 8004842 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004826:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800482a:	f040 829c 	bne.w	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x736>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800482e:	4a19      	ldr	r2, [pc, #100]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004830:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004832:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004838:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800483a:	f7ff fe41 	bl	80044c0 <RCCEx_PLL2_Config>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004842:	2e00      	cmp	r6, #0
 8004844:	f040 8290 	bne.w	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x738>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004848:	4912      	ldr	r1, [pc, #72]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800484a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800484e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004850:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8004854:	4302      	orrs	r2, r0
 8004856:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN)
 8004858:	041f      	lsls	r7, r3, #16
 800485a:	d50e      	bpl.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch(PeriphClkInit->FdcanClockSelection)
 800485c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800485e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8004862:	f000 8346 	beq.w	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 8004866:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800486a:	f000 81be 	beq.w	8004bea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800486e:	2a00      	cmp	r2, #0
 8004870:	f000 81c5 	beq.w	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      ret = HAL_ERROR;
 8004874:	2601      	movs	r6, #1
      status |= ret;
 8004876:	4335      	orrs	r5, r6
 8004878:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC)
 800487a:	01d8      	lsls	r0, r3, #7
 800487c:	d520      	bpl.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x290>
    switch(PeriphClkInit->FmcClockSelection)
 800487e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004880:	2a03      	cmp	r2, #3
 8004882:	f200 82a0 	bhi.w	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x796>
 8004886:	e8df f012 	tbh	[pc, r2, lsl #1]
 800488a:	0011      	.short	0x0011
 800488c:	000702e7 	.word	0x000702e7
 8004890:	0011      	.short	0x0011
 8004892:	bf00      	nop
 8004894:	58024400 	.word	0x58024400
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004898:	4a47      	ldr	r2, [pc, #284]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800489a:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800489c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800489e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80048a4:	f7ff fe0c 	bl	80044c0 <RCCEx_PLL2_Config>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80048ac:	2e00      	cmp	r6, #0
 80048ae:	f040 828b 	bne.w	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x798>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80048b2:	4941      	ldr	r1, [pc, #260]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80048b4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80048b6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80048b8:	f022 0203 	bic.w	r2, r2, #3
 80048bc:	4302      	orrs	r2, r0
 80048be:	64ca      	str	r2, [r1, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 80048c0:	0259      	lsls	r1, r3, #9
 80048c2:	f100 81d5 	bmi.w	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x640>
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16)
 80048c6:	07df      	lsls	r7, r3, #31
 80048c8:	d543      	bpl.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x322>
    switch(PeriphClkInit->Usart16ClockSelection)
 80048ca:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80048cc:	2a28      	cmp	r2, #40	; 0x28
 80048ce:	f200 8276 	bhi.w	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80048d2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80048d6:	0034      	.short	0x0034
 80048d8:	02740274 	.word	0x02740274
 80048dc:	02740274 	.word	0x02740274
 80048e0:	02740274 	.word	0x02740274
 80048e4:	02d20274 	.word	0x02d20274
 80048e8:	02740274 	.word	0x02740274
 80048ec:	02740274 	.word	0x02740274
 80048f0:	02740274 	.word	0x02740274
 80048f4:	00290274 	.word	0x00290274
 80048f8:	02740274 	.word	0x02740274
 80048fc:	02740274 	.word	0x02740274
 8004900:	02740274 	.word	0x02740274
 8004904:	00340274 	.word	0x00340274
 8004908:	02740274 	.word	0x02740274
 800490c:	02740274 	.word	0x02740274
 8004910:	02740274 	.word	0x02740274
 8004914:	00340274 	.word	0x00340274
 8004918:	02740274 	.word	0x02740274
 800491c:	02740274 	.word	0x02740274
 8004920:	02740274 	.word	0x02740274
 8004924:	00340274 	.word	0x00340274
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004928:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800492a:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 800492e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004930:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004934:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004936:	f7ff fe1f 	bl	8004578 <RCCEx_PLL3_Config>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800493e:	2e00      	cmp	r6, #0
 8004940:	f040 823e 	bne.w	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x790>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004944:	491c      	ldr	r1, [pc, #112]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004946:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004948:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800494a:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800494e:	4302      	orrs	r2, r0
 8004950:	654a      	str	r2, [r1, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578)
 8004952:	0798      	lsls	r0, r3, #30
 8004954:	d520      	bpl.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004956:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004958:	2a05      	cmp	r2, #5
 800495a:	f200 8208 	bhi.w	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800495e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004962:	0011      	.short	0x0011
 8004964:	00060281 	.word	0x00060281
 8004968:	00110011 	.word	0x00110011
 800496c:	0011      	.short	0x0011
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 800496e:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004970:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004974:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004976:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800497a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800497c:	f7ff fdfc 	bl	8004578 <RCCEx_PLL3_Config>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004984:	2e00      	cmp	r6, #0
 8004986:	f040 81f3 	bne.w	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x740>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800498a:	490b      	ldr	r1, [pc, #44]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800498c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800498e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004990:	f022 0207 	bic.w	r2, r2, #7
 8004994:	4302      	orrs	r2, r0
 8004996:	654a      	str	r2, [r1, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 8004998:	0759      	lsls	r1, r3, #29
 800499a:	d525      	bpl.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800499c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80049a0:	2a05      	cmp	r2, #5
 80049a2:	f200 8208 	bhi.w	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x786>
 80049a6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80049aa:	0014      	.short	0x0014
 80049ac:	0009024c 	.word	0x0009024c
 80049b0:	00140014 	.word	0x00140014
 80049b4:	0014      	.short	0x0014
 80049b6:	bf00      	nop
 80049b8:	58024400 	.word	0x58024400
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80049bc:	4ab1      	ldr	r2, [pc, #708]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80049be:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80049c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049c8:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80049ca:	f7ff fdd5 	bl	8004578 <RCCEx_PLL3_Config>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80049d2:	2e00      	cmp	r6, #0
 80049d4:	f040 81f0 	bne.w	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x788>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049d8:	49aa      	ldr	r1, [pc, #680]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 80049da:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80049de:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80049e0:	f022 0207 	bic.w	r2, r2, #7
 80049e4:	4302      	orrs	r2, r0
 80049e6:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 80049e8:	069a      	lsls	r2, r3, #26
 80049ea:	d521      	bpl.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x400>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80049ec:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80049f0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80049f4:	f000 8265 	beq.w	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x892>
 80049f8:	f200 81cd 	bhi.w	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x766>
 80049fc:	b16a      	cbz	r2, 8004a1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80049fe:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8004a02:	f040 81d4 	bne.w	8004dae <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a06:	4a9f      	ldr	r2, [pc, #636]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004a08:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a10:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004a12:	f7ff fd55 	bl	80044c0 <RCCEx_PLL2_Config>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004a1a:	2e00      	cmp	r6, #0
 8004a1c:	f040 81c8 	bne.w	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a20:	4998      	ldr	r1, [pc, #608]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004a22:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004a26:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004a28:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8004a2c:	4302      	orrs	r2, r0
 8004a2e:	654a      	str	r2, [r1, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 8004a30:	065f      	lsls	r7, r3, #25
 8004a32:	d521      	bpl.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x448>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004a34:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8004a38:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004a3c:	f000 825f 	beq.w	8004efe <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8004a40:	f200 8199 	bhi.w	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8004a44:	b16a      	cbz	r2, 8004a62 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004a46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004a4a:	f040 81a0 	bne.w	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x75e>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a4e:	4a8d      	ldr	r2, [pc, #564]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004a50:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a58:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004a5a:	f7ff fd31 	bl	80044c0 <RCCEx_PLL2_Config>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004a62:	2e00      	cmp	r6, #0
 8004a64:	f040 8194 	bne.w	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x760>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a68:	4986      	ldr	r1, [pc, #536]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004a6a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8004a6e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004a70:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004a74:	4302      	orrs	r2, r0
 8004a76:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345)
 8004a78:	0618      	lsls	r0, r3, #24
 8004a7a:	d521      	bpl.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004a7c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8004a80:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004a84:	f000 8247 	beq.w	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8004a88:	f200 8151 	bhi.w	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8004a8c:	b16a      	cbz	r2, 8004aaa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004a8e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004a92:	f040 8158 	bne.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x716>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a96:	4a7b      	ldr	r2, [pc, #492]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004a98:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004aa2:	f7ff fd0d 	bl	80044c0 <RCCEx_PLL2_Config>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004aaa:	2e00      	cmp	r6, #0
 8004aac:	f040 814c 	bne.w	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x718>
      __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ab0:	4974      	ldr	r1, [pc, #464]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004ab2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8004ab6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004ab8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004abc:	4302      	orrs	r2, r0
 8004abe:	658a      	str	r2, [r1, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123)
 8004ac0:	0719      	lsls	r1, r3, #28
 8004ac2:	d50b      	bpl.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004ac4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004ac8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004acc:	f000 82ff 	beq.w	80050ce <HAL_RCCEx_PeriphCLKConfig+0xa9e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ad0:	486c      	ldr	r0, [pc, #432]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004ad2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004ad4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	6542      	str	r2, [r0, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 8004adc:	06da      	lsls	r2, r3, #27
 8004ade:	d50b      	bpl.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004ae0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004ae4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004ae8:	f000 82fc 	beq.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004aec:	4865      	ldr	r0, [pc, #404]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004aee:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004af0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004af4:	430a      	orrs	r2, r1
 8004af6:	6582      	str	r2, [r0, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 8004af8:	031f      	lsls	r7, r3, #12
 8004afa:	d50f      	bpl.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
    switch(PeriphClkInit->AdcClockSelection)
 8004afc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8004b00:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004b04:	f000 8086 	beq.w	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8004b08:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8004b0c:	f000 808d 	beq.w	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 8004b10:	2a00      	cmp	r2, #0
 8004b12:	f000 82d1 	beq.w	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      ret = HAL_ERROR;
 8004b16:	2601      	movs	r6, #1
      status |= ret;
 8004b18:	4335      	orrs	r5, r6
 8004b1a:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 8004b1c:	0358      	lsls	r0, r3, #13
 8004b1e:	d510      	bpl.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch(PeriphClkInit->UsbClockSelection)
 8004b20:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004b24:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8004b28:	f000 808b 	beq.w	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004b2c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8004b30:	f000 8092 	beq.w	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x628>
 8004b34:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004b38:	f000 82b8 	beq.w	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa7c>
      ret = HAL_ERROR;
 8004b3c:	2601      	movs	r6, #1
      status |= ret;
 8004b3e:	4335      	orrs	r5, r6
 8004b40:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC)
 8004b42:	03d9      	lsls	r1, r3, #15
 8004b44:	d50a      	bpl.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004b46:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004b48:	2a00      	cmp	r2, #0
 8004b4a:	f000 815f 	beq.w	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 8004b4e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004b52:	f000 816b 	beq.w	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      ret = HAL_ERROR;
 8004b56:	2601      	movs	r6, #1
      status |= ret;
 8004b58:	4335      	orrs	r5, r6
 8004b5a:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 8004b5c:	009a      	lsls	r2, r3, #2
 8004b5e:	f100 80cd 	bmi.w	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 8004b62:	039f      	lsls	r7, r3, #14
 8004b64:	d511      	bpl.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->RngClockSelection)
 8004b66:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004b68:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004b6c:	f000 813f 	beq.w	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7be>
 8004b70:	f240 818e 	bls.w	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004b74:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004b78:	f000 813e 	beq.w	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004b7c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004b80:	f000 813a 	beq.w	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      ret = HAL_ERROR;
 8004b84:	2601      	movs	r6, #1
      status |= ret;
 8004b86:	4335      	orrs	r5, r6
 8004b88:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1)
 8004b8a:	02de      	lsls	r6, r3, #11
 8004b8c:	d506      	bpl.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b8e:	493d      	ldr	r1, [pc, #244]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004b90:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004b92:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004b94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b98:	4302      	orrs	r2, r0
 8004b9a:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1)
 8004b9c:	00d8      	lsls	r0, r3, #3
 8004b9e:	d507      	bpl.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ba0:	4938      	ldr	r1, [pc, #224]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004ba2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8004ba6:	690a      	ldr	r2, [r1, #16]
 8004ba8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bac:	4302      	orrs	r2, r0
 8004bae:	610a      	str	r2, [r1, #16]
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 8004bb0:	0299      	lsls	r1, r3, #10
 8004bb2:	d506      	bpl.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bb4:	4933      	ldr	r1, [pc, #204]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004bb6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004bb8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004bba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004bbe:	4302      	orrs	r2, r0
 8004bc0:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_TIM))
 8004bc2:	005a      	lsls	r2, r3, #1
 8004bc4:	d509      	bpl.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bc6:	4a2f      	ldr	r2, [pc, #188]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004bc8:	6911      	ldr	r1, [r2, #16]
 8004bca:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004bce:	6111      	str	r1, [r2, #16]
 8004bd0:	6911      	ldr	r1, [r2, #16]
 8004bd2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8004bd6:	4301      	orrs	r1, r0
 8004bd8:	6111      	str	r1, [r2, #16]
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_CKPER))
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f2c0 809b 	blt.w	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 8004be0:	1c28      	adds	r0, r5, #0
 8004be2:	bf18      	it	ne
 8004be4:	2001      	movne	r0, #1
}
 8004be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bea:	4a26      	ldr	r2, [pc, #152]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004bec:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004bf6:	f7ff fc63 	bl	80044c0 <RCCEx_PLL2_Config>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004bfe:	2e00      	cmp	r6, #0
 8004c00:	f47f ae39 	bne.w	8004876 <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c04:	491f      	ldr	r1, [pc, #124]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004c06:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004c08:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004c0a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c0e:	4302      	orrs	r2, r0
 8004c10:	650a      	str	r2, [r1, #80]	; 0x50
 8004c12:	e632      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004c16:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004c1a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c20:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004c22:	f7ff fca9 	bl	8004578 <RCCEx_PLL3_Config>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004c2a:	2e00      	cmp	r6, #0
 8004c2c:	f47f af74 	bne.w	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c30:	4914      	ldr	r1, [pc, #80]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004c32:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8004c36:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004c38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004c3c:	4302      	orrs	r2, r0
 8004c3e:	658a      	str	r2, [r1, #88]	; 0x58
 8004c40:	e76c      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c42:	4a10      	ldr	r2, [pc, #64]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004c44:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004c50:	f7ff fc92 	bl	8004578 <RCCEx_PLL3_Config>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004c58:	2e00      	cmp	r6, #0
 8004c5a:	f47f af70 	bne.w	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c5e:	4909      	ldr	r1, [pc, #36]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8004c60:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004c64:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004c66:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004c6a:	4302      	orrs	r2, r0
 8004c6c:	654a      	str	r2, [r1, #84]	; 0x54
 8004c6e:	e768      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x512>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c72:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c74:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c7a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004c7c:	f7fd ff7c 	bl	8002b78 <HAL_GetTick>
 8004c80:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c82:	e00a      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c84:	58024400 	.word	0x58024400
 8004c88:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8c:	f7fd ff74 	bl	8002b78 <HAL_GetTick>
 8004c90:	eba0 0008 	sub.w	r0, r0, r8
 8004c94:	2864      	cmp	r0, #100	; 0x64
 8004c96:	f200 826c 	bhi.w	8005172 <HAL_RCCEx_PeriphCLKConfig+0xb42>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	05da      	lsls	r2, r3, #23
 8004c9e:	d5f5      	bpl.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    if(ret == HAL_OK)
 8004ca0:	2e00      	cmp	r6, #0
 8004ca2:	f040 8267 	bne.w	8005174 <HAL_RCCEx_PeriphCLKConfig+0xb44>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ca6:	4ab0      	ldr	r2, [pc, #704]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004ca8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004cac:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004cae:	4059      	eors	r1, r3
 8004cb0:	f411 7f40 	tst.w	r1, #768	; 0x300
 8004cb4:	d00b      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x69e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb6:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cb8:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cba:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cbe:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004cc2:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc4:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8004cc6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004cca:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004ccc:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd2:	f000 826a 	beq.w	80051aa <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004cda:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004cde:	f000 825a 	beq.w	8005196 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8004ce2:	49a1      	ldr	r1, [pc, #644]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004ce4:	690a      	ldr	r2, [r1, #16]
 8004ce6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004cea:	610a      	str	r2, [r1, #16]
 8004cec:	4a9e      	ldr	r2, [pc, #632]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	e5e4      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004cfc:	4a9a      	ldr	r2, [pc, #616]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004cfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004d02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d08:	62d3      	str	r3, [r2, #44]	; 0x2c
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004d0a:	f7ff fc35 	bl	8004578 <RCCEx_PLL3_Config>
 8004d0e:	4305      	orrs	r5, r0
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	b2ed      	uxtb	r5, r5
 8004d14:	e725      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x532>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d16:	4a94      	ldr	r2, [pc, #592]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004d18:	1c28      	adds	r0, r5, #0
 8004d1a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004d1c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004d1e:	bf18      	it	ne
 8004d20:	2001      	movne	r0, #1
 8004d22:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004d26:	430b      	orrs	r3, r1
 8004d28:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004d2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004d32:	f43f aeba 	beq.w	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004d36:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8004d3a:	f43f aeb6 	beq.w	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004d3e:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8004d42:	f43f aeb2 	beq.w	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x47a>
      ret = HAL_ERROR;
 8004d46:	2601      	movs	r6, #1
      status |= ret;
 8004d48:	4335      	orrs	r5, r6
 8004d4a:	b2ed      	uxtb	r5, r5
 8004d4c:	e6b8      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004d4e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004d52:	f43f ad76 	beq.w	8004842 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004d56:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004d5a:	f43f ad72 	beq.w	8004842 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004d5e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8004d62:	f43f ad6e 	beq.w	8004842 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = HAL_ERROR;
 8004d66:	2601      	movs	r6, #1
      status |= ret;
 8004d68:	4335      	orrs	r5, r6
 8004d6a:	b2ed      	uxtb	r5, r5
 8004d6c:	e574      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = HAL_ERROR;
 8004d6e:	2601      	movs	r6, #1
      status |= ret;
 8004d70:	4335      	orrs	r5, r6
 8004d72:	b2ed      	uxtb	r5, r5
 8004d74:	e610      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004d76:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004d7a:	f43f ae72 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004d7e:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8004d82:	f43f ae6e 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004d86:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004d8a:	f43f ae6a 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x432>
      ret = HAL_ERROR;
 8004d8e:	2601      	movs	r6, #1
      status |= ret;
 8004d90:	4335      	orrs	r5, r6
 8004d92:	b2ed      	uxtb	r5, r5
 8004d94:	e670      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x448>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004d96:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004d9a:	f43f ae3e 	beq.w	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004d9e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004da2:	f43f ae3a 	beq.w	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004da6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8004daa:	f43f ae36 	beq.w	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      ret = HAL_ERROR;
 8004dae:	2601      	movs	r6, #1
      status |= ret;
 8004db0:	4335      	orrs	r5, r6
 8004db2:	b2ed      	uxtb	r5, r5
 8004db4:	e63c      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x400>
      ret = HAL_ERROR;
 8004db6:	2601      	movs	r6, #1
      status |= ret;
 8004db8:	4335      	orrs	r5, r6
 8004dba:	b2ed      	uxtb	r5, r5
 8004dbc:	e614      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = HAL_ERROR;
 8004dbe:	2601      	movs	r6, #1
      status |= ret;
 8004dc0:	4335      	orrs	r5, r6
 8004dc2:	b2ed      	uxtb	r5, r5
 8004dc4:	e5c5      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x322>
      ret = HAL_ERROR;
 8004dc6:	2601      	movs	r6, #1
      status |= ret;
 8004dc8:	4335      	orrs	r5, r6
 8004dca:	b2ed      	uxtb	r5, r5
 8004dcc:	e578      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x290>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004dce:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8004dd2:	f43f ad13 	beq.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004dd6:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8004dda:	f43f ad0f 	beq.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004dde:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8004de2:	f43f ad0b 	beq.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      ret = HAL_ERROR;
 8004de6:	2601      	movs	r6, #1
      status |= ret;
 8004de8:	4335      	orrs	r5, r6
 8004dea:	b2ed      	uxtb	r5, r5
 8004dec:	e510      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dee:	485e      	ldr	r0, [pc, #376]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004df0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004df2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004df6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8004df8:	2e00      	cmp	r6, #0
 8004dfa:	f47f aec4 	bne.w	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x556>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dfe:	485a      	ldr	r0, [pc, #360]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004e00:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8004e02:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004e06:	430a      	orrs	r2, r1
 8004e08:	6542      	str	r2, [r0, #84]	; 0x54
 8004e0a:	e6be      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x55a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 8004e0c:	4956      	ldr	r1, [pc, #344]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004e0e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004e10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004e14:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8004e16:	2e00      	cmp	r6, #0
 8004e18:	f47f ae9e 	bne.w	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x528>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e1c:	4952      	ldr	r1, [pc, #328]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004e1e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004e20:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004e22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e26:	4302      	orrs	r2, r0
 8004e28:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004e2a:	e697      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e2c:	4a4e      	ldr	r2, [pc, #312]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004e2e:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e36:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004e38:	f7ff fb42 	bl	80044c0 <RCCEx_PLL2_Config>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	4606      	mov	r6, r0
      break;
 8004e40:	e7e9      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e42:	4a49      	ldr	r2, [pc, #292]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004e44:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004e4e:	f7ff fb37 	bl	80044c0 <RCCEx_PLL2_Config>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	4606      	mov	r6, r0
      break;
 8004e56:	e5bc      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e58:	4943      	ldr	r1, [pc, #268]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004e5a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004e5c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004e60:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8004e62:	e523      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e64:	4a40      	ldr	r2, [pc, #256]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004e66:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004e70:	f7ff fb26 	bl	80044c0 <RCCEx_PLL2_Config>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	4606      	mov	r6, r0
      break;
 8004e78:	e584      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e7a:	4a3b      	ldr	r2, [pc, #236]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004e7c:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e84:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004e86:	f7ff fb1b 	bl	80044c0 <RCCEx_PLL2_Config>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	4606      	mov	r6, r0
      break;
 8004e8e:	e556      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    switch(PeriphClkInit->RngClockSelection)
 8004e90:	2a00      	cmp	r2, #0
 8004e92:	f47f ae77 	bne.w	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004e96:	e7af      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e98:	4a33      	ldr	r2, [pc, #204]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004e9a:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004ea4:	f7ff fb0c 	bl	80044c0 <RCCEx_PLL2_Config>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004eac:	2e00      	cmp	r6, #0
 8004eae:	f47f ac67 	bne.w	8004780 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004eb2:	492d      	ldr	r1, [pc, #180]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004eb4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004eb6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004eb8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004ebc:	4302      	orrs	r2, r0
 8004ebe:	64ca      	str	r2, [r1, #76]	; 0x4c
 8004ec0:	e460      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004ec2:	4a29      	ldr	r2, [pc, #164]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004ec4:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004ec8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ece:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004ed0:	f7ff fb52 	bl	8004578 <RCCEx_PLL3_Config>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	4606      	mov	r6, r0
      break;
 8004ed8:	e59f      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004eda:	4a23      	ldr	r2, [pc, #140]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004edc:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004ee0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ee2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004ee8:	f7ff fb46 	bl	8004578 <RCCEx_PLL3_Config>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	4606      	mov	r6, r0
      break;
 8004ef0:	e4a7      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 8004ef2:	491d      	ldr	r1, [pc, #116]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004ef4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004ef6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004efa:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8004efc:	e67f      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004efe:	4a1a      	ldr	r2, [pc, #104]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004f00:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004f04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004f0c:	f7ff fb34 	bl	8004578 <RCCEx_PLL3_Config>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	4606      	mov	r6, r0
      break;
 8004f14:	e5a5      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x432>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004f16:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004f18:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004f1c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f22:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004f24:	f7ff fb28 	bl	8004578 <RCCEx_PLL3_Config>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	4606      	mov	r6, r0
      break;
 8004f2c:	e5bd      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x47a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f2e:	462e      	mov	r6, r5
    if(ret == HAL_OK)
 8004f30:	bb4e      	cbnz	r6, 8004f86 <HAL_RCCEx_PeriphCLKConfig+0x956>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f32:	490d      	ldr	r1, [pc, #52]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004f34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f36:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004f38:	f022 0207 	bic.w	r2, r2, #7
 8004f3c:	4302      	orrs	r2, r0
 8004f3e:	650a      	str	r2, [r1, #80]	; 0x50
 8004f40:	f7ff bba1 	b.w	8004686 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f44:	4908      	ldr	r1, [pc, #32]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004f46:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004f48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004f4c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8004f4e:	e7ad      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004f50:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x938>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004f52:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8004f56:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f5c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004f5e:	f7ff fb0b 	bl	8004578 <RCCEx_PLL3_Config>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	4606      	mov	r6, r0
      break;
 8004f66:	e449      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004f68:	58024400 	.word	0x58024400
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004f6c:	4a9d      	ldr	r2, [pc, #628]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004f6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8004f72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f78:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004f7a:	f7ff fafd 	bl	8004578 <RCCEx_PLL3_Config>
 8004f7e:	4606      	mov	r6, r0
 8004f80:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004f82:	2e00      	cmp	r6, #0
 8004f84:	d0d5      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x902>
      status |= ret;
 8004f86:	4335      	orrs	r5, r6
 8004f88:	b2ed      	uxtb	r5, r5
 8004f8a:	f7ff bb7c 	b.w	8004686 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8e:	4995      	ldr	r1, [pc, #596]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      break;
 8004f90:	462e      	mov	r6, r5
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f92:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004f94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004f98:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8004f9a:	e7c9      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x900>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f9c:	4a91      	ldr	r2, [pc, #580]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004f9e:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fa0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004fa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8004fa8:	f7ff fa8a 	bl	80044c0 <RCCEx_PLL2_Config>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	4606      	mov	r6, r0
      break;
 8004fb0:	e7be      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x900>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb2:	498c      	ldr	r1, [pc, #560]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 8004fb4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004fb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004fba:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8004fbc:	2e00      	cmp	r6, #0
 8004fbe:	f43f ab7d 	beq.w	80046bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      status |= ret;
 8004fc2:	4335      	orrs	r5, r6
 8004fc4:	b2ed      	uxtb	r5, r5
 8004fc6:	f7ff bb80 	b.w	80046ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004fca:	4a86      	ldr	r2, [pc, #536]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004fcc:	3024      	adds	r0, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8004fce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8004fd6:	f7ff facf 	bl	8004578 <RCCEx_PLL3_Config>
 8004fda:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	f000 80d6 	beq.w	800518e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	f7ff bb41 	b.w	800466a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe8:	497e      	ldr	r1, [pc, #504]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 8004fea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004fec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ff0:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8004ff2:	2e00      	cmp	r6, #0
 8004ff4:	f43f abad 	beq.w	8004752 <HAL_RCCEx_PeriphCLKConfig+0x122>
      status |= ret;
 8004ff8:	4335      	orrs	r5, r6
 8004ffa:	b2ed      	uxtb	r5, r5
 8004ffc:	f7ff bbb1 	b.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005000:	4978      	ldr	r1, [pc, #480]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 8005002:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005004:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005008:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800500a:	2e00      	cmp	r6, #0
 800500c:	f43f ab7b 	beq.w	8004706 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      status |= ret;
 8005010:	4335      	orrs	r5, r6
 8005012:	b2ed      	uxtb	r5, r5
 8005014:	f7ff bb7f 	b.w	8004716 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005018:	4972      	ldr	r1, [pc, #456]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 800501a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800501c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005020:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005022:	2e00      	cmp	r6, #0
 8005024:	f43f abcb 	beq.w	80047be <HAL_RCCEx_PeriphCLKConfig+0x18e>
      status |= ret;
 8005028:	4335      	orrs	r5, r6
 800502a:	b2ed      	uxtb	r5, r5
 800502c:	f7ff bbce 	b.w	80047cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8005030:	4a6c      	ldr	r2, [pc, #432]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005032:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8005036:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800503c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800503e:	f7ff fa9b 	bl	8004578 <RCCEx_PLL3_Config>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	4606      	mov	r6, r0
      break;
 8005046:	f7ff bb81 	b.w	800474c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 800504a:	4a66      	ldr	r2, [pc, #408]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800504c:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8005050:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005056:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005058:	f7ff fa8e 	bl	8004578 <RCCEx_PLL3_Config>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	4606      	mov	r6, r0
      break;
 8005060:	f7ff bb29 	b.w	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005064:	4a5f      	ldr	r2, [pc, #380]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8005066:	3004      	adds	r0, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005068:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800506a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800506e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8005070:	f7ff fa26 	bl	80044c0 <RCCEx_PLL2_Config>
 8005074:	4605      	mov	r5, r0
      break;
 8005076:	e7b1      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8005078:	4a5a      	ldr	r2, [pc, #360]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800507a:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 800507e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005080:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005084:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005086:	f7ff fa77 	bl	8004578 <RCCEx_PLL3_Config>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	4606      	mov	r6, r0
      break;
 800508e:	f7ff bb93 	b.w	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8005092:	4a54      	ldr	r2, [pc, #336]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8005094:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8005098:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800509a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800509e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80050a0:	f7ff fa6a 	bl	8004578 <RCCEx_PLL3_Config>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	4606      	mov	r6, r0
      break;
 80050a8:	f7ff bb2a 	b.w	8004700 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ac:	494d      	ldr	r1, [pc, #308]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 80050ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80050b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80050b4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80050b6:	e5cf      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x628>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050b8:	4a4a      	ldr	r2, [pc, #296]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80050ba:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050c2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80050c4:	f7ff f9fc 	bl	80044c0 <RCCEx_PLL2_Config>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	4606      	mov	r6, r0
      break;
 80050cc:	e5ad      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80050ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80050d2:	f7ff fa51 	bl	8004578 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050d6:	4a43      	ldr	r2, [pc, #268]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 80050d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	e4fb      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80050e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80050e8:	f7ff fa46 	bl	8004578 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050ec:	4a3d      	ldr	r2, [pc, #244]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 80050ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	e4fe      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80050fa:	2a00      	cmp	r2, #0
 80050fc:	d144      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xb58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050fe:	4839      	ldr	r0, [pc, #228]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 8005100:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005102:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005106:	62c1      	str	r1, [r0, #44]	; 0x2c
      break;
 8005108:	f7ff baa8 	b.w	800465c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai4AClockSelection)
 800510c:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8005110:	f43f aaf6 	beq.w	8004700 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8005114:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005118:	f43f aaf2 	beq.w	8004700 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      ret = HAL_ERROR;
 800511c:	2601      	movs	r6, #1
      status |= ret;
 800511e:	4335      	orrs	r5, r6
 8005120:	b2ed      	uxtb	r5, r5
 8005122:	f7ff baf8 	b.w	8004716 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8005126:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800512a:	f43f ab45 	beq.w	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800512e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005132:	f43f ab41 	beq.w	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      ret = HAL_ERROR;
 8005136:	2601      	movs	r6, #1
      status |= ret;
 8005138:	4335      	orrs	r5, r6
 800513a:	b2ed      	uxtb	r5, r5
 800513c:	f7ff bb46 	b.w	80047cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8005140:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8005144:	f43f ab02 	beq.w	800474c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005148:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800514c:	f43f aafe 	beq.w	800474c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      ret = HAL_ERROR;
 8005150:	2601      	movs	r6, #1
      status |= ret;
 8005152:	4335      	orrs	r5, r6
 8005154:	b2ed      	uxtb	r5, r5
 8005156:	f7ff bb04 	b.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x132>
    switch(PeriphClkInit->Sai23ClockSelection)
 800515a:	2ac0      	cmp	r2, #192	; 0xc0
 800515c:	f43f aaab 	beq.w	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8005160:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005164:	f43f aaa7 	beq.w	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = HAL_ERROR;
 8005168:	2601      	movs	r6, #1
      status |= ret;
 800516a:	4335      	orrs	r5, r6
 800516c:	b2ed      	uxtb	r5, r5
 800516e:	f7ff baac 	b.w	80046ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = HAL_TIMEOUT;
 8005172:	2603      	movs	r6, #3
      status |= ret;
 8005174:	4335      	orrs	r5, r6
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	b2ed      	uxtb	r5, r5
 800517a:	f7ff bba4 	b.w	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->QspiClockSelection)
 800517e:	2a00      	cmp	r2, #0
 8005180:	f43f ae94 	beq.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8005184:	f7ff bafb 	b.w	800477e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = HAL_ERROR;
 8005188:	2501      	movs	r5, #1
 800518a:	f7ff ba6e 	b.w	800466a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800518e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	f7ff ba63 	b.w	800465c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005196:	4813      	ldr	r0, [pc, #76]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
 8005198:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>)
 800519a:	6901      	ldr	r1, [r0, #16]
 800519c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80051a0:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80051a4:	430a      	orrs	r2, r1
 80051a6:	6102      	str	r2, [r0, #16]
 80051a8:	e5a0      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x6bc>
        tickstart = HAL_GetTick();
 80051aa:	f7fd fce5 	bl	8002b78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ae:	4f0d      	ldr	r7, [pc, #52]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
        tickstart = HAL_GetTick();
 80051b0:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b6:	e005      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xb94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b8:	f7fd fcde 	bl	8002b78 <HAL_GetTick>
 80051bc:	eba0 0009 	sub.w	r0, r0, r9
 80051c0:	4540      	cmp	r0, r8
 80051c2:	d805      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051c6:	079b      	lsls	r3, r3, #30
 80051c8:	d5f6      	bpl.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80051ca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80051ce:	e582      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
        status |= ret;
 80051d0:	f045 0503 	orr.w	r5, r5, #3
 80051d4:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 80051d6:	2603      	movs	r6, #3
        status |= ret;
 80051d8:	b2ed      	uxtb	r5, r5
 80051da:	f7ff bb74 	b.w	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
      ret = HAL_ERROR;
 80051de:	2601      	movs	r6, #1
 80051e0:	e6d1      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x956>
 80051e2:	bf00      	nop
 80051e4:	58024400 	.word	0x58024400
 80051e8:	00ffffcf 	.word	0x00ffffcf

080051ec <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80051ec:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 80051ee:	f7ff f8f5 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80051f4:	2210      	movs	r2, #16
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	fa92 f2a2 	rbit	r2, r2
 80051fc:	fab2 f282 	clz	r2, r2
 8005200:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005204:	4903      	ldr	r1, [pc, #12]	; (8005214 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005206:	40d3      	lsrs	r3, r2
 8005208:	5ccb      	ldrb	r3, [r1, r3]
}
 800520a:	40d8      	lsrs	r0, r3
 800520c:	bd08      	pop	{r3, pc}
 800520e:	bf00      	nop
 8005210:	58024400 	.word	0x58024400
 8005214:	080082ac 	.word	0x080082ac

08005218 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8005218:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800521a:	4c49      	ldr	r4, [pc, #292]	; (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800521c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800521e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8005220:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005222:	f005 0503 	and.w	r5, r5, #3
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005226:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8005228:	f3c1 3105 	ubfx	r1, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 800522c:	f002 0210 	and.w	r2, r2, #16
  switch (pllsource)
 8005230:	2d01      	cmp	r5, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005232:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8005236:	fb02 f203 	mul.w	r2, r2, r3
 800523a:	ee07 2a90 	vmov	s15, r2
 800523e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pllsource)
 8005242:	d002      	beq.n	800524a <HAL_RCCEx_GetPLL2ClockFreq+0x32>
 8005244:	d351      	bcc.n	80052ea <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
 8005246:	2d02      	cmp	r5, #2
 8005248:	d044      	beq.n	80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0xbc>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800524a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800524c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005250:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8005254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	4b3a      	ldr	r3, [pc, #232]	; (8005348 <HAL_RCCEx_GetPLL2ClockFreq+0x130>)
 800525e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005262:	fbb3 f3f1 	udiv	r3, r3, r1
 8005266:	eee7 7a06 	vfma.f32	s15, s14, s12
 800526a:	ee07 3a10 	vmov	s14, r3
 800526e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005276:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 800527a:	4a31      	ldr	r2, [pc, #196]	; (8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800527c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800527e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005282:	3301      	adds	r3, #1
 8005284:	ee07 3a10 	vmov	s14, r3
 8005288:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800528c:	bc30      	pop	{r4, r5}
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 800528e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005292:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005296:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 800529a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800529c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80052a0:	3301      	adds	r3, #1
 80052a2:	ee07 3a10 	vmov	s14, r3
 80052a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80052aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80052ae:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80052b2:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 80052b6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80052b8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80052bc:	3301      	adds	r3, #1
 80052be:	ee07 3a10 	vmov	s14, r3
 80052c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80052c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80052ca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80052ce:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80052d2:	4770      	bx	lr
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80052d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052da:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 80052de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	4b19      	ldr	r3, [pc, #100]	; (800534c <HAL_RCCEx_GetPLL2ClockFreq+0x134>)
 80052e8:	e7b9      	b.n	800525e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	069b      	lsls	r3, r3, #26
 80052ee:	d51c      	bpl.n	800532a <HAL_RCCEx_GetPLL2ClockFreq+0x112>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052f0:	6823      	ldr	r3, [r4, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80052f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80052f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052f8:	f3c3 04c1 	ubfx	r4, r3, #3, #2
 80052fc:	4b14      	ldr	r3, [pc, #80]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80052fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005302:	eddf 5a10 	vldr	s11, [pc, #64]	; 8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005306:	40e3      	lsrs	r3, r4
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8005308:	ee07 2a90 	vmov	s15, r2
 800530c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005310:	fbb3 f3f1 	udiv	r3, r3, r1
 8005314:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005320:	ee36 7a86 	vadd.f32	s14, s13, s12
 8005324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005328:	e7a7      	b.n	800527a <HAL_RCCEx_GetPLL2ClockFreq+0x62>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800532a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800532c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005330:	ed9f 6a04 	vldr	s12, [pc, #16]	; 8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8005334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
 800533e:	e78e      	b.n	800525e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005340:	58024400 	.word	0x58024400
 8005344:	39000000 	.word	0x39000000
 8005348:	003d0900 	.word	0x003d0900
 800534c:	007a1200 	.word	0x007a1200
 8005350:	03d09000 	.word	0x03d09000

08005354 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8005354:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005356:	4c49      	ldr	r4, [pc, #292]	; (800547c <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8005358:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800535a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800535c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800535e:	f005 0503 	and.w	r5, r5, #3
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005362:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005364:	f3c1 5105 	ubfx	r1, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8005368:	f402 7280 	and.w	r2, r2, #256	; 0x100
  switch (pllsource)
 800536c:	2d01      	cmp	r5, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800536e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8005372:	fb02 f203 	mul.w	r2, r2, r3
 8005376:	ee07 2a90 	vmov	s15, r2
 800537a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pllsource)
 800537e:	d002      	beq.n	8005386 <HAL_RCCEx_GetPLL3ClockFreq+0x32>
 8005380:	d351      	bcc.n	8005426 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
 8005382:	2d02      	cmp	r5, #2
 8005384:	d044      	beq.n	8005410 <HAL_RCCEx_GetPLL3ClockFreq+0xbc>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800538c:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8005390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005394:	ee07 3a90 	vmov	s15, r3
 8005398:	4b3a      	ldr	r3, [pc, #232]	; (8005484 <HAL_RCCEx_GetPLL3ClockFreq+0x130>)
 800539a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800539e:	fbb3 f3f1 	udiv	r3, r3, r1
 80053a2:	eee7 7a06 	vfma.f32	s15, s14, s12
 80053a6:	ee07 3a10 	vmov	s14, r3
 80053aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80053ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b2:	ee67 7a87 	vmul.f32	s15, s15, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 80053b6:	4a31      	ldr	r2, [pc, #196]	; (800547c <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 80053b8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80053ba:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80053be:	3301      	adds	r3, #1
 80053c0:	ee07 3a10 	vmov	s14, r3
 80053c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80053c8:	bc30      	pop	{r4, r5}
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 80053ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80053ce:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80053d2:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 80053d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80053d8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80053dc:	3301      	adds	r3, #1
 80053de:	ee07 3a10 	vmov	s14, r3
 80053e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80053e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80053ea:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80053ee:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 80053f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80053f4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80053f8:	3301      	adds	r3, #1
 80053fa:	ee07 3a10 	vmov	s14, r3
 80053fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005402:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005406:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800540a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800540e:	4770      	bx	lr
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005410:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005416:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 800541a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	4b19      	ldr	r3, [pc, #100]	; (8005488 <HAL_RCCEx_GetPLL3ClockFreq+0x134>)
 8005424:	e7b9      	b.n	800539a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	069b      	lsls	r3, r3, #26
 800542a:	d51c      	bpl.n	8005466 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800542c:	6823      	ldr	r3, [r4, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800542e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005432:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005434:	f3c3 04c1 	ubfx	r4, r3, #3, #2
 8005438:	4b14      	ldr	r3, [pc, #80]	; (800548c <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800543a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800543e:	eddf 5a10 	vldr	s11, [pc, #64]	; 8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005442:	40e3      	lsrs	r3, r4
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005444:	ee07 2a90 	vmov	s15, r2
 8005448:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800544c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005450:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800545c:	ee36 7a86 	vadd.f32	s14, s13, s12
 8005460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005464:	e7a7      	b.n	80053b6 <HAL_RCCEx_GetPLL3ClockFreq+0x62>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8005466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800546c:	ed9f 6a04 	vldr	s12, [pc, #16]	; 8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8005470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005474:	ee07 3a90 	vmov	s15, r3
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
 800547a:	e78e      	b.n	800539a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800547c:	58024400 	.word	0x58024400
 8005480:	39000000 	.word	0x39000000
 8005484:	003d0900 	.word	0x003d0900
 8005488:	007a1200 	.word	0x007a1200
 800548c:	03d09000 	.word	0x03d09000

08005490 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8005490:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8005492:	f7fe fe2d 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8005498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	fa92 f2a2 	rbit	r2, r2
 80054a2:	fab2 f282 	clz	r2, r2
 80054a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054aa:	4904      	ldr	r1, [pc, #16]	; (80054bc <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80054ac:	40d3      	lsrs	r3, r2
 80054ae:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 80054b0:	5ccb      	ldrb	r3, [r1, r3]
 80054b2:	40d8      	lsrs	r0, r3
 80054b4:	6010      	str	r0, [r2, #0]
}
 80054b6:	bd08      	pop	{r3, pc}
 80054b8:	58024400 	.word	0x58024400
 80054bc:	080082ac 	.word	0x080082ac
 80054c0:	20000094 	.word	0x20000094

080054c4 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80054c4:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80054c6:	492c      	ldr	r1, [pc, #176]	; (8005578 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 80054c8:	695a      	ldr	r2, [r3, #20]
{
 80054ca:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80054cc:	699c      	ldr	r4, [r3, #24]
 80054ce:	f044 0408 	orr.w	r4, r4, #8
 80054d2:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80054d4:	699c      	ldr	r4, [r3, #24]
 80054d6:	f044 0410 	orr.w	r4, r4, #16
 80054da:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 80054dc:	681c      	ldr	r4, [r3, #0]
 80054de:	f024 0401 	bic.w	r4, r4, #1
 80054e2:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80054e4:	691c      	ldr	r4, [r3, #16]
 80054e6:	4021      	ands	r1, r4
 80054e8:	6119      	str	r1, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN);
 80054ea:	6899      	ldr	r1, [r3, #8]
 80054ec:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80054f0:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054f2:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 80054f6:	2904      	cmp	r1, #4
 80054f8:	d001      	beq.n	80054fe <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != RESET)
 80054fa:	0691      	lsls	r1, r2, #26
 80054fc:	d430      	bmi.n	8005560 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80054fe:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8005502:	2903      	cmp	r1, #3
 8005504:	d001      	beq.n	800550a <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8005506:	0654      	lsls	r4, r2, #25
 8005508:	d41f      	bmi.n	800554a <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != RESET)
 800550a:	0591      	lsls	r1, r2, #22
 800550c:	d509      	bpl.n	8005522 <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800550e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8005512:	f041 0101 	orr.w	r1, r1, #1
 8005516:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800551a:	6999      	ldr	r1, [r3, #24]
 800551c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005520:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != RESET)
 8005522:	05d2      	lsls	r2, r2, #23
 8005524:	d509      	bpl.n	800553a <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005526:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800552a:	f042 0208 	orr.w	r2, r2, #8
 800552e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005538:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = 0U;
 800553a:	2300      	movs	r3, #0
  hspi->RxXferCount = 0U;
}
 800553c:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = 0U;
 8005540:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = 0U;
 8005544:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8005548:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800554a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800554e:	f041 0104 	orr.w	r1, r1, #4
 8005552:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005556:	6999      	ldr	r1, [r3, #24]
 8005558:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800555c:	6199      	str	r1, [r3, #24]
 800555e:	e7d4      	b.n	800550a <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005560:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8005564:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005568:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800556c:	6999      	ldr	r1, [r3, #24]
 800556e:	f041 0120 	orr.w	r1, r1, #32
 8005572:	6199      	str	r1, [r3, #24]
 8005574:	e7c3      	b.n	80054fe <SPI_CloseTransfer+0x3a>
 8005576:	bf00      	nop
 8005578:	fffffc94 	.word	0xfffffc94

0800557c <HAL_SPI_Init>:
  if (hspi == NULL)
 800557c:	2800      	cmp	r0, #0
 800557e:	f000 80a9 	beq.w	80056d4 <HAL_SPI_Init+0x158>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005582:	4a55      	ldr	r2, [pc, #340]	; (80056d8 <HAL_SPI_Init+0x15c>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005584:	2100      	movs	r1, #0
{
 8005586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005588:	6803      	ldr	r3, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800558a:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800558c:	4293      	cmp	r3, r2
 800558e:	d015      	beq.n	80055bc <HAL_SPI_Init+0x40>
 8005590:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8005594:	4293      	cmp	r3, r2
 8005596:	d011      	beq.n	80055bc <HAL_SPI_Init+0x40>
 8005598:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800559c:	4293      	cmp	r3, r2
 800559e:	d00d      	beq.n	80055bc <HAL_SPI_Init+0x40>
 80055a0:	68c2      	ldr	r2, [r0, #12]
 80055a2:	2a0f      	cmp	r2, #15
 80055a4:	d808      	bhi.n	80055b8 <HAL_SPI_Init+0x3c>
  *               the configuration information for SPI module.
  * @retval Packet size occuppied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80055a6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize     >>SPI_CFG1_DSIZE_Pos) + 1;

  /* Convert data size to Byte */
  data_size = (data_size+7)/8;
 80055a8:	f102 0508 	add.w	r5, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80055ac:	094c      	lsrs	r4, r1, #5
  data_size = (data_size+7)/8;
 80055ae:	08ed      	lsrs	r5, r5, #3

  return data_size * fifo_threashold;
 80055b0:	fb04 5505 	mla	r5, r4, r5, r5
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 80055b4:	2d08      	cmp	r5, #8
 80055b6:	d909      	bls.n	80055cc <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 80055b8:	2001      	movs	r0, #1
 80055ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  data_size = (data_size+7)/8;
 80055bc:	68c2      	ldr	r2, [r0, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80055be:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size+7)/8;
 80055c0:	f102 0508 	add.w	r5, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 80055c4:	094c      	lsrs	r4, r1, #5
  data_size = (data_size+7)/8;
 80055c6:	08ed      	lsrs	r5, r5, #3
  return data_size * fifo_threashold;
 80055c8:	fb04 5505 	mla	r5, r4, r5, r5
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 80055cc:	4e42      	ldr	r6, [pc, #264]	; (80056d8 <HAL_SPI_Init+0x15c>)
 80055ce:	4c43      	ldr	r4, [pc, #268]	; (80056dc <HAL_SPI_Init+0x160>)
 80055d0:	42a3      	cmp	r3, r4
 80055d2:	bf18      	it	ne
 80055d4:	42b3      	cmpne	r3, r6
 80055d6:	d052      	beq.n	800567e <HAL_SPI_Init+0x102>
 80055d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80055dc:	42a3      	cmp	r3, r4
 80055de:	d04e      	beq.n	800567e <HAL_SPI_Init+0x102>
 80055e0:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80055e2:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
 80055e6:	f000 05ff 	and.w	r5, r0, #255	; 0xff
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d050      	beq.n	8005690 <HAL_SPI_Init+0x114>
 80055ee:	f04f 0e00 	mov.w	lr, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 80055f2:	2002      	movs	r0, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80055f4:	69a7      	ldr	r7, [r4, #24]
 80055f6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 80055f8:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80055fc:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	f020 0001 	bic.w	r0, r0, #1
 8005606:	6018      	str	r0, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005608:	6860      	ldr	r0, [r4, #4]
 800560a:	d059      	beq.n	80056c0 <HAL_SPI_Init+0x144>
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800560c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800560e:	ea47 0c06 	orr.w	ip, r7, r6
 8005612:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005614:	6926      	ldr	r6, [r4, #16]
 8005616:	ea4c 0c07 	orr.w	ip, ip, r7
 800561a:	6967      	ldr	r7, [r4, #20]
 800561c:	ea4c 0c06 	orr.w	ip, ip, r6
 8005620:	6a26      	ldr	r6, [r4, #32]
 8005622:	ea4c 0c07 	orr.w	ip, ip, r7
 8005626:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8005628:	ea4c 0c06 	orr.w	ip, ip, r6
 800562c:	68a6      	ldr	r6, [r4, #8]
 800562e:	ea4c 0707 	orr.w	r7, ip, r7
 8005632:	433e      	orrs	r6, r7
 8005634:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8005636:	433e      	orrs	r6, r7
 8005638:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800563a:	433e      	orrs	r6, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800563c:	69e7      	ldr	r7, [r4, #28]
 800563e:	4339      	orrs	r1, r7
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005640:	4306      	orrs	r6, r0
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005642:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005644:	4335      	orrs	r5, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005646:	ea42 020e 	orr.w	r2, r2, lr
 800564a:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800564c:	60dd      	str	r5, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800564e:	bb50      	cbnz	r0, 80056a6 <HAL_SPI_Init+0x12a>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8005656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800565a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8005662:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005666:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800566a:	f022 0201 	bic.w	r2, r2, #1
 800566e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005670:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005672:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005674:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005678:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 800567c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 800567e:	2d10      	cmp	r5, #16
 8005680:	d89a      	bhi.n	80055b8 <HAL_SPI_Init+0x3c>
 8005682:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005684:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
 8005688:	f000 05ff 	and.w	r5, r0, #255	; 0xff
 800568c:	2800      	cmp	r0, #0
 800568e:	d1ae      	bne.n	80055ee <HAL_SPI_Init+0x72>
    hspi->Lock = HAL_UNLOCKED;
 8005690:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8005694:	4620      	mov	r0, r4
 8005696:	f7fc fa93 	bl	8001bc0 <HAL_SPI_MspInit>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	f8d4 e028 	ldr.w	lr, [r4, #40]	; 0x28
 80056a0:	68e2      	ldr	r2, [r4, #12]
 80056a2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80056a4:	e7a5      	b.n	80055f2 <HAL_SPI_Init+0x76>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056a8:	f022 0201 	bic.w	r2, r2, #1
 80056ac:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80056ae:	0242      	lsls	r2, r0, #9
 80056b0:	d5de      	bpl.n	8005670 <HAL_SPI_Init+0xf4>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80056b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056ba:	430a      	orrs	r2, r1
 80056bc:	60da      	str	r2, [r3, #12]
 80056be:	e7d7      	b.n	8005670 <HAL_SPI_Init+0xf4>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80056c0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80056c4:	d1a2      	bne.n	800560c <HAL_SPI_Init+0x90>
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	d1a0      	bne.n	800560c <HAL_SPI_Init+0x90>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80056ca:	681e      	ldr	r6, [r3, #0]
 80056cc:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 80056d0:	601e      	str	r6, [r3, #0]
 80056d2:	e79b      	b.n	800560c <HAL_SPI_Init+0x90>
    return HAL_ERROR;
 80056d4:	2001      	movs	r0, #1
}
 80056d6:	4770      	bx	lr
 80056d8:	40013000 	.word	0x40013000
 80056dc:	40003800 	.word	0x40003800

080056e0 <HAL_SPI_Transmit>:
{
 80056e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 80056e4:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
 80056e8:	2c01      	cmp	r4, #1
 80056ea:	d102      	bne.n	80056f2 <HAL_SPI_Transmit+0x12>
 80056ec:	2002      	movs	r0, #2
 80056ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f2:	461d      	mov	r5, r3
 80056f4:	2301      	movs	r3, #1
 80056f6:	4604      	mov	r4, r0
 80056f8:	4617      	mov	r7, r2
 80056fa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80056fe:	460e      	mov	r6, r1
  tickstart = HAL_GetTick();
 8005700:	f7fd fa3a 	bl	8002b78 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005704:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8005708:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800570a:	2b01      	cmp	r3, #1
 800570c:	d005      	beq.n	800571a <HAL_SPI_Transmit+0x3a>
    __HAL_UNLOCK(hspi);
 800570e:	2300      	movs	r3, #0
    return errorcode;
 8005710:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8005712:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8005716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800571a:	2e00      	cmp	r6, #0
 800571c:	f000 80bc 	beq.w	8005898 <HAL_SPI_Transmit+0x1b8>
 8005720:	fab7 f387 	clz	r3, r7
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	2b00      	cmp	r3, #0
 8005728:	f040 80b6 	bne.w	8005898 <HAL_SPI_Transmit+0x1b8>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800572c:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800572e:	2103      	movs	r1, #3
  hspi->pRxBuffPtr  = NULL;
 8005730:	6663      	str	r3, [r4, #100]	; 0x64
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005732:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005736:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  hspi->RxXferSize  = 0U;
 800573a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800573e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxISR       = NULL;
 8005742:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005744:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxXferCount = Size;
 8005746:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800574a:	65e6      	str	r6, [r4, #92]	; 0x5c
  hspi->RxXferCount = 0U;
 800574c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8005750:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
    SPI_1LINE_TX(hspi);
 8005754:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005756:	f000 8102 	beq.w	800595e <HAL_SPI_Transmit+0x27e>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800575a:	6858      	ldr	r0, [r3, #4]
 800575c:	4a85      	ldr	r2, [pc, #532]	; (8005974 <HAL_SPI_Transmit+0x294>)
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800575e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005760:	4002      	ands	r2, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005762:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005766:	ea42 0207 	orr.w	r2, r2, r7
 800576a:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005774:	f000 80f8 	beq.w	8005968 <HAL_SPI_Transmit+0x288>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005778:	68e2      	ldr	r2, [r4, #12]
 800577a:	2a0f      	cmp	r2, #15
 800577c:	d847      	bhi.n	800580e <HAL_SPI_Transmit+0x12e>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800577e:	2a07      	cmp	r2, #7
 8005780:	d969      	bls.n	8005856 <HAL_SPI_Transmit+0x176>
    while (hspi->TxXferCount > 0U)
 8005782:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8005786:	b292      	uxth	r2, r2
 8005788:	b30a      	cbz	r2, 80057ce <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800578a:	695a      	ldr	r2, [r3, #20]
 800578c:	0792      	lsls	r2, r2, #30
 800578e:	f140 8089 	bpl.w	80058a4 <HAL_SPI_Transmit+0x1c4>
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005792:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8005796:	b292      	uxth	r2, r2
 8005798:	2a01      	cmp	r2, #1
 800579a:	f240 80a3 	bls.w	80058e4 <HAL_SPI_Transmit+0x204>
 800579e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80057a0:	2a00      	cmp	r2, #0
 80057a2:	f000 809f 	beq.w	80058e4 <HAL_SPI_Transmit+0x204>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80057a6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80057a8:	f851 2b04 	ldr.w	r2, [r1], #4
 80057ac:	621a      	str	r2, [r3, #32]
          hspi->TxXferCount-=2;
 80057ae:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80057b2:	65e1      	str	r1, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 80057b4:	3a02      	subs	r2, #2
 80057b6:	b292      	uxth	r2, r2
 80057b8:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 80057bc:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80057c0:	b292      	uxth	r2, r2
 80057c2:	2a00      	cmp	r2, #0
 80057c4:	d1e1      	bne.n	800578a <HAL_SPI_Transmit+0xaa>
 80057c6:	e002      	b.n	80057ce <HAL_SPI_Transmit+0xee>
    if(Timeout != HAL_MAX_DELAY)
 80057c8:	1c69      	adds	r1, r5, #1
 80057ca:	f040 80a6 	bne.w	800591a <HAL_SPI_Transmit+0x23a>
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	0712      	lsls	r2, r2, #28
 80057d2:	d5f9      	bpl.n	80057c8 <HAL_SPI_Transmit+0xe8>
  SPI_CloseTransfer(hspi);
 80057d4:	4620      	mov	r0, r4
 80057d6:	f7ff fe75 	bl	80054c4 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 80057da:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80057dc:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80057de:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057e2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 80057e6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 80057ea:	1ac0      	subs	r0, r0, r3
 80057ec:	bf18      	it	ne
 80057ee:	2001      	movne	r0, #1
 80057f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80057f4:	2d00      	cmp	r5, #0
 80057f6:	f000 8099 	beq.w	800592c <HAL_SPI_Transmit+0x24c>
 80057fa:	1c69      	adds	r1, r5, #1
 80057fc:	d007      	beq.n	800580e <HAL_SPI_Transmit+0x12e>
 80057fe:	f7fd f9bb 	bl	8002b78 <HAL_GetTick>
 8005802:	eba0 0008 	sub.w	r0, r0, r8
 8005806:	4285      	cmp	r5, r0
 8005808:	f240 8090 	bls.w	800592c <HAL_SPI_Transmit+0x24c>
 800580c:	6823      	ldr	r3, [r4, #0]
    while (hspi->TxXferCount > 0U)
 800580e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8005812:	b292      	uxth	r2, r2
 8005814:	2a00      	cmp	r2, #0
 8005816:	d0da      	beq.n	80057ce <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	0790      	lsls	r0, r2, #30
 800581c:	d5ea      	bpl.n	80057f4 <HAL_SPI_Transmit+0x114>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800581e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005820:	f851 2b04 	ldr.w	r2, [r1], #4
 8005824:	621a      	str	r2, [r3, #32]
        hspi->TxXferCount--;
 8005826:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800582a:	65e1      	str	r1, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800582c:	3a01      	subs	r2, #1
 800582e:	b292      	uxth	r2, r2
 8005830:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 8005834:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8005838:	b292      	uxth	r2, r2
 800583a:	2a00      	cmp	r2, #0
 800583c:	d1ec      	bne.n	8005818 <HAL_SPI_Transmit+0x138>
 800583e:	e7c6      	b.n	80057ce <HAL_SPI_Transmit+0xee>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005840:	2d00      	cmp	r5, #0
 8005842:	d073      	beq.n	800592c <HAL_SPI_Transmit+0x24c>
 8005844:	1c68      	adds	r0, r5, #1
 8005846:	d006      	beq.n	8005856 <HAL_SPI_Transmit+0x176>
 8005848:	f7fd f996 	bl	8002b78 <HAL_GetTick>
 800584c:	eba0 0008 	sub.w	r0, r0, r8
 8005850:	4285      	cmp	r5, r0
 8005852:	d96b      	bls.n	800592c <HAL_SPI_Transmit+0x24c>
 8005854:	6823      	ldr	r3, [r4, #0]
    while (hspi->TxXferCount > 0U)
 8005856:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800585a:	b292      	uxth	r2, r2
 800585c:	2a00      	cmp	r2, #0
 800585e:	d0b6      	beq.n	80057ce <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	0796      	lsls	r6, r2, #30
 8005864:	d5ec      	bpl.n	8005840 <HAL_SPI_Transmit+0x160>
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005866:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800586a:	b292      	uxth	r2, r2
 800586c:	2a03      	cmp	r2, #3
 800586e:	d926      	bls.n	80058be <HAL_SPI_Transmit+0x1de>
 8005870:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005872:	2a40      	cmp	r2, #64	; 0x40
 8005874:	d923      	bls.n	80058be <HAL_SPI_Transmit+0x1de>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005876:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005878:	f851 2b04 	ldr.w	r2, [r1], #4
 800587c:	621a      	str	r2, [r3, #32]
          hspi->TxXferCount-=4;
 800587e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005882:	65e1      	str	r1, [r4, #92]	; 0x5c
          hspi->TxXferCount-=4;
 8005884:	3a04      	subs	r2, #4
 8005886:	b292      	uxth	r2, r2
 8005888:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 800588c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8005890:	b292      	uxth	r2, r2
 8005892:	2a00      	cmp	r2, #0
 8005894:	d1e4      	bne.n	8005860 <HAL_SPI_Transmit+0x180>
 8005896:	e79a      	b.n	80057ce <HAL_SPI_Transmit+0xee>
    __HAL_UNLOCK(hspi);
 8005898:	2300      	movs	r3, #0
    return errorcode;
 800589a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800589c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 80058a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	d041      	beq.n	800592c <HAL_SPI_Transmit+0x24c>
 80058a8:	1c6f      	adds	r7, r5, #1
 80058aa:	f43f af6a 	beq.w	8005782 <HAL_SPI_Transmit+0xa2>
 80058ae:	f7fd f963 	bl	8002b78 <HAL_GetTick>
 80058b2:	eba0 0008 	sub.w	r0, r0, r8
 80058b6:	4285      	cmp	r5, r0
 80058b8:	d938      	bls.n	800592c <HAL_SPI_Transmit+0x24c>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	e761      	b.n	8005782 <HAL_SPI_Transmit+0xa2>
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80058be:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80058c2:	b292      	uxth	r2, r2
 80058c4:	2a01      	cmp	r2, #1
 80058c6:	d919      	bls.n	80058fc <HAL_SPI_Transmit+0x21c>
 80058c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80058ca:	b1ba      	cbz	r2, 80058fc <HAL_SPI_Transmit+0x21c>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 80058cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80058ce:	f831 2b02 	ldrh.w	r2, [r1], #2
 80058d2:	841a      	strh	r2, [r3, #32]
          hspi->TxXferCount-=2;
 80058d4:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d8:	65e1      	str	r1, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 80058da:	3a02      	subs	r2, #2
 80058dc:	b292      	uxth	r2, r2
 80058de:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 80058e2:	e7b8      	b.n	8005856 <HAL_SPI_Transmit+0x176>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 80058e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80058e6:	f831 2b02 	ldrh.w	r2, [r1], #2
 80058ea:	841a      	strh	r2, [r3, #32]
          hspi->TxXferCount--;
 80058ec:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f0:	65e1      	str	r1, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 80058f2:	3a01      	subs	r2, #1
 80058f4:	b292      	uxth	r2, r2
 80058f6:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 80058fa:	e742      	b.n	8005782 <HAL_SPI_Transmit+0xa2>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80058fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80058fe:	7812      	ldrb	r2, [r2, #0]
 8005900:	f883 2020 	strb.w	r2, [r3, #32]
          hspi->TxXferCount--;
 8005904:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005908:	6de1      	ldr	r1, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800590a:	3a01      	subs	r2, #1
 800590c:	6823      	ldr	r3, [r4, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800590e:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8005910:	b292      	uxth	r2, r2
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005912:	65e1      	str	r1, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8005914:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 8005918:	e79d      	b.n	8005856 <HAL_SPI_Transmit+0x176>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800591a:	b1cd      	cbz	r5, 8005950 <HAL_SPI_Transmit+0x270>
 800591c:	f7fd f92c 	bl	8002b78 <HAL_GetTick>
 8005920:	eba0 0008 	sub.w	r0, r0, r8
 8005924:	4285      	cmp	r5, r0
 8005926:	d313      	bcc.n	8005950 <HAL_SPI_Transmit+0x270>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	e750      	b.n	80057ce <HAL_SPI_Transmit+0xee>
          SPI_CloseTransfer(hspi);
 800592c:	4620      	mov	r0, r4
 800592e:	f7ff fdc9 	bl	80054c4 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005932:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005936:	2201      	movs	r2, #1
          __HAL_UNLOCK(hspi);
 8005938:	2100      	movs	r1, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800593a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
          __HAL_UNLOCK(hspi);
 800593e:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
          return HAL_ERROR;
 8005942:	4610      	mov	r0, r2
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005944:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005948:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
          return HAL_ERROR;
 800594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005950:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005954:	f043 0320 	orr.w	r3, r3, #32
 8005958:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800595c:	e73a      	b.n	80057d4 <HAL_SPI_Transmit+0xf4>
    SPI_1LINE_TX(hspi);
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	e6f8      	b.n	800575a <HAL_SPI_Transmit+0x7a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	e702      	b.n	8005778 <HAL_SPI_Transmit+0x98>
 8005972:	bf00      	nop
 8005974:	ffff0000 	.word	0xffff0000

08005978 <HAL_TIM_Base_MspInit>:
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop

0800597c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800597c:	6802      	ldr	r2, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 800597e:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005980:	68d3      	ldr	r3, [r2, #12]
 8005982:	f043 0301 	orr.w	r3, r3, #1
 8005986:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8005988:	8813      	ldrh	r3, [r2, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	8013      	strh	r3, [r2, #0]
}
 8005992:	4770      	bx	lr

08005994 <HAL_TIM_OC_DelayElapsedCallback>:
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop

08005998 <HAL_TIM_IC_CaptureCallback>:
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop

0800599c <HAL_TIM_PWM_PulseFinishedCallback>:
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop

080059a0 <HAL_TIM_TriggerCallback>:
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop

080059a4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059a4:	6803      	ldr	r3, [r0, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	0791      	lsls	r1, r2, #30
{
 80059aa:	b510      	push	{r4, lr}
 80059ac:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059ae:	d502      	bpl.n	80059b6 <HAL_TIM_IRQHandler+0x12>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	0792      	lsls	r2, r2, #30
 80059b4:	d465      	bmi.n	8005a82 <HAL_TIM_IRQHandler+0xde>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	0752      	lsls	r2, r2, #29
 80059ba:	d502      	bpl.n	80059c2 <HAL_TIM_IRQHandler+0x1e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	0750      	lsls	r0, r2, #29
 80059c0:	d44c      	bmi.n	8005a5c <HAL_TIM_IRQHandler+0xb8>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	0711      	lsls	r1, r2, #28
 80059c6:	d502      	bpl.n	80059ce <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	0712      	lsls	r2, r2, #28
 80059cc:	d434      	bmi.n	8005a38 <HAL_TIM_IRQHandler+0x94>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	06d0      	lsls	r0, r2, #27
 80059d2:	d502      	bpl.n	80059da <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	06d1      	lsls	r1, r2, #27
 80059d8:	d41e      	bmi.n	8005a18 <HAL_TIM_IRQHandler+0x74>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	07d2      	lsls	r2, r2, #31
 80059de:	d502      	bpl.n	80059e6 <HAL_TIM_IRQHandler+0x42>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	07d0      	lsls	r0, r2, #31
 80059e4:	d46b      	bmi.n	8005abe <HAL_TIM_IRQHandler+0x11a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
      HAL_TIM_PeriodElapsedCallback(htim);
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	0611      	lsls	r1, r2, #24
 80059ea:	d502      	bpl.n	80059f2 <HAL_TIM_IRQHandler+0x4e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	0612      	lsls	r2, r2, #24
 80059f0:	d46d      	bmi.n	8005ace <HAL_TIM_IRQHandler+0x12a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
      HAL_TIMEx_BreakCallback(htim);
    }
  } 
  /* TIM Break input2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	05d0      	lsls	r0, r2, #23
 80059f6:	d502      	bpl.n	80059fe <HAL_TIM_IRQHandler+0x5a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	0611      	lsls	r1, r2, #24
 80059fc:	d46f      	bmi.n	8005ade <HAL_TIM_IRQHandler+0x13a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
      HAL_TIMEx_BreakCallback(htim);
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	0652      	lsls	r2, r2, #25
 8005a02:	d502      	bpl.n	8005a0a <HAL_TIM_IRQHandler+0x66>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	0650      	lsls	r0, r2, #25
 8005a08:	d451      	bmi.n	8005aae <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
      HAL_TIM_TriggerCallback(htim);
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	0691      	lsls	r1, r2, #26
 8005a0e:	d502      	bpl.n	8005a16 <HAL_TIM_IRQHandler+0x72>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	0692      	lsls	r2, r2, #26
 8005a14:	d443      	bmi.n	8005a9e <HAL_TIM_IRQHandler+0xfa>
 8005a16:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a18:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a1c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a20:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8005a22:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a24:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8005a26:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005a2a:	d06c      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2c:	f7ff ffb4 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a30:	2200      	movs	r2, #0
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	7722      	strb	r2, [r4, #28]
 8005a36:	e7d0      	b.n	80059da <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a38:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a3c:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a40:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005a42:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a44:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005a46:	079b      	lsls	r3, r3, #30
 8005a48:	d15a      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	f7ff ffa3 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f7ff ffa4 	bl	800599c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a54:	2200      	movs	r2, #0
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	7722      	strb	r2, [r4, #28]
 8005a5a:	e7b8      	b.n	80059ce <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a5c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a60:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8005a62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a64:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8005a66:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a68:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8005a6a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005a6e:	d144      	bne.n	8005afa <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a70:	f7ff ff90 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	4620      	mov	r0, r4
 8005a76:	f7ff ff91 	bl	800599c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	7722      	strb	r2, [r4, #28]
 8005a80:	e79f      	b.n	80059c2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a82:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a86:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a88:	6119      	str	r1, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8005a8a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a8c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8005a8e:	0799      	lsls	r1, r3, #30
 8005a90:	d02d      	beq.n	8005aee <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	f7ff ff81 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	2200      	movs	r2, #0
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	7722      	strb	r2, [r4, #28]
 8005a9c:	e78b      	b.n	80059b6 <HAL_TIM_IRQHandler+0x12>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a9e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8005aa2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aa4:	611a      	str	r2, [r3, #16]
    }
  }
}
 8005aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8005aaa:	f000 b8bb 	b.w	8005c24 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005aae:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8005ab2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ab4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005ab6:	f7ff ff73 	bl	80059a0 <HAL_TIM_TriggerCallback>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	e7a5      	b.n	8005a0a <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005abe:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ac2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ac4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ac6:	f7fc f82f 	bl	8001b28 <HAL_TIM_PeriodElapsedCallback>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	e78b      	b.n	80059e6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ace:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005ad2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ad4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005ad6:	f000 f8a7 	bl	8005c28 <HAL_TIMEx_BreakCallback>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	e789      	b.n	80059f2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ade:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005ae2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ae4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005ae6:	f000 f89f 	bl	8005c28 <HAL_TIMEx_BreakCallback>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	e787      	b.n	80059fe <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	f7ff ff51 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7ff ff52 	bl	800599c <HAL_TIM_PWM_PulseFinishedCallback>
 8005af8:	e7cd      	b.n	8005a96 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8005afa:	f7ff ff4d 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 8005afe:	e7bc      	b.n	8005a7a <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b00:	f7ff ff4a 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 8005b04:	e7a6      	b.n	8005a54 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	f7ff ff45 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f7ff ff46 	bl	800599c <HAL_TIM_PWM_PulseFinishedCallback>
 8005b10:	e78e      	b.n	8005a30 <HAL_TIM_IRQHandler+0x8c>
 8005b12:	bf00      	nop

08005b14 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b14:	4a2f      	ldr	r2, [pc, #188]	; (8005bd4 <TIM_Base_SetConfig+0xc0>)
 8005b16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8005b1a:	8803      	ldrh	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b1c:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 8005b20:	b29b      	uxth	r3, r3
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b22:	fab2 f282 	clz	r2, r2
{
 8005b26:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b28:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8005b2c:	d028      	beq.n	8005b80 <TIM_Base_SetConfig+0x6c>
 8005b2e:	bb3a      	cbnz	r2, 8005b80 <TIM_Base_SetConfig+0x6c>
 8005b30:	4c29      	ldr	r4, [pc, #164]	; (8005bd8 <TIM_Base_SetConfig+0xc4>)
 8005b32:	42a0      	cmp	r0, r4
 8005b34:	d024      	beq.n	8005b80 <TIM_Base_SetConfig+0x6c>
 8005b36:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005b3a:	42a0      	cmp	r0, r4
 8005b3c:	d020      	beq.n	8005b80 <TIM_Base_SetConfig+0x6c>
 8005b3e:	4d27      	ldr	r5, [pc, #156]	; (8005bdc <TIM_Base_SetConfig+0xc8>)
 8005b40:	4e27      	ldr	r6, [pc, #156]	; (8005be0 <TIM_Base_SetConfig+0xcc>)
 8005b42:	42b0      	cmp	r0, r6
 8005b44:	bf18      	it	ne
 8005b46:	42a8      	cmpne	r0, r5
 8005b48:	bf0c      	ite	eq
 8005b4a:	2401      	moveq	r4, #1
 8005b4c:	2400      	movne	r4, #0
 8005b4e:	d10c      	bne.n	8005b6a <TIM_Base_SetConfig+0x56>
 8005b50:	1b84      	subs	r4, r0, r6
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b56:	684f      	ldr	r7, [r1, #4]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b58:	42a8      	cmp	r0, r5
 8005b5a:	fab4 f484 	clz	r4, r4
    tmpcr1 |= Structure->CounterMode;
 8005b5e:	ea43 0307 	orr.w	r3, r3, r7
 8005b62:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b66:	d014      	beq.n	8005b92 <TIM_Base_SetConfig+0x7e>
 8005b68:	b99c      	cbnz	r4, 8005b92 <TIM_Base_SetConfig+0x7e>
 8005b6a:	4e1e      	ldr	r6, [pc, #120]	; (8005be4 <TIM_Base_SetConfig+0xd0>)
 8005b6c:	4d1e      	ldr	r5, [pc, #120]	; (8005be8 <TIM_Base_SetConfig+0xd4>)
 8005b6e:	42a8      	cmp	r0, r5
 8005b70:	bf18      	it	ne
 8005b72:	42b0      	cmpne	r0, r6
 8005b74:	d00d      	beq.n	8005b92 <TIM_Base_SetConfig+0x7e>
 8005b76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b7a:	42a8      	cmp	r0, r5
 8005b7c:	d10d      	bne.n	8005b9a <TIM_Base_SetConfig+0x86>
 8005b7e:	e008      	b.n	8005b92 <TIM_Base_SetConfig+0x7e>
 8005b80:	4c17      	ldr	r4, [pc, #92]	; (8005be0 <TIM_Base_SetConfig+0xcc>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b86:	684d      	ldr	r5, [r1, #4]
 8005b88:	1b04      	subs	r4, r0, r4
 8005b8a:	432b      	orrs	r3, r5
 8005b8c:	fab4 f484 	clz	r4, r4
 8005b90:	0964      	lsrs	r4, r4, #5
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b96:	68cd      	ldr	r5, [r1, #12]
 8005b98:	432b      	orrs	r3, r5
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b9a:	694d      	ldr	r5, [r1, #20]
 8005b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba0:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba2:	432b      	orrs	r3, r5
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005ba4:	880d      	ldrh	r5, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005baa:	62c6      	str	r6, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005bac:	8505      	strh	r5, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8005bae:	b952      	cbnz	r2, 8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bb0:	b94c      	cbnz	r4, 8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bb2:	4a0c      	ldr	r2, [pc, #48]	; (8005be4 <TIM_Base_SetConfig+0xd0>)
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <TIM_Base_SetConfig+0xd4>)
 8005bb6:	4298      	cmp	r0, r3
 8005bb8:	bf18      	it	ne
 8005bba:	4290      	cmpne	r0, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc2:	4298      	cmp	r0, r3
 8005bc4:	d101      	bne.n	8005bca <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc6:	8a0b      	ldrh	r3, [r1, #16]
 8005bc8:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005bca:	2301      	movs	r3, #1
}
 8005bcc:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 8005bce:	6143      	str	r3, [r0, #20]
}
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40010000 	.word	0x40010000
 8005bd8:	40000400 	.word	0x40000400
 8005bdc:	40000c00 	.word	0x40000c00
 8005be0:	40010400 	.word	0x40010400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400

08005bec <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8005bec:	b1b8      	cbz	r0, 8005c1e <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8005bee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{ 
 8005bf2:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8005bf4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	b15b      	cbz	r3, 8005c14 <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 8005bfc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005bfe:	6820      	ldr	r0, [r4, #0]
 8005c00:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8005c02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005c06:	f7ff ff85 	bl	8005b14 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8005c0a:	2301      	movs	r3, #1
  return HAL_OK;
 8005c0c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8005c0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005c12:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005c14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005c18:	f7ff feae 	bl	8005978 <HAL_TIM_Base_MspInit>
 8005c1c:	e7ee      	b.n	8005bfc <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8005c1e:	2001      	movs	r0, #1
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop

08005c24 <HAL_TIMEx_CommutationCallback>:
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop

08005c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop

08005c2c <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8005c2c:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d001      	beq.n	8005c38 <HAL_UART_Receive_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005c34:	2002      	movs	r0, #2
 8005c36:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8005c38:	b381      	cbz	r1, 8005c9c <HAL_UART_Receive_IT+0x70>
 8005c3a:	b37a      	cbz	r2, 8005c9c <HAL_UART_Receive_IT+0x70>
    __HAL_LOCK(huart);
 8005c3c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d0f7      	beq.n	8005c34 <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 8005c44:	6883      	ldr	r3, [r0, #8]
{
 8005c46:	b410      	push	{r4}
    UART_MASK_COMPUTATION(huart);
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    __HAL_LOCK(huart);
 8005c4c:	f04f 0401 	mov.w	r4, #1
    huart->pRxBuffPtr = pData;
 8005c50:	6641      	str	r1, [r0, #100]	; 0x64
    huart->RxXferSize = Size;
 8005c52:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
    huart->RxXferCount = Size;
 8005c56:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    __HAL_LOCK(huart);
 8005c5a:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
    UART_MASK_COMPUTATION(huart);
 8005c5e:	d01f      	beq.n	8005ca0 <HAL_UART_Receive_IT+0x74>
 8005c60:	bb73      	cbnz	r3, 8005cc0 <HAL_UART_Receive_IT+0x94>
 8005c62:	6903      	ldr	r3, [r0, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d035      	beq.n	8005cd4 <HAL_UART_Receive_IT+0xa8>
 8005c68:	237f      	movs	r3, #127	; 0x7f
 8005c6a:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6e:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c70:	2100      	movs	r1, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c72:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	67c1      	str	r1, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c76:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7a:	6893      	ldr	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8005c7c:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c80:	f043 0301 	orr.w	r3, r3, #1
 8005c84:	6093      	str	r3, [r2, #8]
    if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8005c86:	6810      	ldr	r0, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c88:	6813      	ldr	r3, [r2, #0]
    if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8005c8a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005c8e:	d10e      	bne.n	8005cae <HAL_UART_Receive_IT+0x82>
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c90:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005c94:	6013      	str	r3, [r2, #0]
  }
}
 8005c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c9a:	4770      	bx	lr
      return HAL_ERROR;
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8005ca0:	6903      	ldr	r3, [r0, #16]
 8005ca2:	b9bb      	cbnz	r3, 8005cd4 <HAL_UART_Receive_IT+0xa8>
 8005ca4:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005ca8:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005cac:	e7df      	b.n	8005c6e <HAL_UART_Receive_IT+0x42>
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    return HAL_OK;
 8005cb2:	4608      	mov	r0, r1
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb4:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005cb6:	6893      	ldr	r3, [r2, #8]
 8005cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	6093      	str	r3, [r2, #8]
 8005cbe:	e7ea      	b.n	8005c96 <HAL_UART_Receive_IT+0x6a>
    UART_MASK_COMPUTATION(huart);
 8005cc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc4:	d1d3      	bne.n	8005c6e <HAL_UART_Receive_IT+0x42>
 8005cc6:	6903      	ldr	r3, [r0, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0cd      	beq.n	8005c68 <HAL_UART_Receive_IT+0x3c>
 8005ccc:	233f      	movs	r3, #63	; 0x3f
 8005cce:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005cd2:	e7cc      	b.n	8005c6e <HAL_UART_Receive_IT+0x42>
 8005cd4:	23ff      	movs	r3, #255	; 0xff
 8005cd6:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
 8005cda:	e7c8      	b.n	8005c6e <HAL_UART_Receive_IT+0x42>

08005cdc <HAL_UART_TxCpltCallback>:
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop

08005ce0 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ce0:	b538      	push	{r3, r4, r5, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ce2:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8005ce6:	2b22      	cmp	r3, #34	; 0x22
 8005ce8:	d007      	beq.n	8005cfa <UART_Receive_IT+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cea:	6802      	ldr	r2, [r0, #0]

    return HAL_BUSY;
 8005cec:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cee:	8b13      	ldrh	r3, [r2, #24]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f043 0308 	orr.w	r3, r3, #8
 8005cf6:	8313      	strh	r3, [r2, #24]
    return HAL_BUSY;
 8005cf8:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cfa:	6803      	ldr	r3, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfc:	6882      	ldr	r2, [r0, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d00:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  uint16_t  uhMask = huart->Mask;
 8005d04:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d08:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d0a:	d01d      	beq.n	8005d48 <UART_Receive_IT+0x68>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d0c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005d0e:	400b      	ands	r3, r1
 8005d10:	1c51      	adds	r1, r2, #1
 8005d12:	6641      	str	r1, [r0, #100]	; 0x64
 8005d14:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8005d16:	f8b0 406a 	ldrh.w	r4, [r0, #106]	; 0x6a
 8005d1a:	3c01      	subs	r4, #1
 8005d1c:	b2a4      	uxth	r4, r4
 8005d1e:	f8a0 406a 	strh.w	r4, [r0, #106]	; 0x6a
 8005d22:	b10c      	cbz	r4, 8005d28 <UART_Receive_IT+0x48>
    return HAL_OK;
 8005d24:	2000      	movs	r0, #0
  }
}
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d28:	6803      	ldr	r3, [r0, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8005d2a:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8005d32:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d34:	6899      	ldr	r1, [r3, #8]
 8005d36:	f021 0101 	bic.w	r1, r1, #1
 8005d3a:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	f880 507a 	strb.w	r5, [r0, #122]	; 0x7a
      HAL_UART_RxCpltCallback(huart);
 8005d40:	f7fc fa92 	bl	8002268 <HAL_UART_RxCpltCallback>
 8005d44:	4620      	mov	r0, r4
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d48:	6902      	ldr	r2, [r0, #16]
 8005d4a:	2a00      	cmp	r2, #0
 8005d4c:	d1de      	bne.n	8005d0c <UART_Receive_IT+0x2c>
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d4e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005d50:	400b      	ands	r3, r1
 8005d52:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2;
 8005d56:	6642      	str	r2, [r0, #100]	; 0x64
 8005d58:	e7dd      	b.n	8005d16 <UART_Receive_IT+0x36>
 8005d5a:	bf00      	nop

08005d5c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d5c:	6803      	ldr	r3, [r0, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
{
 8005d60:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8005d62:	0716      	lsls	r6, r2, #28
{
 8005d64:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d66:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d68:	6899      	ldr	r1, [r3, #8]
  if (errorflags == RESET)
 8005d6a:	d051      	beq.n	8005e10 <HAL_UART_IRQHandler+0xb4>
     && (   ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 8005d6c:	4d75      	ldr	r5, [pc, #468]	; (8005f44 <HAL_UART_IRQHandler+0x1e8>)
 8005d6e:	400d      	ands	r5, r1
 8005d70:	d059      	beq.n	8005e26 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d72:	07d6      	lsls	r6, r2, #31
 8005d74:	d507      	bpl.n	8005d86 <HAL_UART_IRQHandler+0x2a>
 8005d76:	05c6      	lsls	r6, r0, #23
 8005d78:	d505      	bpl.n	8005d86 <HAL_UART_IRQHandler+0x2a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8005d7a:	2601      	movs	r6, #1
 8005d7c:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d7e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005d80:	f046 0601 	orr.w	r6, r6, #1
 8005d84:	67e6      	str	r6, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d86:	0796      	lsls	r6, r2, #30
 8005d88:	f140 8089 	bpl.w	8005e9e <HAL_UART_IRQHandler+0x142>
 8005d8c:	07ce      	lsls	r6, r1, #31
 8005d8e:	d508      	bpl.n	8005da2 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8005d90:	2602      	movs	r6, #2
 8005d92:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d94:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005d96:	f046 0604 	orr.w	r6, r6, #4
 8005d9a:	67e6      	str	r6, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d9c:	0756      	lsls	r6, r2, #29
 8005d9e:	f100 8084 	bmi.w	8005eaa <HAL_UART_IRQHandler+0x14e>
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8005da2:	0716      	lsls	r6, r2, #28
 8005da4:	d505      	bpl.n	8005db2 <HAL_UART_IRQHandler+0x56>
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8005da6:	0686      	lsls	r6, r0, #26
 8005da8:	f100 8086 	bmi.w	8005eb8 <HAL_UART_IRQHandler+0x15c>
             ((cr3its & USART_CR3_RXFTIE) != RESET) ||
 8005dac:	2d00      	cmp	r5, #0
 8005dae:	f040 8083 	bne.w	8005eb8 <HAL_UART_IRQHandler+0x15c>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005db2:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8005db4:	2d00      	cmp	r5, #0
 8005db6:	d02a      	beq.n	8005e0e <HAL_UART_IRQHandler+0xb2>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 8005db8:	0696      	lsls	r6, r2, #26
 8005dba:	d504      	bpl.n	8005dc6 <HAL_UART_IRQHandler+0x6a>
         && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dbc:	0685      	lsls	r5, r0, #26
 8005dbe:	f100 8082 	bmi.w	8005ec6 <HAL_UART_IRQHandler+0x16a>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8005dc2:	00c8      	lsls	r0, r1, #3
 8005dc4:	d47f      	bmi.n	8005ec6 <HAL_UART_IRQHandler+0x16a>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005dc6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005dc8:	0711      	lsls	r1, r2, #28
 8005dca:	d404      	bmi.n	8005dd6 <HAL_UART_IRQHandler+0x7a>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8005dcc:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005dce:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005dd2:	f000 8091 	beq.w	8005ef8 <HAL_UART_IRQHandler+0x19c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd6:	681a      	ldr	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dde:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	f022 0201 	bic.w	r2, r2, #1
 8005de6:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8005de8:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	0652      	lsls	r2, r2, #25
 8005df0:	d56e      	bpl.n	8005ed0 <HAL_UART_IRQHandler+0x174>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df2:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8005df4:	6f61      	ldr	r1, [r4, #116]	; 0x74
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dfa:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8005dfc:	2900      	cmp	r1, #0
 8005dfe:	d067      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x174>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e00:	4b51      	ldr	r3, [pc, #324]	; (8005f48 <HAL_UART_IRQHandler+0x1ec>)
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e02:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e04:	650b      	str	r3, [r1, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e06:	f7fd fd65 	bl	80038d4 <HAL_DMA_Abort_IT>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d16f      	bne.n	8005eee <HAL_UART_IRQHandler+0x192>
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_ISR_RXNE) != RESET)
 8005e10:	0695      	lsls	r5, r2, #26
 8005e12:	d50b      	bpl.n	8005e2c <HAL_UART_IRQHandler+0xd0>
     && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e14:	0686      	lsls	r6, r0, #26
 8005e16:	d401      	bmi.n	8005e1c <HAL_UART_IRQHandler+0xc0>
         || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8005e18:	00cd      	lsls	r5, r1, #3
 8005e1a:	d507      	bpl.n	8005e2c <HAL_UART_IRQHandler+0xd0>
      UART_Receive_IT(huart);
 8005e1c:	4620      	mov	r0, r4
}
 8005e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8005e22:	f7ff bf5d 	b.w	8005ce0 <UART_Receive_IT>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e26:	f410 7f90 	tst.w	r0, #288	; 0x120
 8005e2a:	d1a2      	bne.n	8005d72 <HAL_UART_IRQHandler+0x16>
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8005e2c:	02d6      	lsls	r6, r2, #11
 8005e2e:	d41a      	bmi.n	8005e66 <HAL_UART_IRQHandler+0x10a>
  if(((isrflags & USART_ISR_TXE) != RESET)
 8005e30:	0616      	lsls	r6, r2, #24
 8005e32:	d527      	bpl.n	8005e84 <HAL_UART_IRQHandler+0x128>
     && (   ((cr1its & USART_CR1_TXEIE) != RESET)
 8005e34:	0605      	lsls	r5, r0, #24
 8005e36:	d401      	bmi.n	8005e3c <HAL_UART_IRQHandler+0xe0>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 8005e38:	0209      	lsls	r1, r1, #8
 8005e3a:	d523      	bpl.n	8005e84 <HAL_UART_IRQHandler+0x128>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e3c:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 8005e40:	2a21      	cmp	r2, #33	; 0x21
 8005e42:	d1e4      	bne.n	8005e0e <HAL_UART_IRQHandler+0xb2>
    if(huart->TxXferCount == 0U)
 8005e44:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8005e48:	b292      	uxth	r2, r2
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d159      	bne.n	8005f02 <HAL_UART_IRQHandler+0x1a6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	0092      	lsls	r2, r2, #2
 8005e52:	d566      	bpl.n	8005f22 <HAL_UART_IRQHandler+0x1c6>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005e5a:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8005e66:	024d      	lsls	r5, r1, #9
 8005e68:	d5e2      	bpl.n	8005e30 <HAL_UART_IRQHandler+0xd4>
    huart->gState  = HAL_UART_STATE_READY;
 8005e6a:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8005e6c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8005e70:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8005e72:	6219      	str	r1, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8005e74:	f884 2079 	strb.w	r2, [r4, #121]	; 0x79
    huart->RxState = HAL_UART_STATE_READY;
 8005e78:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
}
 8005e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8005e80:	f000 bdd4 	b.w	8006a2c <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e84:	0656      	lsls	r6, r2, #25
 8005e86:	d501      	bpl.n	8005e8c <HAL_UART_IRQHandler+0x130>
 8005e88:	0645      	lsls	r5, r0, #25
 8005e8a:	d425      	bmi.n	8005ed8 <HAL_UART_IRQHandler+0x17c>
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8005e8c:	0211      	lsls	r1, r2, #8
 8005e8e:	d5be      	bpl.n	8005e0e <HAL_UART_IRQHandler+0xb2>
 8005e90:	0042      	lsls	r2, r0, #1
 8005e92:	d5bc      	bpl.n	8005e0e <HAL_UART_IRQHandler+0xb2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e9e:	0756      	lsls	r6, r2, #29
 8005ea0:	f57f af7f 	bpl.w	8005da2 <HAL_UART_IRQHandler+0x46>
 8005ea4:	07ce      	lsls	r6, r1, #31
 8005ea6:	f57f af7c 	bpl.w	8005da2 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8005eaa:	2604      	movs	r6, #4
 8005eac:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eae:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005eb0:	f046 0602 	orr.w	r6, r6, #2
 8005eb4:	67e6      	str	r6, [r4, #124]	; 0x7c
 8005eb6:	e774      	b.n	8005da2 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8005eb8:	2508      	movs	r5, #8
 8005eba:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ebc:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8005ebe:	f045 0508 	orr.w	r5, r5, #8
 8005ec2:	67e5      	str	r5, [r4, #124]	; 0x7c
 8005ec4:	e775      	b.n	8005db2 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f7ff ff0a 	bl	8005ce0 <UART_Receive_IT>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	e77a      	b.n	8005dc6 <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f7fc f9c7 	bl	8002264 <HAL_UART_ErrorCallback>
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ed8:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005eda:	2120      	movs	r1, #32
  HAL_UART_TxCpltCallback(huart);
 8005edc:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee2:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005ee4:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
  HAL_UART_TxCpltCallback(huart);
 8005ee8:	f7ff fef8 	bl	8005cdc <HAL_UART_TxCpltCallback>
 8005eec:	bd70      	pop	{r4, r5, r6, pc}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eee:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8005ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ef4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005ef6:	4718      	bx	r3
        HAL_UART_ErrorCallback(huart);
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7fc f9b3 	bl	8002264 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efe:	67e5      	str	r5, [r4, #124]	; 0x7c
 8005f00:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f02:	68a2      	ldr	r2, [r4, #8]
 8005f04:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005f08:	d010      	beq.n	8005f2c <HAL_UART_IRQHandler+0x1d0>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8005f0a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005f0c:	1c51      	adds	r1, r2, #1
 8005f0e:	65e1      	str	r1, [r4, #92]	; 0x5c
 8005f10:	7812      	ldrb	r2, [r2, #0]
 8005f12:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8005f14:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8005f20:	bd70      	pop	{r4, r5, r6, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e797      	b.n	8005e5c <HAL_UART_IRQHandler+0x100>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2c:	6922      	ldr	r2, [r4, #16]
 8005f2e:	2a00      	cmp	r2, #0
 8005f30:	d1eb      	bne.n	8005f0a <HAL_UART_IRQHandler+0x1ae>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005f32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005f34:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005f38:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005f3c:	8519      	strh	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005f3e:	65e2      	str	r2, [r4, #92]	; 0x5c
 8005f40:	e7e8      	b.n	8005f14 <HAL_UART_IRQHandler+0x1b8>
 8005f42:	bf00      	nop
 8005f44:	10000001 	.word	0x10000001
 8005f48:	08005f4d 	.word	0x08005f4d

08005f4c <UART_DMAAbortOnError>:
{
 8005f4c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8005f4e:	2200      	movs	r2, #0
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8005f50:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8005f52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  HAL_UART_ErrorCallback(huart);
 8005f56:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8005f58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  HAL_UART_ErrorCallback(huart);
 8005f5c:	f7fc f982 	bl	8002264 <HAL_UART_ErrorCallback>
 8005f60:	bd08      	pop	{r3, pc}
 8005f62:	bf00      	nop

08005f64 <UART_SetConfig>:
{
 8005f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f68:	4605      	mov	r5, r0
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8005f6a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005f6c:	4fb4      	ldr	r7, [pc, #720]	; (8006240 <UART_SetConfig+0x2dc>)
{
 8005f6e:	b087      	sub	sp, #28
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8005f70:	68ab      	ldr	r3, [r5, #8]
 8005f72:	6929      	ldr	r1, [r5, #16]
 8005f74:	4303      	orrs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8005f76:	682c      	ldr	r4, [r5, #0]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8005f78:	696a      	ldr	r2, [r5, #20]
 8005f7a:	430b      	orrs	r3, r1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f7c:	69e9      	ldr	r1, [r5, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8005f82:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005f84:	6822      	ldr	r2, [r4, #0]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f86:	4eaf      	ldr	r6, [pc, #700]	; (8006244 <UART_SetConfig+0x2e0>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005f88:	4017      	ands	r7, r2
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8005f8a:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f8c:	42b4      	cmp	r4, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005f8e:	ea43 0307 	orr.w	r3, r3, r7
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f92:	69af      	ldr	r7, [r5, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005f94:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f96:	6862      	ldr	r2, [r4, #4]
 8005f98:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005f9c:	ea42 020e 	orr.w	r2, r2, lr
 8005fa0:	6062      	str	r2, [r4, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fa2:	d001      	beq.n	8005fa8 <UART_SetConfig+0x44>
    tmpreg |= huart->Init.OneBitSampling;
 8005fa4:	6a2b      	ldr	r3, [r5, #32]
 8005fa6:	431f      	orrs	r7, r3
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8005fa8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8005fac:	d036      	beq.n	800601c <UART_SetConfig+0xb8>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fae:	68a0      	ldr	r0, [r4, #8]
 8005fb0:	4ba5      	ldr	r3, [pc, #660]	; (8006248 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8005fb2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fb4:	4003      	ands	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fb6:	48a5      	ldr	r0, [pc, #660]	; (800624c <UART_SetConfig+0x2e8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fb8:	433b      	orrs	r3, r7
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fba:	4284      	cmp	r4, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fbc:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8005fbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fc0:	f023 030f 	bic.w	r3, r3, #15
 8005fc4:	ea43 0302 	orr.w	r3, r3, r2
 8005fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fca:	d035      	beq.n	8006038 <UART_SetConfig+0xd4>
 8005fcc:	4ba0      	ldr	r3, [pc, #640]	; (8006250 <UART_SetConfig+0x2ec>)
 8005fce:	429c      	cmp	r4, r3
 8005fd0:	f000 8084 	beq.w	80060dc <UART_SetConfig+0x178>
 8005fd4:	4b9f      	ldr	r3, [pc, #636]	; (8006254 <UART_SetConfig+0x2f0>)
 8005fd6:	429c      	cmp	r4, r3
 8005fd8:	f000 8089 	beq.w	80060ee <UART_SetConfig+0x18a>
 8005fdc:	4b9e      	ldr	r3, [pc, #632]	; (8006258 <UART_SetConfig+0x2f4>)
 8005fde:	429c      	cmp	r4, r3
 8005fe0:	f000 81a1 	beq.w	8006326 <UART_SetConfig+0x3c2>
 8005fe4:	4b9d      	ldr	r3, [pc, #628]	; (800625c <UART_SetConfig+0x2f8>)
 8005fe6:	429c      	cmp	r4, r3
 8005fe8:	d01d      	beq.n	8006026 <UART_SetConfig+0xc2>
 8005fea:	4b9d      	ldr	r3, [pc, #628]	; (8006260 <UART_SetConfig+0x2fc>)
 8005fec:	429c      	cmp	r4, r3
 8005fee:	f000 81ab 	beq.w	8006348 <UART_SetConfig+0x3e4>
 8005ff2:	4b9c      	ldr	r3, [pc, #624]	; (8006264 <UART_SetConfig+0x300>)
 8005ff4:	429c      	cmp	r4, r3
 8005ff6:	f000 81b1 	beq.w	800635c <UART_SetConfig+0x3f8>
 8005ffa:	4b9b      	ldr	r3, [pc, #620]	; (8006268 <UART_SetConfig+0x304>)
 8005ffc:	429c      	cmp	r4, r3
 8005ffe:	f000 8227 	beq.w	8006450 <UART_SetConfig+0x4ec>
 8006002:	4b90      	ldr	r3, [pc, #576]	; (8006244 <UART_SetConfig+0x2e0>)
 8006004:	429c      	cmp	r4, r3
 8006006:	f000 822d 	beq.w	8006464 <UART_SetConfig+0x500>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800600a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800600e:	f000 8198 	beq.w	8006342 <UART_SetConfig+0x3de>
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
}
 8006014:	4618      	mov	r0, r3
 8006016:	b007      	add	sp, #28
 8006018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 800601c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800601e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006020:	4313      	orrs	r3, r2
 8006022:	431f      	orrs	r7, r3
 8006024:	e7c3      	b.n	8005fae <UART_SetConfig+0x4a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006026:	4b91      	ldr	r3, [pc, #580]	; (800626c <UART_SetConfig+0x308>)
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	2b05      	cmp	r3, #5
 8006030:	d8eb      	bhi.n	800600a <UART_SetConfig+0xa6>
 8006032:	488f      	ldr	r0, [pc, #572]	; (8006270 <UART_SetConfig+0x30c>)
 8006034:	5cc3      	ldrb	r3, [r0, r3]
 8006036:	e008      	b.n	800604a <UART_SetConfig+0xe6>
 8006038:	4b8c      	ldr	r3, [pc, #560]	; (800626c <UART_SetConfig+0x308>)
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006040:	2b28      	cmp	r3, #40	; 0x28
 8006042:	f200 817a 	bhi.w	800633a <UART_SetConfig+0x3d6>
 8006046:	488b      	ldr	r0, [pc, #556]	; (8006274 <UART_SetConfig+0x310>)
 8006048:	5cc3      	ldrb	r3, [r0, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800604a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800604e:	d157      	bne.n	8006100 <UART_SetConfig+0x19c>
    switch (clocksource)
 8006050:	2b40      	cmp	r3, #64	; 0x40
 8006052:	f200 8176 	bhi.w	8006342 <UART_SetConfig+0x3de>
 8006056:	e8df f013 	tbh	[pc, r3, lsl #1]
 800605a:	0191      	.short	0x0191
 800605c:	017401c1 	.word	0x017401c1
 8006060:	01a80174 	.word	0x01a80174
 8006064:	01740174 	.word	0x01740174
 8006068:	01eb0174 	.word	0x01eb0174
 800606c:	01740174 	.word	0x01740174
 8006070:	01740174 	.word	0x01740174
 8006074:	01740174 	.word	0x01740174
 8006078:	01e10174 	.word	0x01e10174
 800607c:	01740174 	.word	0x01740174
 8006080:	01740174 	.word	0x01740174
 8006084:	01740174 	.word	0x01740174
 8006088:	01740174 	.word	0x01740174
 800608c:	01740174 	.word	0x01740174
 8006090:	01740174 	.word	0x01740174
 8006094:	01740174 	.word	0x01740174
 8006098:	01cc0174 	.word	0x01cc0174
 800609c:	01740174 	.word	0x01740174
 80060a0:	01740174 	.word	0x01740174
 80060a4:	01740174 	.word	0x01740174
 80060a8:	01740174 	.word	0x01740174
 80060ac:	01740174 	.word	0x01740174
 80060b0:	01740174 	.word	0x01740174
 80060b4:	01740174 	.word	0x01740174
 80060b8:	01740174 	.word	0x01740174
 80060bc:	01740174 	.word	0x01740174
 80060c0:	01740174 	.word	0x01740174
 80060c4:	01740174 	.word	0x01740174
 80060c8:	01740174 	.word	0x01740174
 80060cc:	01740174 	.word	0x01740174
 80060d0:	01740174 	.word	0x01740174
 80060d4:	01740174 	.word	0x01740174
 80060d8:	01c40174 	.word	0x01c40174
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060dc:	4b63      	ldr	r3, [pc, #396]	; (800626c <UART_SetConfig+0x308>)
 80060de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	2b05      	cmp	r3, #5
 80060e6:	d890      	bhi.n	800600a <UART_SetConfig+0xa6>
 80060e8:	4863      	ldr	r0, [pc, #396]	; (8006278 <UART_SetConfig+0x314>)
 80060ea:	5cc3      	ldrb	r3, [r0, r3]
 80060ec:	e7ad      	b.n	800604a <UART_SetConfig+0xe6>
 80060ee:	4b5f      	ldr	r3, [pc, #380]	; (800626c <UART_SetConfig+0x308>)
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	2b05      	cmp	r3, #5
 80060f8:	d887      	bhi.n	800600a <UART_SetConfig+0xa6>
 80060fa:	4860      	ldr	r0, [pc, #384]	; (800627c <UART_SetConfig+0x318>)
 80060fc:	5cc3      	ldrb	r3, [r0, r3]
 80060fe:	e7a4      	b.n	800604a <UART_SetConfig+0xe6>
    switch (clocksource)
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d886      	bhi.n	8006012 <UART_SetConfig+0xae>
 8006104:	a101      	add	r1, pc, #4	; (adr r1, 800610c <UART_SetConfig+0x1a8>)
 8006106:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006321 	.word	0x08006321
 8006110:	080062f9 	.word	0x080062f9
 8006114:	08006013 	.word	0x08006013
 8006118:	08006013 	.word	0x08006013
 800611c:	080062e9 	.word	0x080062e9
 8006120:	08006013 	.word	0x08006013
 8006124:	08006013 	.word	0x08006013
 8006128:	08006013 	.word	0x08006013
 800612c:	080062b9 	.word	0x080062b9
 8006130:	08006013 	.word	0x08006013
 8006134:	08006013 	.word	0x08006013
 8006138:	08006013 	.word	0x08006013
 800613c:	08006013 	.word	0x08006013
 8006140:	08006013 	.word	0x08006013
 8006144:	08006013 	.word	0x08006013
 8006148:	08006013 	.word	0x08006013
 800614c:	080062ab 	.word	0x080062ab
 8006150:	08006013 	.word	0x08006013
 8006154:	08006013 	.word	0x08006013
 8006158:	08006013 	.word	0x08006013
 800615c:	08006013 	.word	0x08006013
 8006160:	08006013 	.word	0x08006013
 8006164:	08006013 	.word	0x08006013
 8006168:	08006013 	.word	0x08006013
 800616c:	08006013 	.word	0x08006013
 8006170:	08006013 	.word	0x08006013
 8006174:	08006013 	.word	0x08006013
 8006178:	08006013 	.word	0x08006013
 800617c:	08006013 	.word	0x08006013
 8006180:	08006013 	.word	0x08006013
 8006184:	08006013 	.word	0x08006013
 8006188:	08006013 	.word	0x08006013
 800618c:	08006285 	.word	0x08006285
 8006190:	08006013 	.word	0x08006013
 8006194:	08006013 	.word	0x08006013
 8006198:	08006013 	.word	0x08006013
 800619c:	08006013 	.word	0x08006013
 80061a0:	08006013 	.word	0x08006013
 80061a4:	08006013 	.word	0x08006013
 80061a8:	08006013 	.word	0x08006013
 80061ac:	08006013 	.word	0x08006013
 80061b0:	08006013 	.word	0x08006013
 80061b4:	08006013 	.word	0x08006013
 80061b8:	08006013 	.word	0x08006013
 80061bc:	08006013 	.word	0x08006013
 80061c0:	08006013 	.word	0x08006013
 80061c4:	08006013 	.word	0x08006013
 80061c8:	08006013 	.word	0x08006013
 80061cc:	08006013 	.word	0x08006013
 80061d0:	08006013 	.word	0x08006013
 80061d4:	08006013 	.word	0x08006013
 80061d8:	08006013 	.word	0x08006013
 80061dc:	08006013 	.word	0x08006013
 80061e0:	08006013 	.word	0x08006013
 80061e4:	08006013 	.word	0x08006013
 80061e8:	08006013 	.word	0x08006013
 80061ec:	08006013 	.word	0x08006013
 80061f0:	08006013 	.word	0x08006013
 80061f4:	08006013 	.word	0x08006013
 80061f8:	08006013 	.word	0x08006013
 80061fc:	08006013 	.word	0x08006013
 8006200:	08006013 	.word	0x08006013
 8006204:	08006013 	.word	0x08006013
 8006208:	08006013 	.word	0x08006013
 800620c:	08006211 	.word	0x08006211
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006210:	a803      	add	r0, sp, #12
 8006212:	f7ff f89f 	bl	8005354 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8006216:	491a      	ldr	r1, [pc, #104]	; (8006280 <UART_SetConfig+0x31c>)
 8006218:	6a68      	ldr	r0, [r5, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 800621a:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800621c:	9a04      	ldr	r2, [sp, #16]
 800621e:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 8006222:	fbb2 f2f4 	udiv	r2, r2, r4
 8006226:	e895 0003 	ldmia.w	r5, {r0, r1}
 800622a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800622e:	fbb2 f2f1 	udiv	r2, r2, r1
 8006232:	b292      	uxth	r2, r2
 8006234:	60c2      	str	r2, [r0, #12]
}
 8006236:	4618      	mov	r0, r3
 8006238:	b007      	add	sp, #28
 800623a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800623e:	bf00      	nop
 8006240:	cfff69f3 	.word	0xcfff69f3
 8006244:	58000c00 	.word	0x58000c00
 8006248:	11fff4ff 	.word	0x11fff4ff
 800624c:	40011000 	.word	0x40011000
 8006250:	40004400 	.word	0x40004400
 8006254:	40004800 	.word	0x40004800
 8006258:	40004c00 	.word	0x40004c00
 800625c:	40005000 	.word	0x40005000
 8006260:	40011400 	.word	0x40011400
 8006264:	40007800 	.word	0x40007800
 8006268:	40007c00 	.word	0x40007c00
 800626c:	58024400 	.word	0x58024400
 8006270:	080082f0 	.word	0x080082f0
 8006274:	080082c4 	.word	0x080082c4
 8006278:	080082f0 	.word	0x080082f0
 800627c:	080082f0 	.word	0x080082f0
 8006280:	08008300 	.word	0x08008300
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006284:	4eb6      	ldr	r6, [pc, #728]	; (8006560 <UART_SetConfig+0x5fc>)
 8006286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800628a:	6868      	ldr	r0, [r5, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 800628c:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800628e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8006292:	fbb1 f2f2 	udiv	r2, r1, r2
 8006296:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800629a:	fbb2 f2f0 	udiv	r2, r2, r0
 800629e:	b292      	uxth	r2, r2
}
 80062a0:	4618      	mov	r0, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80062a2:	60e2      	str	r2, [r4, #12]
}
 80062a4:	b007      	add	sp, #28
 80062a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80062aa:	48ad      	ldr	r0, [pc, #692]	; (8006560 <UART_SetConfig+0x5fc>)
  HAL_StatusTypeDef ret               = HAL_OK;
 80062ac:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80062ae:	49ad      	ldr	r1, [pc, #692]	; (8006564 <UART_SetConfig+0x600>)
 80062b0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80062b4:	6868      	ldr	r0, [r5, #4]
 80062b6:	e7ec      	b.n	8006292 <UART_SetConfig+0x32e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062b8:	49ab      	ldr	r1, [pc, #684]	; (8006568 <UART_SetConfig+0x604>)
 80062ba:	680b      	ldr	r3, [r1, #0]
 80062bc:	f013 0320 	ands.w	r3, r3, #32
 80062c0:	d056      	beq.n	8006370 <UART_SetConfig+0x40c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80062c2:	6808      	ldr	r0, [r1, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80062c4:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80062c6:	49a9      	ldr	r1, [pc, #676]	; (800656c <UART_SetConfig+0x608>)
 80062c8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80062cc:	4ea4      	ldr	r6, [pc, #656]	; (8006560 <UART_SetConfig+0x5fc>)
 80062ce:	686d      	ldr	r5, [r5, #4]
 80062d0:	40c1      	lsrs	r1, r0
 80062d2:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80062d6:	fbb1 f2f2 	udiv	r2, r1, r2
 80062da:	eb02 0255 	add.w	r2, r2, r5, lsr #1
 80062de:	fbb2 f2f5 	udiv	r2, r2, r5
 80062e2:	b292      	uxth	r2, r2
 80062e4:	60e2      	str	r2, [r4, #12]
 80062e6:	e695      	b.n	8006014 <UART_SetConfig+0xb0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e8:	4668      	mov	r0, sp
 80062ea:	f7fe ff95 	bl	8005218 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80062ee:	499c      	ldr	r1, [pc, #624]	; (8006560 <UART_SetConfig+0x5fc>)
 80062f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 80062f2:	2300      	movs	r3, #0
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80062f4:	9a01      	ldr	r2, [sp, #4]
 80062f6:	e792      	b.n	800621e <UART_SetConfig+0x2ba>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80062f8:	f7fe f8a0 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 80062fc:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 80062fe:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8006300:	4a97      	ldr	r2, [pc, #604]	; (8006560 <UART_SetConfig+0x5fc>)
 8006302:	6869      	ldr	r1, [r5, #4]
 8006304:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8006308:	fbb0 f2f2 	udiv	r2, r0, r2
 800630c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
}
 8006310:	4618      	mov	r0, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8006312:	fbb2 f2f1 	udiv	r2, r2, r1
 8006316:	b292      	uxth	r2, r2
 8006318:	60e2      	str	r2, [r4, #12]
}
 800631a:	b007      	add	sp, #28
 800631c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8006320:	f7fe f876 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 8006324:	e7ea      	b.n	80062fc <UART_SetConfig+0x398>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006326:	4b90      	ldr	r3, [pc, #576]	; (8006568 <UART_SetConfig+0x604>)
 8006328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	2b05      	cmp	r3, #5
 8006330:	f63f ae6b 	bhi.w	800600a <UART_SetConfig+0xa6>
 8006334:	488e      	ldr	r0, [pc, #568]	; (8006570 <UART_SetConfig+0x60c>)
 8006336:	5cc3      	ldrb	r3, [r0, r3]
 8006338:	e687      	b.n	800604a <UART_SetConfig+0xe6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800633a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800633e:	f47f ae68 	bne.w	8006012 <UART_SetConfig+0xae>
 8006342:	2200      	movs	r2, #0
        ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e7ab      	b.n	80062a0 <UART_SetConfig+0x33c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006348:	4b87      	ldr	r3, [pc, #540]	; (8006568 <UART_SetConfig+0x604>)
 800634a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006350:	2b28      	cmp	r3, #40	; 0x28
 8006352:	f63f ae5a 	bhi.w	800600a <UART_SetConfig+0xa6>
 8006356:	4887      	ldr	r0, [pc, #540]	; (8006574 <UART_SetConfig+0x610>)
 8006358:	5cc3      	ldrb	r3, [r0, r3]
 800635a:	e676      	b.n	800604a <UART_SetConfig+0xe6>
 800635c:	4b82      	ldr	r3, [pc, #520]	; (8006568 <UART_SetConfig+0x604>)
 800635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	2b05      	cmp	r3, #5
 8006366:	f63f ae50 	bhi.w	800600a <UART_SetConfig+0xa6>
 800636a:	4883      	ldr	r0, [pc, #524]	; (8006578 <UART_SetConfig+0x614>)
 800636c:	5cc3      	ldrb	r3, [r0, r3]
 800636e:	e66c      	b.n	800604a <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006370:	487b      	ldr	r0, [pc, #492]	; (8006560 <UART_SetConfig+0x5fc>)
 8006372:	497e      	ldr	r1, [pc, #504]	; (800656c <UART_SetConfig+0x608>)
 8006374:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8006378:	6868      	ldr	r0, [r5, #4]
 800637a:	e78a      	b.n	8006292 <UART_SetConfig+0x32e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800637c:	f7fe f848 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8006380:	4a77      	ldr	r2, [pc, #476]	; (8006560 <UART_SetConfig+0x5fc>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006382:	2300      	movs	r3, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8006384:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8006386:	6869      	ldr	r1, [r5, #4]
 8006388:	f832 6014 	ldrh.w	r6, [r2, r4, lsl #1]
 800638c:	084a      	lsrs	r2, r1, #1
 800638e:	682c      	ldr	r4, [r5, #0]
 8006390:	fbb0 f0f6 	udiv	r0, r0, r6
 8006394:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006398:	fbb2 f1f1 	udiv	r1, r2, r1
 800639c:	f3c1 0242 	ubfx	r2, r1, #1, #3
 80063a0:	f021 010f 	bic.w	r1, r1, #15
 80063a4:	430a      	orrs	r2, r1
 80063a6:	b292      	uxth	r2, r2
      break;
 80063a8:	e77a      	b.n	80062a0 <UART_SetConfig+0x33c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063aa:	4668      	mov	r0, sp
 80063ac:	f7fe ff34 	bl	8005218 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80063b0:	496b      	ldr	r1, [pc, #428]	; (8006560 <UART_SetConfig+0x5fc>)
 80063b2:	6a68      	ldr	r0, [r5, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 80063b4:	2300      	movs	r3, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80063b6:	9a01      	ldr	r2, [sp, #4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80063b8:	f831 6010 	ldrh.w	r6, [r1, r0, lsl #1]
 80063bc:	6868      	ldr	r0, [r5, #4]
 80063be:	682c      	ldr	r4, [r5, #0]
 80063c0:	0841      	lsrs	r1, r0, #1
 80063c2:	fbb2 f2f6 	udiv	r2, r2, r6
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80063c6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80063ca:	fbb1 f1f0 	udiv	r1, r1, r0
 80063ce:	f3c1 0242 	ubfx	r2, r1, #1, #3
 80063d2:	f021 010f 	bic.w	r1, r1, #15
 80063d6:	430a      	orrs	r2, r1
 80063d8:	b292      	uxth	r2, r2
 80063da:	e761      	b.n	80062a0 <UART_SetConfig+0x33c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80063dc:	f7fe f82e 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 80063e0:	e7ce      	b.n	8006380 <UART_SetConfig+0x41c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063e2:	a803      	add	r0, sp, #12
 80063e4:	f7fe ffb6 	bl	8005354 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80063e8:	495d      	ldr	r1, [pc, #372]	; (8006560 <UART_SetConfig+0x5fc>)
 80063ea:	6a68      	ldr	r0, [r5, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 80063ec:	2300      	movs	r3, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80063ee:	9a04      	ldr	r2, [sp, #16]
 80063f0:	e7e2      	b.n	80063b8 <UART_SetConfig+0x454>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80063f2:	495b      	ldr	r1, [pc, #364]	; (8006560 <UART_SetConfig+0x5fc>)
 80063f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80063f8:	686d      	ldr	r5, [r5, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 80063fa:	2300      	movs	r3, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80063fc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006400:	0869      	lsrs	r1, r5, #1
 8006402:	fbb0 f2f2 	udiv	r2, r0, r2
 8006406:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800640a:	fbb1 f1f5 	udiv	r1, r1, r5
 800640e:	f3c1 0242 	ubfx	r2, r1, #1, #3
 8006412:	f021 010f 	bic.w	r1, r1, #15
 8006416:	430a      	orrs	r2, r1
 8006418:	b292      	uxth	r2, r2
      break;
 800641a:	e741      	b.n	80062a0 <UART_SetConfig+0x33c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800641c:	4850      	ldr	r0, [pc, #320]	; (8006560 <UART_SetConfig+0x5fc>)
  HAL_StatusTypeDef ret               = HAL_OK;
 800641e:	2300      	movs	r3, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006420:	4950      	ldr	r1, [pc, #320]	; (8006564 <UART_SetConfig+0x600>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006422:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8006426:	6868      	ldr	r0, [r5, #4]
 8006428:	fbb1 f2f2 	udiv	r2, r1, r2
 800642c:	0841      	lsrs	r1, r0, #1
 800642e:	e7ca      	b.n	80063c6 <UART_SetConfig+0x462>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006430:	494d      	ldr	r1, [pc, #308]	; (8006568 <UART_SetConfig+0x604>)
 8006432:	680b      	ldr	r3, [r1, #0]
 8006434:	f013 0320 	ands.w	r3, r3, #32
 8006438:	d06b      	beq.n	8006512 <UART_SetConfig+0x5ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800643a:	6809      	ldr	r1, [r1, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800643c:	2300      	movs	r3, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800643e:	484b      	ldr	r0, [pc, #300]	; (800656c <UART_SetConfig+0x608>)
 8006440:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8006444:	4e46      	ldr	r6, [pc, #280]	; (8006560 <UART_SetConfig+0x5fc>)
 8006446:	686d      	ldr	r5, [r5, #4]
 8006448:	40c8      	lsrs	r0, r1
 800644a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800644e:	e7d7      	b.n	8006400 <UART_SetConfig+0x49c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006450:	4b45      	ldr	r3, [pc, #276]	; (8006568 <UART_SetConfig+0x604>)
 8006452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	2b05      	cmp	r3, #5
 800645a:	f63f add6 	bhi.w	800600a <UART_SetConfig+0xa6>
 800645e:	4847      	ldr	r0, [pc, #284]	; (800657c <UART_SetConfig+0x618>)
 8006460:	5cc3      	ldrb	r3, [r0, r3]
 8006462:	e5f2      	b.n	800604a <UART_SetConfig+0xe6>
 8006464:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	2b05      	cmp	r3, #5
 8006470:	f63f adcf 	bhi.w	8006012 <UART_SetConfig+0xae>
 8006474:	4a42      	ldr	r2, [pc, #264]	; (8006580 <UART_SetConfig+0x61c>)
 8006476:	5cd4      	ldrb	r4, [r2, r3]
    switch (clocksource)
 8006478:	2c08      	cmp	r4, #8
 800647a:	d038      	beq.n	80064ee <UART_SetConfig+0x58a>
 800647c:	d927      	bls.n	80064ce <UART_SetConfig+0x56a>
 800647e:	2c20      	cmp	r4, #32
 8006480:	d044      	beq.n	800650c <UART_SetConfig+0x5a8>
 8006482:	2c40      	cmp	r4, #64	; 0x40
 8006484:	d03d      	beq.n	8006502 <UART_SetConfig+0x59e>
 8006486:	2c10      	cmp	r4, #16
 8006488:	f47f adc3 	bne.w	8006012 <UART_SetConfig+0xae>
      tmpreg =(uint32_t) CSI_VALUE;
 800648c:	4835      	ldr	r0, [pc, #212]	; (8006564 <UART_SetConfig+0x600>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800648e:	686e      	ldr	r6, [r5, #4]
 8006490:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8006494:	4283      	cmp	r3, r0
 8006496:	f63f adbc 	bhi.w	8006012 <UART_SetConfig+0xae>
 800649a:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 800649e:	f63f adb8 	bhi.w	8006012 <UART_SetConfig+0xae>
        switch (clocksource)
 80064a2:	2c08      	cmp	r4, #8
 80064a4:	d070      	beq.n	8006588 <UART_SetConfig+0x624>
 80064a6:	d937      	bls.n	8006518 <UART_SetConfig+0x5b4>
 80064a8:	2c20      	cmp	r4, #32
 80064aa:	f000 80a9 	beq.w	8006600 <UART_SetConfig+0x69c>
 80064ae:	2c40      	cmp	r4, #64	; 0x40
 80064b0:	f000 808d 	beq.w	80065ce <UART_SetConfig+0x66a>
 80064b4:	2c10      	cmp	r4, #16
 80064b6:	f000 8092 	beq.w	80065de <UART_SetConfig+0x67a>
          ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 80064bc:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80064c0:	4a30      	ldr	r2, [pc, #192]	; (8006584 <UART_SetConfig+0x620>)
 80064c2:	4291      	cmp	r1, r2
 80064c4:	f63f ada5 	bhi.w	8006012 <UART_SetConfig+0xae>
           huart->Instance->BRR = tmpreg;
 80064c8:	682a      	ldr	r2, [r5, #0]
 80064ca:	60d0      	str	r0, [r2, #12]
 80064cc:	e5a2      	b.n	8006014 <UART_SetConfig+0xb0>
    switch (clocksource)
 80064ce:	2c02      	cmp	r4, #2
 80064d0:	d00a      	beq.n	80064e8 <UART_SetConfig+0x584>
 80064d2:	2c04      	cmp	r4, #4
 80064d4:	f47f ad9d 	bne.w	8006012 <UART_SetConfig+0xae>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d8:	4668      	mov	r0, sp
 80064da:	f7fe fe9d 	bl	8005218 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 80064de:	9801      	ldr	r0, [sp, #4]
    if (tmpreg != 0U)
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d1d4      	bne.n	800648e <UART_SetConfig+0x52a>
 80064e4:	4603      	mov	r3, r0
 80064e6:	e595      	b.n	8006014 <UART_SetConfig+0xb0>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 80064e8:	f7fe fe80 	bl	80051ec <HAL_RCCEx_GetD3PCLK1Freq>
      break;
 80064ec:	e7f8      	b.n	80064e0 <UART_SetConfig+0x57c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ee:	4b1e      	ldr	r3, [pc, #120]	; (8006568 <UART_SetConfig+0x604>)
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	0692      	lsls	r2, r2, #26
 80064f4:	d531      	bpl.n	800655a <UART_SetConfig+0x5f6>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	481c      	ldr	r0, [pc, #112]	; (800656c <UART_SetConfig+0x608>)
 80064fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80064fe:	40d8      	lsrs	r0, r3
 8006500:	e7c5      	b.n	800648e <UART_SetConfig+0x52a>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006502:	a803      	add	r0, sp, #12
 8006504:	f7fe ff26 	bl	8005354 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8006508:	9804      	ldr	r0, [sp, #16]
      break;
 800650a:	e7e9      	b.n	80064e0 <UART_SetConfig+0x57c>
      tmpreg = (uint32_t) LSE_VALUE;
 800650c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006510:	e7bd      	b.n	800648e <UART_SetConfig+0x52a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006512:	4813      	ldr	r0, [pc, #76]	; (8006560 <UART_SetConfig+0x5fc>)
 8006514:	4915      	ldr	r1, [pc, #84]	; (800656c <UART_SetConfig+0x608>)
 8006516:	e784      	b.n	8006422 <UART_SetConfig+0x4be>
        switch (clocksource)
 8006518:	2c02      	cmp	r4, #2
 800651a:	d067      	beq.n	80065ec <UART_SetConfig+0x688>
 800651c:	2c04      	cmp	r4, #4
 800651e:	d1cc      	bne.n	80064ba <UART_SetConfig+0x556>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006520:	4668      	mov	r0, sp
 8006522:	f7fe fe79 	bl	8005218 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8006526:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <UART_SetConfig+0x5fc>)
 8006528:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800652a:	2100      	movs	r1, #0
 800652c:	9801      	ldr	r0, [sp, #4]
 800652e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006532:	2300      	movs	r3, #0
 8006534:	686c      	ldr	r4, [r5, #4]
 8006536:	f7f9 fed3 	bl	80002e0 <__aeabi_uldivmod>
 800653a:	2300      	movs	r3, #0
 800653c:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 8006540:	4622      	mov	r2, r4
 8006542:	020f      	lsls	r7, r1, #8
 8006544:	0206      	lsls	r6, r0, #8
 8006546:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800654a:	eb16 000e 	adds.w	r0, r6, lr
 800654e:	f147 0100 	adc.w	r1, r7, #0
 8006552:	f7f9 fec5 	bl	80002e0 <__aeabi_uldivmod>
          break;
 8006556:	2300      	movs	r3, #0
 8006558:	e7b0      	b.n	80064bc <UART_SetConfig+0x558>
        tmpreg = (uint32_t) HSI_VALUE;
 800655a:	4804      	ldr	r0, [pc, #16]	; (800656c <UART_SetConfig+0x608>)
 800655c:	e797      	b.n	800648e <UART_SetConfig+0x52a>
 800655e:	bf00      	nop
 8006560:	08008300 	.word	0x08008300
 8006564:	003d0900 	.word	0x003d0900
 8006568:	58024400 	.word	0x58024400
 800656c:	03d09000 	.word	0x03d09000
 8006570:	080082f0 	.word	0x080082f0
 8006574:	080082c4 	.word	0x080082c4
 8006578:	080082f0 	.word	0x080082f0
 800657c:	080082f0 	.word	0x080082f0
 8006580:	080082f8 	.word	0x080082f8
 8006584:	000ffcff 	.word	0x000ffcff
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006588:	4a36      	ldr	r2, [pc, #216]	; (8006664 <UART_SetConfig+0x700>)
 800658a:	6814      	ldr	r4, [r2, #0]
 800658c:	f014 0420 	ands.w	r4, r4, #32
 8006590:	d04d      	beq.n	800662e <UART_SetConfig+0x6ca>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8006592:	6813      	ldr	r3, [r2, #0]
 8006594:	2100      	movs	r1, #0
 8006596:	4834      	ldr	r0, [pc, #208]	; (8006668 <UART_SetConfig+0x704>)
 8006598:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800659c:	4a33      	ldr	r2, [pc, #204]	; (800666c <UART_SetConfig+0x708>)
 800659e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80065a0:	40d8      	lsrs	r0, r3
 80065a2:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80065a6:	2300      	movs	r3, #0
 80065a8:	0874      	lsrs	r4, r6, #1
 80065aa:	f7f9 fe99 	bl	80002e0 <__aeabi_uldivmod>
 80065ae:	2300      	movs	r3, #0
 80065b0:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80065b4:	4632      	mov	r2, r6
 80065b6:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80065ba:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80065be:	eb18 0004 	adds.w	r0, r8, r4
 80065c2:	f149 0100 	adc.w	r1, r9, #0
 80065c6:	f7f9 fe8b 	bl	80002e0 <__aeabi_uldivmod>
          break;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e776      	b.n	80064bc <UART_SetConfig+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ce:	a803      	add	r0, sp, #12
 80065d0:	f7fe fec0 	bl	8005354 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80065d4:	4b25      	ldr	r3, [pc, #148]	; (800666c <UART_SetConfig+0x708>)
 80065d6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80065d8:	2100      	movs	r1, #0
 80065da:	9804      	ldr	r0, [sp, #16]
 80065dc:	e7a7      	b.n	800652e <UART_SetConfig+0x5ca>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80065de:	4b23      	ldr	r3, [pc, #140]	; (800666c <UART_SetConfig+0x708>)
 80065e0:	2100      	movs	r1, #0
 80065e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80065e4:	4822      	ldr	r0, [pc, #136]	; (8006670 <UART_SetConfig+0x70c>)
 80065e6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80065ea:	e7dc      	b.n	80065a6 <UART_SetConfig+0x642>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80065ec:	f7fe fdfe 	bl	80051ec <HAL_RCCEx_GetD3PCLK1Freq>
 80065f0:	4b1e      	ldr	r3, [pc, #120]	; (800666c <UART_SetConfig+0x708>)
 80065f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80065f4:	2100      	movs	r1, #0
 80065f6:	686c      	ldr	r4, [r5, #4]
 80065f8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80065fc:	2300      	movs	r3, #0
 80065fe:	e79a      	b.n	8006536 <UART_SetConfig+0x5d2>
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006600:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8006602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006606:	4c19      	ldr	r4, [pc, #100]	; (800666c <UART_SetConfig+0x708>)
 8006608:	0873      	lsrs	r3, r6, #1
 800660a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800660e:	4632      	mov	r2, r6
 8006610:	f834 4017 	ldrh.w	r4, [r4, r7, lsl #1]
 8006614:	461e      	mov	r6, r3
 8006616:	2700      	movs	r7, #0
 8006618:	2300      	movs	r3, #0
 800661a:	fbb1 f1f4 	udiv	r1, r1, r4
 800661e:	fbe1 6700 	umlal	r6, r7, r1, r0
 8006622:	4630      	mov	r0, r6
 8006624:	4639      	mov	r1, r7
 8006626:	f7f9 fe5b 	bl	80002e0 <__aeabi_uldivmod>
          break;
 800662a:	2300      	movs	r3, #0
 800662c:	e746      	b.n	80064bc <UART_SetConfig+0x558>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800662e:	4b0f      	ldr	r3, [pc, #60]	; (800666c <UART_SetConfig+0x708>)
 8006630:	2100      	movs	r1, #0
 8006632:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006634:	0877      	lsrs	r7, r6, #1
 8006636:	480c      	ldr	r0, [pc, #48]	; (8006668 <UART_SetConfig+0x704>)
 8006638:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800663c:	2300      	movs	r3, #0
 800663e:	f7f9 fe4f 	bl	80002e0 <__aeabi_uldivmod>
 8006642:	4623      	mov	r3, r4
 8006644:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8006648:	4632      	mov	r2, r6
 800664a:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800664e:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8006652:	eb18 0007 	adds.w	r0, r8, r7
 8006656:	f149 0100 	adc.w	r1, r9, #0
 800665a:	f7f9 fe41 	bl	80002e0 <__aeabi_uldivmod>
 800665e:	4623      	mov	r3, r4
 8006660:	e72c      	b.n	80064bc <UART_SetConfig+0x558>
 8006662:	bf00      	nop
 8006664:	58024400 	.word	0x58024400
 8006668:	03d09000 	.word	0x03d09000
 800666c:	08008300 	.word	0x08008300
 8006670:	003d0900 	.word	0x003d0900

08006674 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006674:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006676:	07da      	lsls	r2, r3, #31
{
 8006678:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800667a:	d506      	bpl.n	800668a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800667c:	6801      	ldr	r1, [r0, #0]
 800667e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006680:	684a      	ldr	r2, [r1, #4]
 8006682:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006686:	4322      	orrs	r2, r4
 8006688:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800668a:	079c      	lsls	r4, r3, #30
 800668c:	d506      	bpl.n	800669c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800668e:	6801      	ldr	r1, [r0, #0]
 8006690:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006692:	684a      	ldr	r2, [r1, #4]
 8006694:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006698:	4322      	orrs	r2, r4
 800669a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800669c:	0759      	lsls	r1, r3, #29
 800669e:	d506      	bpl.n	80066ae <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066a0:	6801      	ldr	r1, [r0, #0]
 80066a2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80066a4:	684a      	ldr	r2, [r1, #4]
 80066a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80066aa:	4322      	orrs	r2, r4
 80066ac:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066ae:	071a      	lsls	r2, r3, #28
 80066b0:	d506      	bpl.n	80066c0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066b2:	6801      	ldr	r1, [r0, #0]
 80066b4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80066b6:	684a      	ldr	r2, [r1, #4]
 80066b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066bc:	4322      	orrs	r2, r4
 80066be:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066c0:	06dc      	lsls	r4, r3, #27
 80066c2:	d506      	bpl.n	80066d2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066c4:	6801      	ldr	r1, [r0, #0]
 80066c6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80066c8:	688a      	ldr	r2, [r1, #8]
 80066ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066ce:	4322      	orrs	r2, r4
 80066d0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066d2:	0699      	lsls	r1, r3, #26
 80066d4:	d506      	bpl.n	80066e4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066d6:	6801      	ldr	r1, [r0, #0]
 80066d8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80066da:	688a      	ldr	r2, [r1, #8]
 80066dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066e0:	4322      	orrs	r2, r4
 80066e2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066e4:	065a      	lsls	r2, r3, #25
 80066e6:	d50a      	bpl.n	80066fe <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066e8:	6801      	ldr	r1, [r0, #0]
 80066ea:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80066ec:	684a      	ldr	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ee:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066f2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80066f6:	ea42 0204 	orr.w	r2, r2, r4
 80066fa:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066fc:	d00b      	beq.n	8006716 <UART_AdvFeatureConfig+0xa2>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066fe:	061b      	lsls	r3, r3, #24
 8006700:	d506      	bpl.n	8006710 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006702:	6802      	ldr	r2, [r0, #0]
 8006704:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8006706:	6853      	ldr	r3, [r2, #4]
 8006708:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800670c:	430b      	orrs	r3, r1
 800670e:	6053      	str	r3, [r2, #4]
}
 8006710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006714:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006716:	684a      	ldr	r2, [r1, #4]
 8006718:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800671a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800671e:	4322      	orrs	r2, r4
 8006720:	604a      	str	r2, [r1, #4]
 8006722:	e7ec      	b.n	80066fe <UART_AdvFeatureConfig+0x8a>

08006724 <UART_WaitOnFlagUntilTimeout>:
{
 8006724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006728:	9d08      	ldr	r5, [sp, #32]
 800672a:	4680      	mov	r8, r0
 800672c:	460f      	mov	r7, r1
 800672e:	4616      	mov	r6, r2
 8006730:	4699      	mov	r9, r3
 8006732:	f8d8 4000 	ldr.w	r4, [r8]
 8006736:	e001      	b.n	800673c <UART_WaitOnFlagUntilTimeout+0x18>
    if(Timeout != HAL_MAX_DELAY)
 8006738:	1c6b      	adds	r3, r5, #1
 800673a:	d10a      	bne.n	8006752 <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673c:	69e0      	ldr	r0, [r4, #28]
 800673e:	ea37 0300 	bics.w	r3, r7, r0
 8006742:	bf0c      	ite	eq
 8006744:	2001      	moveq	r0, #1
 8006746:	2000      	movne	r0, #0
 8006748:	42b0      	cmp	r0, r6
 800674a:	d0f5      	beq.n	8006738 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 800674c:	2000      	movs	r0, #0
}
 800674e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006752:	b13d      	cbz	r5, 8006764 <UART_WaitOnFlagUntilTimeout+0x40>
 8006754:	f7fc fa10 	bl	8002b78 <HAL_GetTick>
 8006758:	eba0 0009 	sub.w	r0, r0, r9
 800675c:	4285      	cmp	r5, r0
 800675e:	d2e8      	bcs.n	8006732 <UART_WaitOnFlagUntilTimeout+0xe>
 8006760:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006764:	6823      	ldr	r3, [r4, #0]
        huart->gState = HAL_UART_STATE_READY;
 8006766:	2220      	movs	r2, #32
        __HAL_UNLOCK(huart);
 8006768:	2100      	movs	r1, #0
 800676a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800676c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006770:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006772:	68a3      	ldr	r3, [r4, #8]
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 800677a:	f888 2079 	strb.w	r2, [r8, #121]	; 0x79
        __HAL_UNLOCK(huart);
 800677e:	f888 1078 	strb.w	r1, [r8, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006782:	f888 207a 	strb.w	r2, [r8, #122]	; 0x7a
 8006786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800678a:	bf00      	nop

0800678c <HAL_UART_Transmit>:
{
 800678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006790:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8006792:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
{
 8006796:	b084      	sub	sp, #16
  if(huart->gState == HAL_UART_STATE_READY)
 8006798:	2b20      	cmp	r3, #32
 800679a:	d003      	beq.n	80067a4 <HAL_UART_Transmit+0x18>
    return HAL_BUSY;
 800679c:	2002      	movs	r0, #2
}
 800679e:	b004      	add	sp, #16
 80067a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a4:	460e      	mov	r6, r1
    if((pData == NULL ) || (Size == 0U))
 80067a6:	b399      	cbz	r1, 8006810 <HAL_UART_Transmit+0x84>
 80067a8:	fab2 f382 	clz	r3, r2
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	bb7b      	cbnz	r3, 8006810 <HAL_UART_Transmit+0x84>
    __HAL_LOCK(huart);
 80067b0:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
 80067b4:	4604      	mov	r4, r0
 80067b6:	2901      	cmp	r1, #1
 80067b8:	d0f0      	beq.n	800679c <HAL_UART_Transmit+0x10>
 80067ba:	2001      	movs	r0, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067bc:	2121      	movs	r1, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067be:	67e3      	str	r3, [r4, #124]	; 0x7c
    __HAL_LOCK(huart);
 80067c0:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067c4:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
 80067c8:	9203      	str	r2, [sp, #12]
    tickstart = HAL_GetTick();
 80067ca:	f7fc f9d5 	bl	8002b78 <HAL_GetTick>
    huart->TxXferSize = Size;
 80067ce:	9a03      	ldr	r2, [sp, #12]
    tickstart = HAL_GetTick();
 80067d0:	4680      	mov	r8, r0
    huart->TxXferSize = Size;
 80067d2:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    huart->TxXferCount = Size;
 80067d6:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    while(huart->TxXferCount > 0U)
 80067da:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067de:	4643      	mov	r3, r8
 80067e0:	2200      	movs	r2, #0
 80067e2:	2180      	movs	r1, #128	; 0x80
    while(huart->TxXferCount > 0U)
 80067e4:	b2ad      	uxth	r5, r5
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067e6:	4620      	mov	r0, r4
    while(huart->TxXferCount > 0U)
 80067e8:	b305      	cbz	r5, 800682c <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 80067ea:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067ee:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80067f0:	3d01      	subs	r5, #1
 80067f2:	b2ad      	uxth	r5, r5
 80067f4:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067f8:	f7ff ff94 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 80067fc:	b9a0      	cbnz	r0, 8006828 <HAL_UART_Transmit+0x9c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067fe:	68a3      	ldr	r3, [r4, #8]
 8006800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006804:	d006      	beq.n	8006814 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8006806:	7832      	ldrb	r2, [r6, #0]
 8006808:	3601      	adds	r6, #1
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	851a      	strh	r2, [r3, #40]	; 0x28
 800680e:	e7e4      	b.n	80067da <HAL_UART_Transmit+0x4e>
      return  HAL_ERROR;
 8006810:	2001      	movs	r0, #1
 8006812:	e7c4      	b.n	800679e <HAL_UART_Transmit+0x12>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f5      	bne.n	8006806 <HAL_UART_Transmit+0x7a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800681a:	f836 3b02 	ldrh.w	r3, [r6], #2
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006824:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8006826:	e7d8      	b.n	80067da <HAL_UART_Transmit+0x4e>
        return HAL_TIMEOUT;
 8006828:	2003      	movs	r0, #3
 800682a:	e7b8      	b.n	800679e <HAL_UART_Transmit+0x12>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800682c:	9700      	str	r7, [sp, #0]
 800682e:	462a      	mov	r2, r5
 8006830:	2140      	movs	r1, #64	; 0x40
 8006832:	f7ff ff77 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 8006836:	2800      	cmp	r0, #0
 8006838:	d1f6      	bne.n	8006828 <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_READY;
 800683a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800683c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    huart->gState = HAL_UART_STATE_READY;
 8006840:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    return HAL_OK;
 8006844:	e7ab      	b.n	800679e <HAL_UART_Transmit+0x12>
 8006846:	bf00      	nop

08006848 <HAL_UART_Receive>:
{
 8006848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800684c:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800684e:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
{
 8006852:	b085      	sub	sp, #20
  if(huart->RxState == HAL_UART_STATE_READY)
 8006854:	2b20      	cmp	r3, #32
 8006856:	d003      	beq.n	8006860 <HAL_UART_Receive+0x18>
    return HAL_BUSY;
 8006858:	2002      	movs	r0, #2
}
 800685a:	b005      	add	sp, #20
 800685c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006860:	460e      	mov	r6, r1
    if((pData == NULL ) || (Size == 0U))
 8006862:	2900      	cmp	r1, #0
 8006864:	d044      	beq.n	80068f0 <HAL_UART_Receive+0xa8>
 8006866:	fab2 f382 	clz	r3, r2
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	2b00      	cmp	r3, #0
 800686e:	d13f      	bne.n	80068f0 <HAL_UART_Receive+0xa8>
    __HAL_LOCK(huart);
 8006870:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
 8006874:	4604      	mov	r4, r0
 8006876:	2901      	cmp	r1, #1
 8006878:	d0ee      	beq.n	8006858 <HAL_UART_Receive+0x10>
 800687a:	2001      	movs	r0, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800687c:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687e:	67e3      	str	r3, [r4, #124]	; 0x7c
    __HAL_LOCK(huart);
 8006880:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006884:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
 8006888:	9203      	str	r2, [sp, #12]
    tickstart = HAL_GetTick();
 800688a:	f7fc f975 	bl	8002b78 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800688e:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8006890:	4681      	mov	r9, r0
    huart->RxXferSize = Size;
 8006892:	9a03      	ldr	r2, [sp, #12]
    UART_MASK_COMPUTATION(huart);
 8006894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8006898:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    huart->RxXferCount = Size;
 800689c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    UART_MASK_COMPUTATION(huart);
 80068a0:	d045      	beq.n	800692e <HAL_UART_Receive+0xe6>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d138      	bne.n	8006918 <HAL_UART_Receive+0xd0>
 80068a6:	6923      	ldr	r3, [r4, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d03b      	beq.n	8006924 <HAL_UART_Receive+0xdc>
 80068ac:	f04f 087f 	mov.w	r8, #127	; 0x7f
 80068b0:	f8a4 806c 	strh.w	r8, [r4, #108]	; 0x6c
    while(huart->RxXferCount > 0U)
 80068b4:	f8b4 006a 	ldrh.w	r0, [r4, #106]	; 0x6a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068b8:	464b      	mov	r3, r9
 80068ba:	2200      	movs	r2, #0
 80068bc:	2120      	movs	r1, #32
    while(huart->RxXferCount > 0U)
 80068be:	b285      	uxth	r5, r0
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068c0:	4620      	mov	r0, r4
    while(huart->RxXferCount > 0U)
 80068c2:	b30d      	cbz	r5, 8006908 <HAL_UART_Receive+0xc0>
      huart->RxXferCount--;
 80068c4:	f8b4 506a 	ldrh.w	r5, [r4, #106]	; 0x6a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068c8:	9700      	str	r7, [sp, #0]
      huart->RxXferCount--;
 80068ca:	3d01      	subs	r5, #1
 80068cc:	b2ad      	uxth	r5, r5
 80068ce:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068d2:	f7ff ff27 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 80068d6:	b9e8      	cbnz	r0, 8006914 <HAL_UART_Receive+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068de:	d009      	beq.n	80068f4 <HAL_UART_Receive+0xac>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	3601      	adds	r6, #1
 80068e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068e6:	ea08 0303 	and.w	r3, r8, r3
 80068ea:	f806 3c01 	strb.w	r3, [r6, #-1]
 80068ee:	e7e1      	b.n	80068b4 <HAL_UART_Receive+0x6c>
      return  HAL_ERROR;
 80068f0:	2001      	movs	r0, #1
 80068f2:	e7b2      	b.n	800685a <HAL_UART_Receive+0x12>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f2      	bne.n	80068e0 <HAL_UART_Receive+0x98>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068fe:	ea08 0303 	and.w	r3, r8, r3
 8006902:	f826 3b02 	strh.w	r3, [r6], #2
        pData +=2U;
 8006906:	e7d5      	b.n	80068b4 <HAL_UART_Receive+0x6c>
    __HAL_UNLOCK(huart);
 8006908:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    return HAL_OK;
 800690c:	4628      	mov	r0, r5
    huart->RxState = HAL_UART_STATE_READY;
 800690e:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
    return HAL_OK;
 8006912:	e7a2      	b.n	800685a <HAL_UART_Receive+0x12>
        return HAL_TIMEOUT;
 8006914:	2003      	movs	r0, #3
 8006916:	e7a0      	b.n	800685a <HAL_UART_Receive+0x12>
    UART_MASK_COMPUTATION(huart);
 8006918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800691c:	d00f      	beq.n	800693e <HAL_UART_Receive+0xf6>
 800691e:	f8b4 806c 	ldrh.w	r8, [r4, #108]	; 0x6c
 8006922:	e7c7      	b.n	80068b4 <HAL_UART_Receive+0x6c>
 8006924:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8006928:	f8a4 806c 	strh.w	r8, [r4, #108]	; 0x6c
 800692c:	e7c2      	b.n	80068b4 <HAL_UART_Receive+0x6c>
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f7      	bne.n	8006924 <HAL_UART_Receive+0xdc>
 8006934:	f240 18ff 	movw	r8, #511	; 0x1ff
 8006938:	f8a4 806c 	strh.w	r8, [r4, #108]	; 0x6c
 800693c:	e7ba      	b.n	80068b4 <HAL_UART_Receive+0x6c>
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0b3      	beq.n	80068ac <HAL_UART_Receive+0x64>
 8006944:	f04f 083f 	mov.w	r8, #63	; 0x3f
 8006948:	f8a4 806c 	strh.w	r8, [r4, #108]	; 0x6c
    while(huart->RxXferCount > 0U)
 800694c:	e7b2      	b.n	80068b4 <HAL_UART_Receive+0x6c>
 800694e:	bf00      	nop

08006950 <UART_CheckIdleState>:
{
 8006950:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006952:	2500      	movs	r5, #0
{
 8006954:	4604      	mov	r4, r0
 8006956:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006958:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800695a:	f7fc f90d 	bl	8002b78 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800695e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006960:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	0712      	lsls	r2, r2, #28
 8006966:	d40d      	bmi.n	8006984 <UART_CheckIdleState+0x34>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	075b      	lsls	r3, r3, #29
 800696c:	d418      	bmi.n	80069a0 <UART_CheckIdleState+0x50>
  __HAL_UNLOCK(huart);
 800696e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006970:	2220      	movs	r2, #32
  return HAL_OK;
 8006972:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8006974:	f884 2079 	strb.w	r2, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 8006978:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800697c:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
}
 8006980:	b002      	add	sp, #8
 8006982:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006984:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8006988:	462a      	mov	r2, r5
 800698a:	4633      	mov	r3, r6
 800698c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006990:	9000      	str	r0, [sp, #0]
 8006992:	4620      	mov	r0, r4
 8006994:	f7ff fec6 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 8006998:	b180      	cbz	r0, 80069bc <UART_CheckIdleState+0x6c>
      return HAL_TIMEOUT;
 800699a:	2003      	movs	r0, #3
}
 800699c:	b002      	add	sp, #8
 800699e:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 80069a4:	4633      	mov	r3, r6
 80069a6:	2200      	movs	r2, #0
 80069a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069ac:	9000      	str	r0, [sp, #0]
 80069ae:	4620      	mov	r0, r4
 80069b0:	f7ff feb8 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d0da      	beq.n	800696e <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 80069b8:	2003      	movs	r0, #3
 80069ba:	e7ef      	b.n	800699c <UART_CheckIdleState+0x4c>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	e7d3      	b.n	8006968 <UART_CheckIdleState+0x18>

080069c0 <HAL_UART_Init>:
  if(huart == NULL)
 80069c0:	b390      	cbz	r0, 8006a28 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 80069c2:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
{
 80069c6:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80069c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80069cc:	4604      	mov	r4, r0
 80069ce:	b303      	cbz	r3, 8006a12 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 80069d0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80069d2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069d4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80069d6:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 80069da:	6813      	ldr	r3, [r2, #0]
 80069dc:	f023 0301 	bic.w	r3, r3, #1
 80069e0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069e2:	f7ff fabf 	bl	8005f64 <UART_SetConfig>
 80069e6:	2801      	cmp	r0, #1
 80069e8:	d018      	beq.n	8006a1c <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069ec:	b9c3      	cbnz	r3, 8006a20 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069ee:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80069f0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a00:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	f042 0201 	orr.w	r2, r2, #1
}
 8006a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8006a0c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006a0e:	f7ff bf9f 	b.w	8006950 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 8006a12:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8006a16:	f7fb faf9 	bl	800200c <HAL_UART_MspInit>
 8006a1a:	e7d9      	b.n	80069d0 <HAL_UART_Init+0x10>
}
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8006a20:	4620      	mov	r0, r4
 8006a22:	f7ff fe27 	bl	8006674 <UART_AdvFeatureConfig>
 8006a26:	e7e2      	b.n	80069ee <HAL_UART_Init+0x2e>
}
 8006a28:	2001      	movs	r0, #1
 8006a2a:	4770      	bx	lr

08006a2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop

08006a30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a30:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006a32:	f000 fea7 	bl	8007784 <vTaskStartScheduler>
  
  return osOK;
}
 8006a36:	2000      	movs	r0, #0
 8006a38:	bd08      	pop	{r3, pc}
 8006a3a:	bf00      	nop

08006a3c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a3c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a3e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8006a42:	b085      	sub	sp, #20
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8006a48:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a4a:	ad03      	add	r5, sp, #12
 8006a4c:	6811      	ldr	r1, [r2, #0]
    fpriority += (priority - osPriorityIdle);
 8006a4e:	bf14      	ite	ne
 8006a50:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a52:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a54:	8a12      	ldrh	r2, [r2, #16]
 8006a56:	6840      	ldr	r0, [r0, #4]
 8006a58:	e88d 0030 	stmia.w	sp, {r4, r5}
 8006a5c:	f000 fda0 	bl	80075a0 <xTaskCreate>
 8006a60:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006a62:	bf0c      	ite	eq
 8006a64:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8006a66:	2000      	movne	r0, #0
}
 8006a68:	b005      	add	sp, #20
 8006a6a:	bd30      	pop	{r4, r5, pc}

08006a6c <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	bf08      	it	eq
 8006a70:	2001      	moveq	r0, #1
{
 8006a72:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a74:	f001 f804 	bl	8007a80 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006a78:	2000      	movs	r0, #0
 8006a7a:	bd08      	pop	{r3, pc}

08006a7c <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	c803      	ldmia	r0, {r0, r1}
 8006a80:	f000 bbc2 	b.w	8007208 <xQueueGenericCreate>

08006a84 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006a84:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006a86:	f001 f96b 	bl	8007d60 <xTaskGetSchedulerState>
 8006a8a:	2801      	cmp	r0, #1
 8006a8c:	d003      	beq.n	8006a96 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8006a8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006a92:	f000 ba27 	b.w	8006ee4 <xPortSysTickHandler>
 8006a96:	bd08      	pop	{r3, pc}

08006a98 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a98:	4b11      	ldr	r3, [pc, #68]	; (8006ae0 <prvInsertBlockIntoFreeList+0x48>)
{
 8006a9a:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	4282      	cmp	r2, r0
 8006aa0:	d201      	bcs.n	8006aa6 <prvInsertBlockIntoFreeList+0xe>
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	e7fa      	b.n	8006a9c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006aa6:	685c      	ldr	r4, [r3, #4]
 8006aa8:	1919      	adds	r1, r3, r4
 8006aaa:	4288      	cmp	r0, r1
 8006aac:	d103      	bne.n	8006ab6 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006aae:	6841      	ldr	r1, [r0, #4]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	4421      	add	r1, r4
 8006ab4:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ab6:	6844      	ldr	r4, [r0, #4]
 8006ab8:	1901      	adds	r1, r0, r4
 8006aba:	428a      	cmp	r2, r1
 8006abc:	d109      	bne.n	8006ad2 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006abe:	4909      	ldr	r1, [pc, #36]	; (8006ae4 <prvInsertBlockIntoFreeList+0x4c>)
 8006ac0:	6809      	ldr	r1, [r1, #0]
 8006ac2:	428a      	cmp	r2, r1
 8006ac4:	d005      	beq.n	8006ad2 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ac6:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ac8:	6815      	ldr	r5, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006aca:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006acc:	6005      	str	r5, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ace:	6041      	str	r1, [r0, #4]
 8006ad0:	e000      	b.n	8006ad4 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ad2:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ad4:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ad6:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ad8:	bf18      	it	ne
 8006ada:	6018      	strne	r0, [r3, #0]
}
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20003dfc 	.word	0x20003dfc
 8006ae4:	200001ec 	.word	0x200001ec

08006ae8 <pvPortMalloc>:
{
 8006ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aec:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006aee:	f000 fe89 	bl	8007804 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006af2:	4849      	ldr	r0, [pc, #292]	; (8006c18 <pvPortMalloc+0x130>)
 8006af4:	6803      	ldr	r3, [r0, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d063      	beq.n	8006bc2 <pvPortMalloc+0xda>
 8006afa:	4b48      	ldr	r3, [pc, #288]	; (8006c1c <pvPortMalloc+0x134>)
 8006afc:	681e      	ldr	r6, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006afe:	4234      	tst	r4, r6
 8006b00:	d158      	bne.n	8006bb4 <pvPortMalloc+0xcc>
			if( xWantedSize > 0 )
 8006b02:	2c00      	cmp	r4, #0
 8006b04:	d056      	beq.n	8006bb4 <pvPortMalloc+0xcc>
				xWantedSize += xHeapStructSize;
 8006b06:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b0a:	0759      	lsls	r1, r3, #29
 8006b0c:	d002      	beq.n	8006b14 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b0e:	f023 0307 	bic.w	r3, r3, #7
 8006b12:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d04d      	beq.n	8006bb4 <pvPortMalloc+0xcc>
 8006b18:	4f41      	ldr	r7, [pc, #260]	; (8006c20 <pvPortMalloc+0x138>)
 8006b1a:	683d      	ldr	r5, [r7, #0]
 8006b1c:	42ab      	cmp	r3, r5
 8006b1e:	d849      	bhi.n	8006bb4 <pvPortMalloc+0xcc>
				pxBlock = xStart.pxNextFreeBlock;
 8006b20:	4940      	ldr	r1, [pc, #256]	; (8006c24 <pvPortMalloc+0x13c>)
 8006b22:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b24:	e006      	b.n	8006b34 <pvPortMalloc+0x4c>
 8006b26:	f8d4 e000 	ldr.w	lr, [r4]
 8006b2a:	f1be 0f00 	cmp.w	lr, #0
 8006b2e:	d004      	beq.n	8006b3a <pvPortMalloc+0x52>
 8006b30:	4621      	mov	r1, r4
 8006b32:	4674      	mov	r4, lr
 8006b34:	6862      	ldr	r2, [r4, #4]
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d8f5      	bhi.n	8006b26 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	4284      	cmp	r4, r0
 8006b3e:	d039      	beq.n	8006bb4 <pvPortMalloc+0xcc>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b40:	eba2 0e03 	sub.w	lr, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b44:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b46:	f8d1 8000 	ldr.w	r8, [r1]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b4a:	f1be 0f10 	cmp.w	lr, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b4e:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b50:	d913      	bls.n	8006b7a <pvPortMalloc+0x92>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b52:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b54:	0742      	lsls	r2, r0, #29
 8006b56:	d00a      	beq.n	8006b6e <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	b672      	cpsid	i
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	b662      	cpsie	i
 8006b6c:	e7fe      	b.n	8006b6c <pvPortMalloc+0x84>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b6e:	f8c0 e004 	str.w	lr, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b72:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b74:	f7ff ff90 	bl	8006a98 <prvInsertBlockIntoFreeList>
 8006b78:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b7a:	492b      	ldr	r1, [pc, #172]	; (8006c28 <pvPortMalloc+0x140>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b7c:	1aad      	subs	r5, r5, r2
					pxBlock->pxNextFreeBlock = NULL;
 8006b7e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b80:	4332      	orrs	r2, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b82:	6808      	ldr	r0, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b84:	f108 0808 	add.w	r8, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b88:	6062      	str	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b8a:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 8006b8c:	6023      	str	r3, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b8e:	603d      	str	r5, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b90:	bf38      	it	cc
 8006b92:	600d      	strcc	r5, [r1, #0]
	( void ) xTaskResumeAll();
 8006b94:	f000 fee8 	bl	8007968 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b98:	f018 0f07 	tst.w	r8, #7
 8006b9c:	d00e      	beq.n	8006bbc <pvPortMalloc+0xd4>
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	b672      	cpsid	i
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	b662      	cpsie	i
 8006bb2:	e7fe      	b.n	8006bb2 <pvPortMalloc+0xca>
	( void ) xTaskResumeAll();
 8006bb4:	f04f 0800 	mov.w	r8, #0
 8006bb8:	f000 fed6 	bl	8007968 <xTaskResumeAll>
}
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 8006bc2:	4a1a      	ldr	r2, [pc, #104]	; (8006c2c <pvPortMalloc+0x144>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bc4:	0755      	lsls	r5, r2, #29
 8006bc6:	d024      	beq.n	8006c12 <pvPortMalloc+0x12a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bc8:	1dd1      	adds	r1, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bca:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bce:	f021 0207 	bic.w	r2, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bd2:	1a9b      	subs	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006bd4:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bd6:	f8df e04c 	ldr.w	lr, [pc, #76]	; 8006c24 <pvPortMalloc+0x13c>
	xStart.xBlockSize = ( size_t ) 0;
 8006bda:	2500      	movs	r5, #0
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bdc:	4e12      	ldr	r6, [pc, #72]	; (8006c28 <pvPortMalloc+0x140>)
	uxAddress -= xHeapStructSize;
 8006bde:	3b08      	subs	r3, #8
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006be0:	f8ce 2000 	str.w	r2, [lr]
	xStart.xBlockSize = ( size_t ) 0;
 8006be4:	f8ce 5004 	str.w	r5, [lr, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006be8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bec:	f023 0307 	bic.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bf0:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8006c20 <pvPortMalloc+0x138>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bf4:	f8df e024 	ldr.w	lr, [pc, #36]	; 8006c1c <pvPortMalloc+0x134>
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bf8:	1a99      	subs	r1, r3, r2
	pxEnd->xBlockSize = 0;
 8006bfa:	605d      	str	r5, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bfc:	601d      	str	r5, [r3, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bfe:	6031      	str	r1, [r6, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c00:	463e      	mov	r6, r7
	pxEnd = ( void * ) uxAddress;
 8006c02:	6003      	str	r3, [r0, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c04:	f8cc 1000 	str.w	r1, [ip]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c08:	f8ce 7000 	str.w	r7, [lr]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c0c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	e775      	b.n	8006afe <pvPortMalloc+0x16>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c12:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c16:	e7dd      	b.n	8006bd4 <pvPortMalloc+0xec>
 8006c18:	200001ec 	.word	0x200001ec
 8006c1c:	20003df0 	.word	0x20003df0
 8006c20:	20003df4 	.word	0x20003df4
 8006c24:	20003dfc 	.word	0x20003dfc
 8006c28:	20003df8 	.word	0x20003df8
 8006c2c:	200001f0 	.word	0x200001f0

08006c30 <vPortFree>:
	if( pv != NULL )
 8006c30:	b1f0      	cbz	r0, 8006c70 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c32:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <vPortFree+0x70>)
 8006c34:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006c38:	6812      	ldr	r2, [r2, #0]
 8006c3a:	4213      	tst	r3, r2
 8006c3c:	d10a      	bne.n	8006c54 <vPortFree+0x24>
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	b672      	cpsid	i
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	b662      	cpsie	i
 8006c52:	e7fe      	b.n	8006c52 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c54:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006c58:	b159      	cbz	r1, 8006c72 <vPortFree+0x42>
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	b672      	cpsid	i
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	b662      	cpsie	i
 8006c6e:	e7fe      	b.n	8006c6e <vPortFree+0x3e>
 8006c70:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c72:	ea23 0302 	bic.w	r3, r3, r2
{
 8006c76:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c78:	f840 3c04 	str.w	r3, [r0, #-4]
 8006c7c:	4604      	mov	r4, r0
				vTaskSuspendAll();
 8006c7e:	f000 fdc1 	bl	8007804 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c82:	4a08      	ldr	r2, [pc, #32]	; (8006ca4 <vPortFree+0x74>)
 8006c84:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c88:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c8c:	6811      	ldr	r1, [r2, #0]
 8006c8e:	440b      	add	r3, r1
 8006c90:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c92:	f7ff ff01 	bl	8006a98 <prvInsertBlockIntoFreeList>
}
 8006c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8006c9a:	f000 be65 	b.w	8007968 <xTaskResumeAll>
 8006c9e:	bf00      	nop
 8006ca0:	20003df0 	.word	0x20003df0
 8006ca4:	20003df4 	.word	0x20003df4

08006ca8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ca8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cac:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cb0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cb2:	6081      	str	r1, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb6:	6103      	str	r3, [r0, #16]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb8:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop

08006cc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	6103      	str	r3, [r0, #16]
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop

08006cc8 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006cc8:	e890 000c 	ldmia.w	r0, {r2, r3}
{
 8006ccc:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cce:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8006cd0:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8006cd2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cd4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cd6:	689c      	ldr	r4, [r3, #8]
 8006cd8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cda:	6099      	str	r1, [r3, #8]
}
 8006cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006ce0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006ce2:	6002      	str	r2, [r0, #0]
}
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop

08006ce8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ce8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006cea:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cec:	1c6b      	adds	r3, r5, #1
 8006cee:	d011      	beq.n	8006d14 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf0:	f100 0208 	add.w	r2, r0, #8
 8006cf4:	e000      	b.n	8006cf8 <vListInsert+0x10>
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6853      	ldr	r3, [r2, #4]
 8006cfa:	681c      	ldr	r4, [r3, #0]
 8006cfc:	42a5      	cmp	r5, r4
 8006cfe:	d2fa      	bcs.n	8006cf6 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006d00:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d02:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8006d04:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d06:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d08:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d0a:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d0c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006d0e:	6004      	str	r4, [r0, #0]
}
 8006d10:	bc30      	pop	{r4, r5}
 8006d12:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d14:	6902      	ldr	r2, [r0, #16]
 8006d16:	6853      	ldr	r3, [r2, #4]
 8006d18:	e7f2      	b.n	8006d00 <vListInsert+0x18>
 8006d1a:	bf00      	nop

08006d1c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006d1c:	6902      	ldr	r2, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d1e:	6843      	ldr	r3, [r0, #4]
 8006d20:	6881      	ldr	r1, [r0, #8]
{
 8006d22:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d24:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d26:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d28:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8006d2a:	42a0      	cmp	r0, r4

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8006d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d30:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )--;
 8006d32:	6813      	ldr	r3, [r2, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d34:	bf08      	it	eq
 8006d36:	6051      	streq	r1, [r2, #4]
	pxItemToRemove->pvContainer = NULL;
 8006d38:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8006d3a:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 8006d3c:	6101      	str	r1, [r0, #16]
}
 8006d3e:	4618      	mov	r0, r3
	( pxList->uxNumberOfItems )--;
 8006d40:	6013      	str	r3, [r2, #0]
}
 8006d42:	4770      	bx	lr

08006d44 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d44:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <prvTaskExitError+0x34>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	d00a      	beq.n	8006d62 <prvTaskExitError+0x1e>
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	b672      	cpsid	i
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	b662      	cpsie	i
 8006d60:	e7fe      	b.n	8006d60 <prvTaskExitError+0x1c>
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	b672      	cpsid	i
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	b662      	cpsie	i
 8006d76:	e7fe      	b.n	8006d76 <prvTaskExitError+0x32>
 8006d78:	200000a0 	.word	0x200000a0

08006d7c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006d7c:	4806      	ldr	r0, [pc, #24]	; (8006d98 <prvPortStartFirstTask+0x1c>)
 8006d7e:	6800      	ldr	r0, [r0, #0]
 8006d80:	6800      	ldr	r0, [r0, #0]
 8006d82:	f380 8808 	msr	MSP, r0
 8006d86:	b662      	cpsie	i
 8006d88:	b661      	cpsie	f
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	df00      	svc	0
 8006d94:	bf00      	nop
 8006d96:	0000      	.short	0x0000
 8006d98:	e000ed08 	.word	0xe000ed08

08006d9c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d9c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006dac <vPortEnableVFP+0x10>
 8006da0:	6801      	ldr	r1, [r0, #0]
 8006da2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006da6:	6001      	str	r1, [r0, #0]
 8006da8:	4770      	bx	lr
 8006daa:	0000      	.short	0x0000
 8006dac:	e000ed88 	.word	0xe000ed88

08006db0 <pxPortInitialiseStack>:
{
 8006db0:	b470      	push	{r4, r5, r6}
 8006db2:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006db4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006db8:	4d08      	ldr	r5, [pc, #32]	; (8006ddc <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8006dba:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006dbe:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006dc2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006dc6:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006dc8:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dca:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dce:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8006dd2:	f843 4c24 	str.w	r4, [r3, #-36]
}
 8006dd6:	bc70      	pop	{r4, r5, r6}
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	08006d45 	.word	0x08006d45

08006de0 <SVC_Handler>:
	__asm volatile (
 8006de0:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <pxCurrentTCBConst2>)
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	6808      	ldr	r0, [r1, #0]
 8006de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dea:	f380 8809 	msr	PSP, r0
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f04f 0000 	mov.w	r0, #0
 8006df6:	f380 8811 	msr	BASEPRI, r0
 8006dfa:	4770      	bx	lr
 8006dfc:	f3af 8000 	nop.w

08006e00 <pxCurrentTCBConst2>:
 8006e00:	20003e0c 	.word	0x20003e0c

08006e04 <vPortEnterCritical>:
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	b672      	cpsid	i
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	b662      	cpsie	i
	uxCriticalNesting++;
 8006e18:	4a0b      	ldr	r2, [pc, #44]	; (8006e48 <vPortEnterCritical+0x44>)
 8006e1a:	6813      	ldr	r3, [r2, #0]
 8006e1c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8006e1e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006e20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006e22:	d000      	beq.n	8006e26 <vPortEnterCritical+0x22>
 8006e24:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e26:	4b09      	ldr	r3, [pc, #36]	; (8006e4c <vPortEnterCritical+0x48>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e2e:	d0f9      	beq.n	8006e24 <vPortEnterCritical+0x20>
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	b672      	cpsid	i
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	b662      	cpsie	i
 8006e44:	e7fe      	b.n	8006e44 <vPortEnterCritical+0x40>
 8006e46:	bf00      	nop
 8006e48:	200000a0 	.word	0x200000a0
 8006e4c:	e000ed04 	.word	0xe000ed04

08006e50 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006e50:	4a09      	ldr	r2, [pc, #36]	; (8006e78 <vPortExitCritical+0x28>)
 8006e52:	6813      	ldr	r3, [r2, #0]
 8006e54:	b953      	cbnz	r3, 8006e6c <vPortExitCritical+0x1c>
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	b672      	cpsid	i
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	b662      	cpsie	i
 8006e6a:	e7fe      	b.n	8006e6a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e70:	b90b      	cbnz	r3, 8006e76 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	4770      	bx	lr
 8006e78:	200000a0 	.word	0x200000a0
 8006e7c:	00000000 	.word	0x00000000

08006e80 <PendSV_Handler>:
	__asm volatile
 8006e80:	f3ef 8009 	mrs	r0, PSP
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <pxCurrentTCBConst>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	f01e 0f10 	tst.w	lr, #16
 8006e90:	bf08      	it	eq
 8006e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	6010      	str	r0, [r2, #0]
 8006e9c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8006ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ea4:	b672      	cpsid	i
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	b662      	cpsie	i
 8006eb4:	f000 fe54 	bl	8007b60 <vTaskSwitchContext>
 8006eb8:	f04f 0000 	mov.w	r0, #0
 8006ebc:	f380 8811 	msr	BASEPRI, r0
 8006ec0:	bc08      	pop	{r3}
 8006ec2:	6819      	ldr	r1, [r3, #0]
 8006ec4:	6808      	ldr	r0, [r1, #0]
 8006ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eca:	f01e 0f10 	tst.w	lr, #16
 8006ece:	bf08      	it	eq
 8006ed0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ed4:	f380 8809 	msr	PSP, r0
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop

08006ee0 <pxCurrentTCBConst>:
 8006ee0:	20003e0c 	.word	0x20003e0c

08006ee4 <xPortSysTickHandler>:
{
 8006ee4:	b508      	push	{r3, lr}
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	b672      	cpsid	i
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8006efa:	f000 fc8b 	bl	8007814 <xTaskIncrementTick>
 8006efe:	b118      	cbz	r0, 8006f08 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f00:	4b03      	ldr	r3, [pc, #12]	; (8006f10 <xPortSysTickHandler+0x2c>)
 8006f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f06:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	bd08      	pop	{r3, pc}
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f14:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f16:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f18:	4a06      	ldr	r2, [pc, #24]	; (8006f34 <vPortSetupTimerInterrupt+0x20>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4806      	ldr	r0, [pc, #24]	; (8006f38 <vPortSetupTimerInterrupt+0x24>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f22:	4a06      	ldr	r2, [pc, #24]	; (8006f3c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f24:	099b      	lsrs	r3, r3, #6
 8006f26:	3b01      	subs	r3, #1
 8006f28:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f2a:	6011      	str	r1, [r2, #0]
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	20000094 	.word	0x20000094
 8006f34:	10624dd3 	.word	0x10624dd3
 8006f38:	e000e014 	.word	0xe000e014
 8006f3c:	e000e010 	.word	0xe000e010

08006f40 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f40:	4b23      	ldr	r3, [pc, #140]	; (8006fd0 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f42:	2207      	movs	r2, #7
 8006f44:	4823      	ldr	r0, [pc, #140]	; (8006fd4 <xPortStartScheduler+0x94>)
{
 8006f46:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f48:	7819      	ldrb	r1, [r3, #0]
{
 8006f4a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f4c:	25ff      	movs	r5, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f4e:	4c22      	ldr	r4, [pc, #136]	; (8006fd8 <xPortStartScheduler+0x98>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f50:	b2c9      	uxtb	r1, r1
 8006f52:	9101      	str	r1, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f54:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f56:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f58:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f60:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f64:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f68:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f6c:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f6e:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f70:	d50d      	bpl.n	8006f8e <xPortStartScheduler+0x4e>
 8006f72:	2206      	movs	r2, #6
 8006f74:	e000      	b.n	8006f78 <xPortStartScheduler+0x38>
 8006f76:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f78:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f7c:	1e51      	subs	r1, r2, #1
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	d4f3      	bmi.n	8006f76 <xPortStartScheduler+0x36>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f8e:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f90:	0212      	lsls	r2, r2, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f92:	4b12      	ldr	r3, [pc, #72]	; (8006fdc <xPortStartScheduler+0x9c>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f94:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f96:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f9a:	4c0d      	ldr	r4, [pc, #52]	; (8006fd0 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f9c:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f9e:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006fa6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006fae:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8006fb0:	f7ff ffb0 	bl	8006f14 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <xPortStartScheduler+0xa0>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8006fba:	f7ff feef 	bl	8006d9c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fbe:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <xPortStartScheduler+0xa4>)
 8006fc0:	6813      	ldr	r3, [r2, #0]
 8006fc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fc6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8006fc8:	f7ff fed8 	bl	8006d7c <prvPortStartFirstTask>
	prvTaskExitError();
 8006fcc:	f7ff feba 	bl	8006d44 <prvTaskExitError>
 8006fd0:	e000e400 	.word	0xe000e400
 8006fd4:	20003e08 	.word	0x20003e08
 8006fd8:	20003e04 	.word	0x20003e04
 8006fdc:	e000ed20 	.word	0xe000ed20
 8006fe0:	200000a0 	.word	0x200000a0
 8006fe4:	e000ef34 	.word	0xe000ef34

08006fe8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8006fe8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fec:	2b0f      	cmp	r3, #15
 8006fee:	d910      	bls.n	8007012 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ff0:	4912      	ldr	r1, [pc, #72]	; (800703c <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ff2:	4a13      	ldr	r2, [pc, #76]	; (8007040 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ff4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ff6:	7812      	ldrb	r2, [r2, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d90a      	bls.n	8007012 <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	b672      	cpsid	i
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	b662      	cpsie	i
 8007010:	e7fe      	b.n	8007010 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007012:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <vPortValidateInterruptPriority+0x5c>)
 8007014:	4a0c      	ldr	r2, [pc, #48]	; (8007048 <vPortValidateInterruptPriority+0x60>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800701e:	4293      	cmp	r3, r2
 8007020:	d90a      	bls.n	8007038 <vPortValidateInterruptPriority+0x50>
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	b672      	cpsid	i
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	b662      	cpsie	i
 8007036:	e7fe      	b.n	8007036 <vPortValidateInterruptPriority+0x4e>
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	e000e3f0 	.word	0xe000e3f0
 8007040:	20003e04 	.word	0x20003e04
 8007044:	e000ed0c 	.word	0xe000ed0c
 8007048:	20003e08 	.word	0x20003e08

0800704c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007050:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007052:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007054:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007056:	b932      	cbnz	r2, 8007066 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007058:	6805      	ldr	r5, [r0, #0]
 800705a:	bb3d      	cbnz	r5, 80070ac <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800705c:	6840      	ldr	r0, [r0, #4]
 800705e:	f000 fedd 	bl	8007e1c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8007062:	6065      	str	r5, [r4, #4]
 8007064:	e025      	b.n	80070b2 <prvCopyDataToQueue+0x66>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007066:	b96d      	cbnz	r5, 8007084 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007068:	6880      	ldr	r0, [r0, #8]
 800706a:	f000 ff71 	bl	8007f50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800706e:	68a3      	ldr	r3, [r4, #8]
 8007070:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007072:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007074:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007076:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007078:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800707a:	d317      	bcc.n	80070ac <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800707c:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800707e:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007080:	60a3      	str	r3, [r4, #8]
 8007082:	e016      	b.n	80070b2 <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007084:	68c0      	ldr	r0, [r0, #12]
 8007086:	f000 ff63 	bl	8007f50 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800708a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800708c:	68e2      	ldr	r2, [r4, #12]
 800708e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007090:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007092:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007094:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007096:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007098:	d202      	bcs.n	80070a0 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800709a:	6862      	ldr	r2, [r4, #4]
 800709c:	4413      	add	r3, r2
 800709e:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070a0:	2d02      	cmp	r5, #2
 80070a2:	d103      	bne.n	80070ac <prvCopyDataToQueue+0x60>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070a4:	b126      	cbz	r6, 80070b0 <prvCopyDataToQueue+0x64>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070a6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80070a8:	2000      	movs	r0, #0
 80070aa:	e002      	b.n	80070b2 <prvCopyDataToQueue+0x66>
 80070ac:	2000      	movs	r0, #0
 80070ae:	e000      	b.n	80070b2 <prvCopyDataToQueue+0x66>
 80070b0:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80070b2:	3601      	adds	r6, #1
 80070b4:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80070b6:	bd70      	pop	{r4, r5, r6, pc}

080070b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80070ba:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070bc:	b172      	cbz	r2, 80070dc <prvCopyDataFromQueue+0x24>
 80070be:	4608      	mov	r0, r1
{
 80070c0:	b410      	push	{r4}
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80070c2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070c4:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80070c6:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070c8:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80070ca:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070cc:	d301      	bcc.n	80070d2 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80070ce:	6819      	ldr	r1, [r3, #0]
 80070d0:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80070d2:	68d9      	ldr	r1, [r3, #12]
	}
}
 80070d4:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80070d8:	f000 bf3a 	b.w	8007f50 <memcpy>
 80070dc:	4770      	bx	lr
	...

080070e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070e4:	f7ff fe8e 	bl	8006e04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070e8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80070ec:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070ee:	2c00      	cmp	r4, #0
 80070f0:	dd16      	ble.n	8007120 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070f4:	b1a3      	cbz	r3, 8007120 <prvUnlockQueue+0x40>
 80070f6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80070fa:	e005      	b.n	8007108 <prvUnlockQueue+0x28>
 80070fc:	3c01      	subs	r4, #1
 80070fe:	b2e3      	uxtb	r3, r4
 8007100:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007102:	b16b      	cbz	r3, 8007120 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007104:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007106:	b15b      	cbz	r3, 8007120 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007108:	4630      	mov	r0, r6
 800710a:	f000 fd83 	bl	8007c14 <xTaskRemoveFromEventList>
 800710e:	2800      	cmp	r0, #0
 8007110:	d0f4      	beq.n	80070fc <prvUnlockQueue+0x1c>
 8007112:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007114:	f000 fe1e 	bl	8007d54 <vTaskMissedYield>
 8007118:	b2e3      	uxtb	r3, r4
 800711a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1f1      	bne.n	8007104 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007120:	23ff      	movs	r3, #255	; 0xff
 8007122:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007126:	f7ff fe93 	bl	8006e50 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800712a:	f7ff fe6b 	bl	8006e04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800712e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8007132:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007134:	2c00      	cmp	r4, #0
 8007136:	dd16      	ble.n	8007166 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007138:	692b      	ldr	r3, [r5, #16]
 800713a:	b1a3      	cbz	r3, 8007166 <prvUnlockQueue+0x86>
 800713c:	f105 0610 	add.w	r6, r5, #16
 8007140:	e005      	b.n	800714e <prvUnlockQueue+0x6e>
 8007142:	3c01      	subs	r4, #1
 8007144:	b2e3      	uxtb	r3, r4
 8007146:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007148:	b16b      	cbz	r3, 8007166 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800714a:	692b      	ldr	r3, [r5, #16]
 800714c:	b15b      	cbz	r3, 8007166 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800714e:	4630      	mov	r0, r6
 8007150:	f000 fd60 	bl	8007c14 <xTaskRemoveFromEventList>
 8007154:	2800      	cmp	r0, #0
 8007156:	d0f4      	beq.n	8007142 <prvUnlockQueue+0x62>
 8007158:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 800715a:	f000 fdfb 	bl	8007d54 <vTaskMissedYield>
 800715e:	b2e3      	uxtb	r3, r4
 8007160:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f1      	bne.n	800714a <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007166:	23ff      	movs	r3, #255	; 0xff
 8007168:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800716c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007170:	f7ff be6e 	b.w	8006e50 <vPortExitCritical>

08007174 <xQueueGenericReset>:
	configASSERT( pxQueue );
 8007174:	b1e8      	cbz	r0, 80071b2 <xQueueGenericReset+0x3e>
{
 8007176:	b570      	push	{r4, r5, r6, lr}
 8007178:	4604      	mov	r4, r0
 800717a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800717c:	f7ff fe42 	bl	8006e04 <vPortEnterCritical>
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007180:	2600      	movs	r6, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007182:	6c21      	ldr	r1, [r4, #64]	; 0x40
		pxQueue->cRxLock = queueUNLOCKED;
 8007184:	20ff      	movs	r0, #255	; 0xff
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007186:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800718e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007190:	1a59      	subs	r1, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007192:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007194:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007196:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8007198:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800719c:	6063      	str	r3, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800719e:	60e2      	str	r2, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 80071a0:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80071a4:	bb15      	cbnz	r5, 80071ec <xQueueGenericReset+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071a6:	6923      	ldr	r3, [r4, #16]
 80071a8:	b973      	cbnz	r3, 80071c8 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 80071aa:	f7ff fe51 	bl	8006e50 <vPortExitCritical>
}
 80071ae:	2001      	movs	r0, #1
 80071b0:	bd70      	pop	{r4, r5, r6, pc}
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	e7fe      	b.n	80071c6 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071c8:	f104 0010 	add.w	r0, r4, #16
 80071cc:	f000 fd22 	bl	8007c14 <xTaskRemoveFromEventList>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d0ea      	beq.n	80071aa <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80071d4:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <xQueueGenericReset+0x90>)
 80071d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80071e4:	f7ff fe34 	bl	8006e50 <vPortExitCritical>
}
 80071e8:	2001      	movs	r0, #1
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80071ec:	f104 0010 	add.w	r0, r4, #16
 80071f0:	f7ff fd5a 	bl	8006ca8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80071f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80071f8:	f7ff fd56 	bl	8006ca8 <vListInitialise>
	taskEXIT_CRITICAL();
 80071fc:	f7ff fe28 	bl	8006e50 <vPortExitCritical>
}
 8007200:	2001      	movs	r0, #1
 8007202:	bd70      	pop	{r4, r5, r6, pc}
 8007204:	e000ed04 	.word	0xe000ed04

08007208 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007208:	b950      	cbnz	r0, 8007220 <xQueueGenericCreate+0x18>
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	b672      	cpsid	i
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	b662      	cpsie	i
 800721e:	e7fe      	b.n	800721e <xQueueGenericCreate+0x16>
	{
 8007220:	b570      	push	{r4, r5, r6, lr}
 8007222:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007224:	fb01 f000 	mul.w	r0, r1, r0
 8007228:	460d      	mov	r5, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800722a:	3048      	adds	r0, #72	; 0x48
 800722c:	f7ff fc5c 	bl	8006ae8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007230:	4604      	mov	r4, r0
 8007232:	b138      	cbz	r0, 8007244 <xQueueGenericCreate+0x3c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007234:	b945      	cbnz	r5, 8007248 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007236:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8007238:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800723a:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800723c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800723e:	4620      	mov	r0, r4
 8007240:	f7ff ff98 	bl	8007174 <xQueueGenericReset>
	}
 8007244:	4620      	mov	r0, r4
 8007246:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007248:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800724c:	6003      	str	r3, [r0, #0]
 800724e:	e7f3      	b.n	8007238 <xQueueGenericCreate+0x30>

08007250 <xQueueGenericSendFromISR>:
{
 8007250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007254:	b318      	cbz	r0, 800729e <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007256:	2900      	cmp	r1, #0
 8007258:	d04a      	beq.n	80072f0 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800725a:	2b02      	cmp	r3, #2
 800725c:	d03a      	beq.n	80072d4 <xQueueGenericSendFromISR+0x84>
 800725e:	4604      	mov	r4, r0
 8007260:	461f      	mov	r7, r3
 8007262:	4690      	mov	r8, r2
 8007264:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007266:	f7ff febf 	bl	8006fe8 <vPortValidateInterruptPriority>
	__asm volatile
 800726a:	f3ef 8611 	mrs	r6, BASEPRI
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	b672      	cpsid	i
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007282:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007284:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007286:	429a      	cmp	r2, r3
 8007288:	d314      	bcc.n	80072b4 <xQueueGenericSendFromISR+0x64>
 800728a:	f1a7 0002 	sub.w	r0, r7, #2
 800728e:	fab0 f080 	clz	r0, r0
 8007292:	0940      	lsrs	r0, r0, #5
 8007294:	b970      	cbnz	r0, 80072b4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007296:	f386 8811 	msr	BASEPRI, r6
}
 800729a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	b672      	cpsid	i
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	b662      	cpsie	i
 80072b2:	e7fe      	b.n	80072b2 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 80072b4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072b8:	463a      	mov	r2, r7
 80072ba:	4649      	mov	r1, r9
 80072bc:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80072be:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072c0:	f7ff fec4 	bl	800704c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80072c4:	1c6b      	adds	r3, r5, #1
 80072c6:	d021      	beq.n	800730c <xQueueGenericSendFromISR+0xbc>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072c8:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 80072ca:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072cc:	b25b      	sxtb	r3, r3
 80072ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072d2:	e7e0      	b.n	8007296 <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072d4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80072d6:	2c01      	cmp	r4, #1
 80072d8:	d0c1      	beq.n	800725e <xQueueGenericSendFromISR+0xe>
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	b672      	cpsid	i
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	b662      	cpsie	i
 80072ee:	e7fe      	b.n	80072ee <xQueueGenericSendFromISR+0x9e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072f0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80072f2:	2c00      	cmp	r4, #0
 80072f4:	d0b1      	beq.n	800725a <xQueueGenericSendFromISR+0xa>
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	b672      	cpsid	i
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	b662      	cpsie	i
 800730a:	e7fe      	b.n	800730a <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800730c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800730e:	b90b      	cbnz	r3, 8007314 <xQueueGenericSendFromISR+0xc4>
			xReturn = pdPASS;
 8007310:	2001      	movs	r0, #1
 8007312:	e7c0      	b.n	8007296 <xQueueGenericSendFromISR+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007314:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007318:	f000 fc7c 	bl	8007c14 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 800731c:	2800      	cmp	r0, #0
 800731e:	d0f7      	beq.n	8007310 <xQueueGenericSendFromISR+0xc0>
 8007320:	f1b8 0f00 	cmp.w	r8, #0
 8007324:	d0f4      	beq.n	8007310 <xQueueGenericSendFromISR+0xc0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007326:	2001      	movs	r0, #1
 8007328:	f8c8 0000 	str.w	r0, [r8]
 800732c:	e7b3      	b.n	8007296 <xQueueGenericSendFromISR+0x46>
 800732e:	bf00      	nop

08007330 <xQueueGenericReceive>:
{
 8007330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007338:	2800      	cmp	r0, #0
 800733a:	f000 808f 	beq.w	800745c <xQueueGenericReceive+0x12c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800733e:	2900      	cmp	r1, #0
 8007340:	f000 80bf 	beq.w	80074c2 <xQueueGenericReceive+0x192>
 8007344:	4604      	mov	r4, r0
 8007346:	4699      	mov	r9, r3
 8007348:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800734a:	f000 fd09 	bl	8007d60 <xTaskGetSchedulerState>
 800734e:	b960      	cbnz	r0, 800736a <xQueueGenericReceive+0x3a>
 8007350:	9d01      	ldr	r5, [sp, #4]
 8007352:	b15d      	cbz	r5, 800736c <xQueueGenericReceive+0x3c>
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	b672      	cpsid	i
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	b662      	cpsie	i
 8007368:	e7fe      	b.n	8007368 <xQueueGenericReceive+0x38>
 800736a:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
 800736c:	f7ff fd4a 	bl	8006e04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007370:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8007372:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8007374:	f8df a168 	ldr.w	sl, [pc, #360]	; 80074e0 <xQueueGenericReceive+0x1b0>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007378:	2e00      	cmp	r6, #0
 800737a:	d143      	bne.n	8007404 <xQueueGenericReceive+0xd4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800737c:	9b01      	ldr	r3, [sp, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d07f      	beq.n	8007482 <xQueueGenericReceive+0x152>
				else if( xEntryTimeSet == pdFALSE )
 8007382:	b915      	cbnz	r5, 800738a <xQueueGenericReceive+0x5a>
					vTaskSetTimeOutState( &xTimeOut );
 8007384:	a802      	add	r0, sp, #8
 8007386:	f000 fc8d 	bl	8007ca4 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800738a:	f7ff fd61 	bl	8006e50 <vPortExitCritical>
		vTaskSuspendAll();
 800738e:	f000 fa39 	bl	8007804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007392:	f7ff fd37 	bl	8006e04 <vPortEnterCritical>
 8007396:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800739a:	2bff      	cmp	r3, #255	; 0xff
 800739c:	d101      	bne.n	80073a2 <xQueueGenericReceive+0x72>
 800739e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80073a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80073a6:	2bff      	cmp	r3, #255	; 0xff
 80073a8:	d101      	bne.n	80073ae <xQueueGenericReceive+0x7e>
 80073aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073ae:	f7ff fd4f 	bl	8006e50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073b2:	a901      	add	r1, sp, #4
 80073b4:	a802      	add	r0, sp, #8
 80073b6:	f000 fc85 	bl	8007cc4 <xTaskCheckForTimeOut>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d141      	bne.n	8007442 <xQueueGenericReceive+0x112>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073be:	f7ff fd21 	bl	8006e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d133      	bne.n	8007430 <xQueueGenericReceive+0x100>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80073c8:	f7ff fd42 	bl	8006e50 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d04f      	beq.n	8007472 <xQueueGenericReceive+0x142>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073d2:	9901      	ldr	r1, [sp, #4]
 80073d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80073d8:	f000 fc00 	bl	8007bdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073dc:	4620      	mov	r0, r4
 80073de:	f7ff fe7f 	bl	80070e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073e2:	f000 fac1 	bl	8007968 <xTaskResumeAll>
 80073e6:	b938      	cbnz	r0, 80073f8 <xQueueGenericReceive+0xc8>
					portYIELD_WITHIN_API();
 80073e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80073ec:	f8ca 3000 	str.w	r3, [sl]
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80073fa:	f7ff fd03 	bl	8006e04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073fe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007400:	2e00      	cmp	r6, #0
 8007402:	d0bb      	beq.n	800737c <xQueueGenericReceive+0x4c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007404:	4641      	mov	r1, r8
 8007406:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8007408:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800740a:	f7ff fe55 	bl	80070b8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800740e:	f1b9 0f00 	cmp.w	r9, #0
 8007412:	d13c      	bne.n	800748e <xQueueGenericReceive+0x15e>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8007414:	3e01      	subs	r6, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007416:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8007418:	63a6      	str	r6, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800741a:	b913      	cbnz	r3, 8007422 <xQueueGenericReceive+0xf2>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800741c:	f000 fd5c 	bl	8007ed8 <pvTaskIncrementMutexHeldCount>
 8007420:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d145      	bne.n	80074b4 <xQueueGenericReceive+0x184>
				taskEXIT_CRITICAL();
 8007428:	f7ff fd12 	bl	8006e50 <vPortExitCritical>
				return pdPASS;
 800742c:	2001      	movs	r0, #1
 800742e:	e02b      	b.n	8007488 <xQueueGenericReceive+0x158>
	taskEXIT_CRITICAL();
 8007430:	f7ff fd0e 	bl	8006e50 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007434:	4620      	mov	r0, r4
 8007436:	f7ff fe53 	bl	80070e0 <prvUnlockQueue>
 800743a:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 800743c:	f000 fa94 	bl	8007968 <xTaskResumeAll>
 8007440:	e7db      	b.n	80073fa <xQueueGenericReceive+0xca>
			prvUnlockQueue( pxQueue );
 8007442:	4620      	mov	r0, r4
 8007444:	f7ff fe4c 	bl	80070e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007448:	f000 fa8e 	bl	8007968 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800744c:	f7ff fcda 	bl	8006e04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007450:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007452:	b1b3      	cbz	r3, 8007482 <xQueueGenericReceive+0x152>
	taskEXIT_CRITICAL();
 8007454:	f7ff fcfc 	bl	8006e50 <vPortExitCritical>
 8007458:	2501      	movs	r5, #1
 800745a:	e7ce      	b.n	80073fa <xQueueGenericReceive+0xca>
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	b672      	cpsid	i
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	b662      	cpsie	i
 8007470:	e7fe      	b.n	8007470 <xQueueGenericReceive+0x140>
						taskENTER_CRITICAL();
 8007472:	f7ff fcc7 	bl	8006e04 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007476:	6860      	ldr	r0, [r4, #4]
 8007478:	f000 fc82 	bl	8007d80 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800747c:	f7ff fce8 	bl	8006e50 <vPortExitCritical>
 8007480:	e7a7      	b.n	80073d2 <xQueueGenericReceive+0xa2>
					taskEXIT_CRITICAL();
 8007482:	f7ff fce5 	bl	8006e50 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007486:	2000      	movs	r0, #0
}
 8007488:	b004      	add	sp, #16
 800748a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800748e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8007490:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0c8      	beq.n	8007428 <xQueueGenericReceive+0xf8>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007496:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800749a:	f000 fbbb 	bl	8007c14 <xTaskRemoveFromEventList>
 800749e:	2800      	cmp	r0, #0
 80074a0:	d0c2      	beq.n	8007428 <xQueueGenericReceive+0xf8>
							queueYIELD_IF_USING_PREEMPTION();
 80074a2:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <xQueueGenericReceive+0x1b0>)
 80074a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	e7b9      	b.n	8007428 <xQueueGenericReceive+0xf8>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074b4:	f104 0010 	add.w	r0, r4, #16
 80074b8:	f000 fbac 	bl	8007c14 <xTaskRemoveFromEventList>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d1f0      	bne.n	80074a2 <xQueueGenericReceive+0x172>
 80074c0:	e7b2      	b.n	8007428 <xQueueGenericReceive+0xf8>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80074c4:	2a00      	cmp	r2, #0
 80074c6:	f43f af3d 	beq.w	8007344 <xQueueGenericReceive+0x14>
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	b672      	cpsid	i
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	b662      	cpsie	i
 80074de:	e7fe      	b.n	80074de <xQueueGenericReceive+0x1ae>
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074e6:	4b1b      	ldr	r3, [pc, #108]	; (8007554 <prvAddCurrentTaskToDelayedList+0x70>)
{
 80074e8:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ea:	4d1b      	ldr	r5, [pc, #108]	; (8007558 <prvAddCurrentTaskToDelayedList+0x74>)
{
 80074ec:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80074ee:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074f0:	6828      	ldr	r0, [r5, #0]
 80074f2:	3004      	adds	r0, #4
 80074f4:	f7ff fc12 	bl	8006d1c <uxListRemove>
 80074f8:	b940      	cbnz	r0, 800750c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	2201      	movs	r2, #1
 80074fe:	4917      	ldr	r1, [pc, #92]	; (800755c <prvAddCurrentTaskToDelayedList+0x78>)
 8007500:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007502:	680b      	ldr	r3, [r1, #0]
 8007504:	4082      	lsls	r2, r0
 8007506:	ea23 0302 	bic.w	r3, r3, r2
 800750a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800750c:	1c63      	adds	r3, r4, #1
 800750e:	d100      	bne.n	8007512 <prvAddCurrentTaskToDelayedList+0x2e>
 8007510:	b9c7      	cbnz	r7, 8007544 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007512:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007514:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 8007516:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007518:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800751a:	d80b      	bhi.n	8007534 <prvAddCurrentTaskToDelayedList+0x50>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800751c:	4b10      	ldr	r3, [pc, #64]	; (8007560 <prvAddCurrentTaskToDelayedList+0x7c>)
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	6829      	ldr	r1, [r5, #0]
 8007522:	3104      	adds	r1, #4
 8007524:	f7ff fbe0 	bl	8006ce8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8007528:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <prvAddCurrentTaskToDelayedList+0x80>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	4294      	cmp	r4, r2
 800752e:	d200      	bcs.n	8007532 <prvAddCurrentTaskToDelayedList+0x4e>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8007530:	601c      	str	r4, [r3, #0]
 8007532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007534:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <prvAddCurrentTaskToDelayedList+0x84>)
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800753a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800753e:	3104      	adds	r1, #4
 8007540:	f7ff bbd2 	b.w	8006ce8 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007544:	6829      	ldr	r1, [r5, #0]
 8007546:	4809      	ldr	r0, [pc, #36]	; (800756c <prvAddCurrentTaskToDelayedList+0x88>)
 8007548:	3104      	adds	r1, #4
}
 800754a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800754e:	f7ff bbbb 	b.w	8006cc8 <vListInsertEnd>
 8007552:	bf00      	nop
 8007554:	20003f30 	.word	0x20003f30
 8007558:	20003e0c 	.word	0x20003e0c
 800755c:	20003eb8 	.word	0x20003eb8
 8007560:	20003e10 	.word	0x20003e10
 8007564:	20003ee8 	.word	0x20003ee8
 8007568:	20003e14 	.word	0x20003e14
 800756c:	20003f08 	.word	0x20003f08

08007570 <prvResetNextTaskUnblockTime.part.1>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007570:	4a03      	ldr	r2, [pc, #12]	; (8007580 <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007572:	4b04      	ldr	r3, [pc, #16]	; (8007584 <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007578:	68d2      	ldr	r2, [r2, #12]
 800757a:	6852      	ldr	r2, [r2, #4]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	4770      	bx	lr
 8007580:	20003e10 	.word	0x20003e10
 8007584:	20003ee8 	.word	0x20003ee8

08007588 <prvTaskIsTaskSuspended.part.0>:
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	b672      	cpsid	i
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	b662      	cpsie	i
 800759c:	e7fe      	b.n	800759c <prvTaskIsTaskSuspended.part.0+0x14>
 800759e:	bf00      	nop

080075a0 <xTaskCreate>:
	{
 80075a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80075a8:	4606      	mov	r6, r0
 80075aa:	4689      	mov	r9, r1
 80075ac:	461f      	mov	r7, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ae:	4650      	mov	r0, sl
	{
 80075b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075b2:	f7ff fa99 	bl	8006ae8 <pvPortMalloc>
			if( pxStack != NULL )
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f000 808e 	beq.w	80076d8 <xTaskCreate+0x138>
 80075bc:	4680      	mov	r8, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80075be:	2054      	movs	r0, #84	; 0x54
 80075c0:	f7ff fa92 	bl	8006ae8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80075c4:	4604      	mov	r4, r0
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f000 8093 	beq.w	80076f2 <xTaskCreate+0x152>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80075cc:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80075d0:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
 80075d4:	f109 33ff 	add.w	r3, r9, #4294967295
 80075d8:	f109 010f 	add.w	r1, r9, #15
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80075dc:	44d0      	add	r8, sl
 80075de:	f100 0233 	add.w	r2, r0, #51	; 0x33
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80075e2:	f028 0807 	bic.w	r8, r8, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075e6:	7858      	ldrb	r0, [r3, #1]
 80075e8:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 80075ec:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80075f0:	b108      	cbz	r0, 80075f6 <xTaskCreate+0x56>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075f2:	428b      	cmp	r3, r1
 80075f4:	d1f7      	bne.n	80075e6 <xTaskCreate+0x46>
 80075f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075f8:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075fc:	f104 0a04 	add.w	sl, r4, #4
 8007600:	2b06      	cmp	r3, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007602:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007606:	4650      	mov	r0, sl
		pxNewTCB->uxMutexesHeld = 0;
 8007608:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 800760c:	bf28      	it	cs
 800760e:	2306      	movcs	r3, #6
 8007610:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8007612:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007614:	6463      	str	r3, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007616:	f7ff fb53 	bl	8006cc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800761a:	f104 0018 	add.w	r0, r4, #24
 800761e:	f7ff fb4f 	bl	8006cc0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007622:	f1c9 0307 	rsb	r3, r9, #7
		pxNewTCB->ulNotifiedValue = 0;
 8007626:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800762a:	463a      	mov	r2, r7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762c:	61a3      	str	r3, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800762e:	4631      	mov	r1, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007630:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007634:	4640      	mov	r0, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007636:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007638:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800763a:	f7ff fbb9 	bl	8006db0 <pxPortInitialiseStack>
 800763e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8007640:	b105      	cbz	r5, 8007644 <xTaskCreate+0xa4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007642:	602c      	str	r4, [r5, #0]
	taskENTER_CRITICAL();
 8007644:	f7ff fbde 	bl	8006e04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007648:	4a40      	ldr	r2, [pc, #256]	; (800774c <xTaskCreate+0x1ac>)
		if( pxCurrentTCB == NULL )
 800764a:	4e41      	ldr	r6, [pc, #260]	; (8007750 <xTaskCreate+0x1b0>)
		uxCurrentNumberOfTasks++;
 800764c:	6813      	ldr	r3, [r2, #0]
 800764e:	3301      	adds	r3, #1
 8007650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007652:	6833      	ldr	r3, [r6, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d043      	beq.n	80076e0 <xTaskCreate+0x140>
			if( xSchedulerRunning == pdFALSE )
 8007658:	4f3e      	ldr	r7, [pc, #248]	; (8007754 <xTaskCreate+0x1b4>)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	b383      	cbz	r3, 80076c0 <xTaskCreate+0x120>
 800765e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007660:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8007774 <xTaskCreate+0x1d4>
		uxTaskNumber++;
 8007664:	f8df c110 	ldr.w	ip, [pc, #272]	; 8007778 <xTaskCreate+0x1d8>
		prvAddTaskToReadyList( pxNewTCB );
 8007668:	f04f 0b01 	mov.w	fp, #1
 800766c:	f8df e10c 	ldr.w	lr, [pc, #268]	; 800777c <xTaskCreate+0x1dc>
 8007670:	4651      	mov	r1, sl
		uxTaskNumber++;
 8007672:	f8dc 5000 	ldr.w	r5, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8007676:	fa0b f203 	lsl.w	r2, fp, r3
 800767a:	f8de 0000 	ldr.w	r0, [lr]
 800767e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 8007682:	eb05 090b 	add.w	r9, r5, fp
		prvAddTaskToReadyList( pxNewTCB );
 8007686:	4302      	orrs	r2, r0
 8007688:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 800768c:	f8cc 9000 	str.w	r9, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8007690:	f8ce 2000 	str.w	r2, [lr]
 8007694:	f7ff fb18 	bl	8006cc8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007698:	f7ff fbda 	bl	8006e50 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	b1c3      	cbz	r3, 80076d2 <xTaskCreate+0x132>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076a0:	6832      	ldr	r2, [r6, #0]
 80076a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80076a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d213      	bcs.n	80076d2 <xTaskCreate+0x132>
			taskYIELD_IF_USING_PREEMPTION();
 80076aa:	4b2b      	ldr	r3, [pc, #172]	; (8007758 <xTaskCreate+0x1b8>)
 80076ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 80076ba:	4658      	mov	r0, fp
 80076bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076c0:	6832      	ldr	r2, [r6, #0]
 80076c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80076c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076c6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8007774 <xTaskCreate+0x1d4>
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d8ca      	bhi.n	8007664 <xTaskCreate+0xc4>
					pxCurrentTCB = pxNewTCB;
 80076ce:	6034      	str	r4, [r6, #0]
 80076d0:	e7c8      	b.n	8007664 <xTaskCreate+0xc4>
			xReturn = pdPASS;
 80076d2:	4658      	mov	r0, fp
	}
 80076d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076d8:	f04f 30ff 	mov.w	r0, #4294967295
 80076dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 80076e0:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076e2:	6813      	ldr	r3, [r2, #0]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d00b      	beq.n	8007700 <xTaskCreate+0x160>
 80076e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80076ea:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8007774 <xTaskCreate+0x1d4>
 80076ee:	4f19      	ldr	r7, [pc, #100]	; (8007754 <xTaskCreate+0x1b4>)
 80076f0:	e7b8      	b.n	8007664 <xTaskCreate+0xc4>
					vPortFree( pxStack );
 80076f2:	4640      	mov	r0, r8
 80076f4:	f7ff fa9c 	bl	8006c30 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007700:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8007774 <xTaskCreate+0x1d4>
 8007704:	4645      	mov	r5, r8
 8007706:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800770a:	4628      	mov	r0, r5
 800770c:	3514      	adds	r5, #20
 800770e:	f7ff facb 	bl	8006ca8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007712:	42af      	cmp	r7, r5
 8007714:	d1f9      	bne.n	800770a <xTaskCreate+0x16a>
	vListInitialise( &xDelayedTaskList1 );
 8007716:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8007780 <xTaskCreate+0x1e0>
	vListInitialise( &xDelayedTaskList2 );
 800771a:	4d10      	ldr	r5, [pc, #64]	; (800775c <xTaskCreate+0x1bc>)
	vListInitialise( &xDelayedTaskList1 );
 800771c:	4648      	mov	r0, r9
 800771e:	4f0d      	ldr	r7, [pc, #52]	; (8007754 <xTaskCreate+0x1b4>)
 8007720:	f7ff fac2 	bl	8006ca8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007724:	4628      	mov	r0, r5
 8007726:	f7ff fabf 	bl	8006ca8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800772a:	480d      	ldr	r0, [pc, #52]	; (8007760 <xTaskCreate+0x1c0>)
 800772c:	f7ff fabc 	bl	8006ca8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007730:	480c      	ldr	r0, [pc, #48]	; (8007764 <xTaskCreate+0x1c4>)
 8007732:	f7ff fab9 	bl	8006ca8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8007736:	480c      	ldr	r0, [pc, #48]	; (8007768 <xTaskCreate+0x1c8>)
 8007738:	f7ff fab6 	bl	8006ca8 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800773c:	4b0b      	ldr	r3, [pc, #44]	; (800776c <xTaskCreate+0x1cc>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800773e:	4a0c      	ldr	r2, [pc, #48]	; (8007770 <xTaskCreate+0x1d0>)
 8007740:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007744:	601d      	str	r5, [r3, #0]
 8007746:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007748:	e78c      	b.n	8007664 <xTaskCreate+0xc4>
 800774a:	bf00      	nop
 800774c:	20003ea4 	.word	0x20003ea4
 8007750:	20003e0c 	.word	0x20003e0c
 8007754:	20003f04 	.word	0x20003f04
 8007758:	e000ed04 	.word	0xe000ed04
 800775c:	20003ed0 	.word	0x20003ed0
 8007760:	20003ef0 	.word	0x20003ef0
 8007764:	20003f1c 	.word	0x20003f1c
 8007768:	20003f08 	.word	0x20003f08
 800776c:	20003e14 	.word	0x20003e14
 8007770:	20003e10 	.word	0x20003e10
 8007774:	20003e18 	.word	0x20003e18
 8007778:	20003eb4 	.word	0x20003eb4
 800777c:	20003eb8 	.word	0x20003eb8
 8007780:	20003ebc 	.word	0x20003ebc

08007784 <vTaskStartScheduler>:
{
 8007784:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8007786:	4b19      	ldr	r3, [pc, #100]	; (80077ec <vTaskStartScheduler+0x68>)
{
 8007788:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800778a:	2400      	movs	r4, #0
 800778c:	2280      	movs	r2, #128	; 0x80
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	4917      	ldr	r1, [pc, #92]	; (80077f0 <vTaskStartScheduler+0x6c>)
 8007792:	4623      	mov	r3, r4
 8007794:	9400      	str	r4, [sp, #0]
 8007796:	4817      	ldr	r0, [pc, #92]	; (80077f4 <vTaskStartScheduler+0x70>)
 8007798:	f7ff ff02 	bl	80075a0 <xTaskCreate>
	if( xReturn == pdPASS )
 800779c:	2801      	cmp	r0, #1
 800779e:	d00e      	beq.n	80077be <vTaskStartScheduler+0x3a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077a0:	3001      	adds	r0, #1
 80077a2:	d001      	beq.n	80077a8 <vTaskStartScheduler+0x24>
}
 80077a4:	b003      	add	sp, #12
 80077a6:	bd30      	pop	{r4, r5, pc}
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	b672      	cpsid	i
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	b662      	cpsie	i
 80077bc:	e7fe      	b.n	80077bc <vTaskStartScheduler+0x38>
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	b672      	cpsid	i
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80077d2:	4909      	ldr	r1, [pc, #36]	; (80077f8 <vTaskStartScheduler+0x74>)
 80077d4:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 80077d8:	4a08      	ldr	r2, [pc, #32]	; (80077fc <vTaskStartScheduler+0x78>)
		xTickCount = ( TickType_t ) 0U;
 80077da:	4b09      	ldr	r3, [pc, #36]	; (8007800 <vTaskStartScheduler+0x7c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80077dc:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80077de:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 80077e0:	601c      	str	r4, [r3, #0]
}
 80077e2:	b003      	add	sp, #12
 80077e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80077e8:	f7ff bbaa 	b.w	8006f40 <xPortStartScheduler>
 80077ec:	20003ee4 	.word	0x20003ee4
 80077f0:	08008318 	.word	0x08008318
 80077f4:	08007ad1 	.word	0x08007ad1
 80077f8:	20003ee8 	.word	0x20003ee8
 80077fc:	20003f04 	.word	0x20003f04
 8007800:	20003f30 	.word	0x20003f30

08007804 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007804:	4a02      	ldr	r2, [pc, #8]	; (8007810 <vTaskSuspendAll+0xc>)
 8007806:	6813      	ldr	r3, [r2, #0]
 8007808:	3301      	adds	r3, #1
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	20003eb0 	.word	0x20003eb0

08007814 <xTaskIncrementTick>:
{
 8007814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007818:	4b48      	ldr	r3, [pc, #288]	; (800793c <xTaskIncrementTick+0x128>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d153      	bne.n	80078c8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8007820:	4b47      	ldr	r3, [pc, #284]	; (8007940 <xTaskIncrementTick+0x12c>)
 8007822:	681e      	ldr	r6, [r3, #0]
 8007824:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8007826:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8007828:	2e00      	cmp	r6, #0
 800782a:	d05a      	beq.n	80078e2 <xTaskIncrementTick+0xce>
 800782c:	f8df b130 	ldr.w	fp, [pc, #304]	; 8007960 <xTaskIncrementTick+0x14c>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007830:	f8db 2000 	ldr.w	r2, [fp]
 8007834:	2400      	movs	r4, #0
 8007836:	4296      	cmp	r6, r2
 8007838:	d362      	bcc.n	8007900 <xTaskIncrementTick+0xec>
 800783a:	4d42      	ldr	r5, [pc, #264]	; (8007944 <xTaskIncrementTick+0x130>)
 800783c:	4f42      	ldr	r7, [pc, #264]	; (8007948 <xTaskIncrementTick+0x134>)
 800783e:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8007964 <xTaskIncrementTick+0x150>
 8007842:	e02e      	b.n	80078a2 <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007844:	682a      	ldr	r2, [r5, #0]
 8007846:	68d2      	ldr	r2, [r2, #12]
 8007848:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800784c:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007850:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8007854:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007856:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8007858:	d365      	bcc.n	8007926 <xTaskIncrementTick+0x112>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800785a:	f7ff fa5f 	bl	8006d1c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800785e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007862:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007866:	b109      	cbz	r1, 800786c <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007868:	f7ff fa58 	bl	8006d1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800786c:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8007870:	2201      	movs	r2, #1
 8007872:	4b36      	ldr	r3, [pc, #216]	; (800794c <xTaskIncrementTick+0x138>)
 8007874:	4651      	mov	r1, sl
 8007876:	fa02 fe00 	lsl.w	lr, r2, r0
 800787a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8007884:	ea4e 0e03 	orr.w	lr, lr, r3
 8007888:	4b30      	ldr	r3, [pc, #192]	; (800794c <xTaskIncrementTick+0x138>)
 800788a:	f8c3 e000 	str.w	lr, [r3]
 800788e:	f7ff fa1b 	bl	8006cc8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007892:	f8d8 0000 	ldr.w	r0, [r8]
 8007896:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800789a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800789c:	4291      	cmp	r1, r2
 800789e:	bf28      	it	cs
 80078a0:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078a2:	682a      	ldr	r2, [r5, #0]
 80078a4:	6812      	ldr	r2, [r2, #0]
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	d1cc      	bne.n	8007844 <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078aa:	f04f 32ff 	mov.w	r2, #4294967295
 80078ae:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078b2:	f8d8 3000 	ldr.w	r3, [r8]
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80078bc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	bf28      	it	cs
 80078c4:	2401      	movcs	r4, #1
 80078c6:	e004      	b.n	80078d2 <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 80078c8:	4a21      	ldr	r2, [pc, #132]	; (8007950 <xTaskIncrementTick+0x13c>)
BaseType_t xSwitchRequired = pdFALSE;
 80078ca:	2400      	movs	r4, #0
		++uxPendedTicks;
 80078cc:	6813      	ldr	r3, [r2, #0]
 80078ce:	3301      	adds	r3, #1
 80078d0:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80078d2:	4b20      	ldr	r3, [pc, #128]	; (8007954 <xTaskIncrementTick+0x140>)
 80078d4:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	bf18      	it	ne
 80078da:	2401      	movne	r4, #1
}
 80078dc:	4620      	mov	r0, r4
 80078de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80078e2:	4d18      	ldr	r5, [pc, #96]	; (8007944 <xTaskIncrementTick+0x130>)
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	b173      	cbz	r3, 8007908 <xTaskIncrementTick+0xf4>
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	b672      	cpsid	i
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	b662      	cpsie	i
 80078fe:	e7fe      	b.n	80078fe <xTaskIncrementTick+0xea>
 8007900:	4f11      	ldr	r7, [pc, #68]	; (8007948 <xTaskIncrementTick+0x134>)
 8007902:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8007964 <xTaskIncrementTick+0x150>
 8007906:	e7d4      	b.n	80078b2 <xTaskIncrementTick+0x9e>
 8007908:	4b13      	ldr	r3, [pc, #76]	; (8007958 <xTaskIncrementTick+0x144>)
 800790a:	6829      	ldr	r1, [r5, #0]
 800790c:	4a13      	ldr	r2, [pc, #76]	; (800795c <xTaskIncrementTick+0x148>)
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	6028      	str	r0, [r5, #0]
 8007912:	6019      	str	r1, [r3, #0]
 8007914:	6813      	ldr	r3, [r2, #0]
 8007916:	3301      	adds	r3, #1
 8007918:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800791a:	682b      	ldr	r3, [r5, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	b12b      	cbz	r3, 800792c <xTaskIncrementTick+0x118>
 8007920:	f7ff fe26 	bl	8007570 <prvResetNextTaskUnblockTime.part.1>
 8007924:	e782      	b.n	800782c <xTaskIncrementTick+0x18>
						xNextTaskUnblockTime = xItemValue;
 8007926:	f8cb 1000 	str.w	r1, [fp]
						break;
 800792a:	e7c2      	b.n	80078b2 <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 800792c:	f8df b030 	ldr.w	fp, [pc, #48]	; 8007960 <xTaskIncrementTick+0x14c>
 8007930:	f04f 32ff 	mov.w	r2, #4294967295
 8007934:	f8cb 2000 	str.w	r2, [fp]
 8007938:	e77a      	b.n	8007830 <xTaskIncrementTick+0x1c>
 800793a:	bf00      	nop
 800793c:	20003eb0 	.word	0x20003eb0
 8007940:	20003f30 	.word	0x20003f30
 8007944:	20003e10 	.word	0x20003e10
 8007948:	20003e18 	.word	0x20003e18
 800794c:	20003eb8 	.word	0x20003eb8
 8007950:	20003eac 	.word	0x20003eac
 8007954:	20003f34 	.word	0x20003f34
 8007958:	20003e14 	.word	0x20003e14
 800795c:	20003eec 	.word	0x20003eec
 8007960:	20003ee8 	.word	0x20003ee8
 8007964:	20003e0c 	.word	0x20003e0c

08007968 <xTaskResumeAll>:
{
 8007968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 800796c:	4c39      	ldr	r4, [pc, #228]	; (8007a54 <xTaskResumeAll+0xec>)
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	b953      	cbnz	r3, 8007988 <xTaskResumeAll+0x20>
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	b672      	cpsid	i
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	b662      	cpsie	i
 8007986:	e7fe      	b.n	8007986 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8007988:	f7ff fa3c 	bl	8006e04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	3b01      	subs	r3, #1
 8007990:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007992:	6824      	ldr	r4, [r4, #0]
 8007994:	2c00      	cmp	r4, #0
 8007996:	d153      	bne.n	8007a40 <xTaskResumeAll+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007998:	4b2f      	ldr	r3, [pc, #188]	; (8007a58 <xTaskResumeAll+0xf0>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d04f      	beq.n	8007a40 <xTaskResumeAll+0xd8>
 80079a0:	4d2e      	ldr	r5, [pc, #184]	; (8007a5c <xTaskResumeAll+0xf4>)
 80079a2:	4f2f      	ldr	r7, [pc, #188]	; (8007a60 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList( pxTCB );
 80079a4:	4e2f      	ldr	r6, [pc, #188]	; (8007a64 <xTaskResumeAll+0xfc>)
 80079a6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8007a78 <xTaskResumeAll+0x110>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079aa:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8007a7c <xTaskResumeAll+0x114>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079ae:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 80079b0:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079b4:	b323      	cbz	r3, 8007a00 <xTaskResumeAll+0x98>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079ba:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079be:	f104 0018 	add.w	r0, r4, #24
 80079c2:	f7ff f9ab 	bl	8006d1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079c6:	4650      	mov	r0, sl
 80079c8:	f7ff f9a8 	bl	8006d1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80079ce:	6832      	ldr	r2, [r6, #0]
 80079d0:	4651      	mov	r1, sl
 80079d2:	fa08 f300 	lsl.w	r3, r8, r0
 80079d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80079da:	4313      	orrs	r3, r2
 80079dc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80079e0:	6033      	str	r3, [r6, #0]
 80079e2:	f7ff f971 	bl	8006cc8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079e6:	f8db 3000 	ldr.w	r3, [fp]
 80079ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d3dd      	bcc.n	80079ae <xTaskResumeAll+0x46>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079f2:	683b      	ldr	r3, [r7, #0]
						xYieldPending = pdTRUE;
 80079f4:	f8c5 8000 	str.w	r8, [r5]
					prvAddTaskToReadyList( pxTCB );
 80079f8:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1da      	bne.n	80079b6 <xTaskResumeAll+0x4e>
				if( pxTCB != NULL )
 8007a00:	b13c      	cbz	r4, 8007a12 <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a02:	4b19      	ldr	r3, [pc, #100]	; (8007a68 <xTaskResumeAll+0x100>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	bb03      	cbnz	r3, 8007a4c <xTaskResumeAll+0xe4>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a0a:	4b18      	ldr	r3, [pc, #96]	; (8007a6c <xTaskResumeAll+0x104>)
 8007a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a10:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a12:	4e17      	ldr	r6, [pc, #92]	; (8007a70 <xTaskResumeAll+0x108>)
 8007a14:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a16:	b13c      	cbz	r4, 8007a28 <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 8007a18:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007a1a:	f7ff fefb 	bl	8007814 <xTaskIncrementTick>
 8007a1e:	b100      	cbz	r0, 8007a22 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8007a20:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a22:	3c01      	subs	r4, #1
 8007a24:	d1f9      	bne.n	8007a1a <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8007a26:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b14b      	cbz	r3, 8007a40 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 8007a2c:	4b11      	ldr	r3, [pc, #68]	; (8007a74 <xTaskResumeAll+0x10c>)
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007a3c:	2401      	movs	r4, #1
 8007a3e:	e000      	b.n	8007a42 <xTaskResumeAll+0xda>
BaseType_t xAlreadyYielded = pdFALSE;
 8007a40:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007a42:	f7ff fa05 	bl	8006e50 <vPortExitCritical>
}
 8007a46:	4620      	mov	r0, r4
 8007a48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4c:	f7ff fd90 	bl	8007570 <prvResetNextTaskUnblockTime.part.1>
 8007a50:	e7df      	b.n	8007a12 <xTaskResumeAll+0xaa>
 8007a52:	bf00      	nop
 8007a54:	20003eb0 	.word	0x20003eb0
 8007a58:	20003ea4 	.word	0x20003ea4
 8007a5c:	20003f34 	.word	0x20003f34
 8007a60:	20003ef0 	.word	0x20003ef0
 8007a64:	20003eb8 	.word	0x20003eb8
 8007a68:	20003e10 	.word	0x20003e10
 8007a6c:	20003ee8 	.word	0x20003ee8
 8007a70:	20003eac 	.word	0x20003eac
 8007a74:	e000ed04 	.word	0xe000ed04
 8007a78:	20003e18 	.word	0x20003e18
 8007a7c:	20003e0c 	.word	0x20003e0c

08007a80 <vTaskDelay>:
	{
 8007a80:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a82:	b168      	cbz	r0, 8007aa0 <vTaskDelay+0x20>
			configASSERT( uxSchedulerSuspended == 0 );
 8007a84:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <vTaskDelay+0x48>)
 8007a86:	6819      	ldr	r1, [r3, #0]
 8007a88:	b199      	cbz	r1, 8007ab2 <vTaskDelay+0x32>
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	b672      	cpsid	i
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	b662      	cpsie	i
 8007a9e:	e7fe      	b.n	8007a9e <vTaskDelay+0x1e>
			portYIELD_WITHIN_API();
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <vTaskDelay+0x4c>)
 8007aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	3201      	adds	r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ab8:	f7ff fd14 	bl	80074e4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007abc:	f7ff ff54 	bl	8007968 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d0ed      	beq.n	8007aa0 <vTaskDelay+0x20>
 8007ac4:	bd08      	pop	{r3, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20003eb0 	.word	0x20003eb0
 8007acc:	e000ed04 	.word	0xe000ed04

08007ad0 <prvIdleTask>:
{
 8007ad0:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8007ad4:	4c1c      	ldr	r4, [pc, #112]	; (8007b48 <prvIdleTask+0x78>)
				taskYIELD();
 8007ad6:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8007ada:	4e1c      	ldr	r6, [pc, #112]	; (8007b4c <prvIdleTask+0x7c>)
 8007adc:	4d1c      	ldr	r5, [pc, #112]	; (8007b50 <prvIdleTask+0x80>)
 8007ade:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8007b58 <prvIdleTask+0x88>
 8007ae2:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007b5c <prvIdleTask+0x8c>
 8007ae6:	e006      	b.n	8007af6 <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 8007ae8:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8007aea:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 8007aec:	3301      	adds	r3, #1
 8007aee:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 8007af0:	f7ff ff3a 	bl	8007968 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8007af4:	b96f      	cbnz	r7, 8007b12 <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007af6:	682b      	ldr	r3, [r5, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1f5      	bne.n	8007ae8 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007afc:	f8d8 3000 	ldr.w	r3, [r8]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d9f8      	bls.n	8007af6 <prvIdleTask+0x26>
				taskYIELD();
 8007b04:	f8c9 a000 	str.w	sl, [r9]
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	e7f1      	b.n	8007af6 <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 8007b12:	f7ff f977 	bl	8006e04 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007b16:	68f3      	ldr	r3, [r6, #12]
 8007b18:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b1c:	f10b 0004 	add.w	r0, fp, #4
 8007b20:	f7ff f8fc 	bl	8006d1c <uxListRemove>
					--uxCurrentNumberOfTasks;
 8007b24:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <prvIdleTask+0x84>)
 8007b26:	4a0b      	ldr	r2, [pc, #44]	; (8007b54 <prvIdleTask+0x84>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8007b2e:	682b      	ldr	r3, [r5, #0]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 8007b34:	f7ff f98c 	bl	8006e50 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8007b38:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 8007b3c:	f7ff f878 	bl	8006c30 <vPortFree>
			vPortFree( pxTCB );
 8007b40:	4658      	mov	r0, fp
 8007b42:	f7ff f875 	bl	8006c30 <vPortFree>
 8007b46:	e7d6      	b.n	8007af6 <prvIdleTask+0x26>
 8007b48:	20003eb0 	.word	0x20003eb0
 8007b4c:	20003f1c 	.word	0x20003f1c
 8007b50:	20003ea8 	.word	0x20003ea8
 8007b54:	20003ea4 	.word	0x20003ea4
 8007b58:	20003e18 	.word	0x20003e18
 8007b5c:	e000ed04 	.word	0xe000ed04

08007b60 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b60:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <vTaskSwitchContext+0x68>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	bb2b      	cbnz	r3, 8007bb2 <vTaskSwitchContext+0x52>
		xYieldPending = pdFALSE;
 8007b66:	4919      	ldr	r1, [pc, #100]	; (8007bcc <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007b68:	4a19      	ldr	r2, [pc, #100]	; (8007bd0 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 8007b6a:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007b6c:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8007b6e:	fab3 f383 	clz	r3, r3
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	4a17      	ldr	r2, [pc, #92]	; (8007bd4 <vTaskSwitchContext+0x74>)
 8007b76:	f1c3 031f 	rsb	r3, r3, #31
 8007b7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	58d0      	ldr	r0, [r2, r3]
 8007b82:	18d1      	adds	r1, r2, r3
 8007b84:	b950      	cbnz	r0, 8007b9c <vTaskSwitchContext+0x3c>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	b672      	cpsid	i
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	b662      	cpsie	i
 8007b9a:	e7fe      	b.n	8007b9a <vTaskSwitchContext+0x3a>
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	6848      	ldr	r0, [r1, #4]
 8007ba0:	441a      	add	r2, r3
 8007ba2:	6843      	ldr	r3, [r0, #4]
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	604b      	str	r3, [r1, #4]
 8007ba8:	d007      	beq.n	8007bba <vTaskSwitchContext+0x5a>
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <vTaskSwitchContext+0x78>)
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8007bb2:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <vTaskSwitchContext+0x6c>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	604b      	str	r3, [r1, #4]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <vTaskSwitchContext+0x78>)
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	20003eb0 	.word	0x20003eb0
 8007bcc:	20003f34 	.word	0x20003f34
 8007bd0:	20003eb8 	.word	0x20003eb8
 8007bd4:	20003e18 	.word	0x20003e18
 8007bd8:	20003e0c 	.word	0x20003e0c

08007bdc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007bdc:	b160      	cbz	r0, 8007bf8 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bde:	4b0c      	ldr	r3, [pc, #48]	; (8007c10 <vTaskPlaceOnEventList+0x34>)
{
 8007be0:	b510      	push	{r4, lr}
 8007be2:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007be4:	6819      	ldr	r1, [r3, #0]
 8007be6:	3118      	adds	r1, #24
 8007be8:	f7ff f87e 	bl	8006ce8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bec:	4620      	mov	r0, r4
 8007bee:	2101      	movs	r1, #1
}
 8007bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bf4:	f7ff bc76 	b.w	80074e4 <prvAddCurrentTaskToDelayedList>
 8007bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfc:	b672      	cpsid	i
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	b662      	cpsie	i
 8007c0c:	e7fe      	b.n	8007c0c <vTaskPlaceOnEventList+0x30>
 8007c0e:	bf00      	nop
 8007c10:	20003e0c 	.word	0x20003e0c

08007c14 <xTaskRemoveFromEventList>:
{
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007c16:	68c3      	ldr	r3, [r0, #12]
 8007c18:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007c1a:	b324      	cbz	r4, 8007c66 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c1c:	f104 0518 	add.w	r5, r4, #24
 8007c20:	4628      	mov	r0, r5
 8007c22:	f7ff f87b 	bl	8006d1c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c26:	4b19      	ldr	r3, [pc, #100]	; (8007c8c <xTaskRemoveFromEventList+0x78>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	bb4b      	cbnz	r3, 8007c80 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c2c:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c2e:	4d18      	ldr	r5, [pc, #96]	; (8007c90 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7ff f873 	bl	8006d1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007c38:	2301      	movs	r3, #1
 8007c3a:	4816      	ldr	r0, [pc, #88]	; (8007c94 <xTaskRemoveFromEventList+0x80>)
 8007c3c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8007c40:	4631      	mov	r1, r6
 8007c42:	4093      	lsls	r3, r2
 8007c44:	682a      	ldr	r2, [r5, #0]
 8007c46:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	f7ff f83b 	bl	8006cc8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c52:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <xTaskRemoveFromEventList+0x84>)
 8007c54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d90e      	bls.n	8007c7c <xTaskRemoveFromEventList+0x68>
		xYieldPending = pdTRUE;
 8007c5e:	4b0f      	ldr	r3, [pc, #60]	; (8007c9c <xTaskRemoveFromEventList+0x88>)
 8007c60:	2001      	movs	r0, #1
 8007c62:	6018      	str	r0, [r3, #0]
 8007c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	b672      	cpsid	i
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	b662      	cpsie	i
 8007c7a:	e7fe      	b.n	8007c7a <xTaskRemoveFromEventList+0x66>
		xReturn = pdFALSE;
 8007c7c:	2000      	movs	r0, #0
}
 8007c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c80:	4629      	mov	r1, r5
 8007c82:	4807      	ldr	r0, [pc, #28]	; (8007ca0 <xTaskRemoveFromEventList+0x8c>)
 8007c84:	f7ff f820 	bl	8006cc8 <vListInsertEnd>
 8007c88:	e7e3      	b.n	8007c52 <xTaskRemoveFromEventList+0x3e>
 8007c8a:	bf00      	nop
 8007c8c:	20003eb0 	.word	0x20003eb0
 8007c90:	20003eb8 	.word	0x20003eb8
 8007c94:	20003e18 	.word	0x20003e18
 8007c98:	20003e0c 	.word	0x20003e0c
 8007c9c:	20003f34 	.word	0x20003f34
 8007ca0:	20003ef0 	.word	0x20003ef0

08007ca4 <vTaskSetTimeOutState>:
{
 8007ca4:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8007ca6:	b130      	cbz	r0, 8007cb6 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ca8:	4a04      	ldr	r2, [pc, #16]	; (8007cbc <vTaskSetTimeOutState+0x18>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007caa:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <vTaskSetTimeOutState+0x1c>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cac:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	e880 000c 	stmia.w	r0, {r2, r3}
 8007cb4:	bd08      	pop	{r3, pc}
 8007cb6:	f7ff fc67 	bl	8007588 <prvTaskIsTaskSuspended.part.0>
 8007cba:	bf00      	nop
 8007cbc:	20003eec 	.word	0x20003eec
 8007cc0:	20003f30 	.word	0x20003f30

08007cc4 <xTaskCheckForTimeOut>:
{
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d030      	beq.n	8007d2c <xTaskCheckForTimeOut+0x68>
	configASSERT( pxTicksToWait );
 8007cca:	b321      	cbz	r1, 8007d16 <xTaskCheckForTimeOut+0x52>
 8007ccc:	460d      	mov	r5, r1
 8007cce:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007cd0:	f7ff f898 	bl	8006e04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007cd4:	481d      	ldr	r0, [pc, #116]	; (8007d4c <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8007cd6:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8007cd8:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	d031      	beq.n	8007d42 <xTaskCheckForTimeOut+0x7e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cde:	4e1c      	ldr	r6, [pc, #112]	; (8007d50 <xTaskCheckForTimeOut+0x8c>)
 8007ce0:	6827      	ldr	r7, [r4, #0]
 8007ce2:	6832      	ldr	r2, [r6, #0]
 8007ce4:	4297      	cmp	r7, r2
 8007ce6:	6862      	ldr	r2, [r4, #4]
 8007ce8:	d006      	beq.n	8007cf8 <xTaskCheckForTimeOut+0x34>
 8007cea:	4291      	cmp	r1, r2
 8007cec:	d304      	bcc.n	8007cf8 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 8007cee:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 8007cf0:	f7ff f8ae 	bl	8006e50 <vPortExitCritical>
}
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cf8:	1a8f      	subs	r7, r1, r2
 8007cfa:	42bb      	cmp	r3, r7
 8007cfc:	d9f7      	bls.n	8007cee <xTaskCheckForTimeOut+0x2a>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007cfe:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d00:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d02:	6801      	ldr	r1, [r0, #0]
			xReturn = pdFALSE;
 8007d04:	2600      	movs	r6, #0
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007d06:	4413      	add	r3, r2
 8007d08:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d0a:	6027      	str	r7, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d0c:	6061      	str	r1, [r4, #4]
	taskEXIT_CRITICAL();
 8007d0e:	f7ff f89f 	bl	8006e50 <vPortExitCritical>
}
 8007d12:	4630      	mov	r0, r6
 8007d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	b672      	cpsid	i
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	b662      	cpsie	i
 8007d2a:	e7fe      	b.n	8007d2a <xTaskCheckForTimeOut+0x66>
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	b672      	cpsid	i
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	b662      	cpsie	i
 8007d40:	e7fe      	b.n	8007d40 <xTaskCheckForTimeOut+0x7c>
				xReturn = pdFALSE;
 8007d42:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 8007d44:	f7ff f884 	bl	8006e50 <vPortExitCritical>
}
 8007d48:	4630      	mov	r0, r6
 8007d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d4c:	20003f30 	.word	0x20003f30
 8007d50:	20003eec 	.word	0x20003eec

08007d54 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007d54:	4b01      	ldr	r3, [pc, #4]	; (8007d5c <vTaskMissedYield+0x8>)
 8007d56:	2201      	movs	r2, #1
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	4770      	bx	lr
 8007d5c:	20003f34 	.word	0x20003f34

08007d60 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007d60:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <xTaskGetSchedulerState+0x18>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	b133      	cbz	r3, 8007d74 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d66:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <xTaskGetSchedulerState+0x1c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d6c:	bf0c      	ite	eq
 8007d6e:	2002      	moveq	r0, #2
 8007d70:	2000      	movne	r0, #0
 8007d72:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d74:	2001      	movs	r0, #1
	}
 8007d76:	4770      	bx	lr
 8007d78:	20003f04 	.word	0x20003f04
 8007d7c:	20003eb0 	.word	0x20003eb0

08007d80 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d042      	beq.n	8007e0a <vTaskPriorityInherit+0x8a>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	{
 8007d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d8a:	4c21      	ldr	r4, [pc, #132]	; (8007e10 <vTaskPriorityInherit+0x90>)
 8007d8c:	6822      	ldr	r2, [r4, #0]
 8007d8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d212      	bcs.n	8007dba <vTaskPriorityInherit+0x3a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d94:	6982      	ldr	r2, [r0, #24]
 8007d96:	2a00      	cmp	r2, #0
 8007d98:	db04      	blt.n	8007da4 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d9a:	6822      	ldr	r2, [r4, #0]
 8007d9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d9e:	f1c2 0207 	rsb	r2, r2, #7
 8007da2:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007da4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007da8:	4d1a      	ldr	r5, [pc, #104]	; (8007e14 <vTaskPriorityInherit+0x94>)
 8007daa:	6942      	ldr	r2, [r0, #20]
 8007dac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d004      	beq.n	8007dbe <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	62c3      	str	r3, [r0, #44]	; 0x2c
 8007dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dbe:	f100 0804 	add.w	r8, r0, #4
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	f7fe ffa9 	bl	8006d1c <uxListRemove>
 8007dca:	b9f8      	cbnz	r0, 8007e0c <vTaskPriorityInherit+0x8c>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	4e12      	ldr	r6, [pc, #72]	; (8007e18 <vTaskPriorityInherit+0x98>)
 8007dd0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007dd4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8007dd8:	b932      	cbnz	r2, 8007de8 <vTaskPriorityInherit+0x68>
 8007dda:	2101      	movs	r1, #1
 8007ddc:	6832      	ldr	r2, [r6, #0]
 8007dde:	fa01 f303 	lsl.w	r3, r1, r3
 8007de2:	ea22 0303 	bic.w	r3, r2, r3
 8007de6:	6033      	str	r3, [r6, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007de8:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 8007dea:	2301      	movs	r3, #1
 8007dec:	6834      	ldr	r4, [r6, #0]
 8007dee:	4641      	mov	r1, r8
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007df0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007df2:	4093      	lsls	r3, r2
 8007df4:	eb02 0082 	add.w	r0, r2, r2, lsl #2
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007df8:	62fa      	str	r2, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007dfa:	4323      	orrs	r3, r4
 8007dfc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8007e00:	6033      	str	r3, [r6, #0]
	}
 8007e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8007e06:	f7fe bf5f 	b.w	8006cc8 <vListInsertEnd>
 8007e0a:	4770      	bx	lr
 8007e0c:	4e02      	ldr	r6, [pc, #8]	; (8007e18 <vTaskPriorityInherit+0x98>)
 8007e0e:	e7eb      	b.n	8007de8 <vTaskPriorityInherit+0x68>
 8007e10:	20003e0c 	.word	0x20003e0c
 8007e14:	20003e18 	.word	0x20003e18
 8007e18:	20003eb8 	.word	0x20003eb8

08007e1c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d041      	beq.n	8007ea4 <xTaskPriorityDisinherit+0x88>
	{
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8007e22:	4b2a      	ldr	r3, [pc, #168]	; (8007ecc <xTaskPriorityDisinherit+0xb0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4298      	cmp	r0, r3
 8007e28:	d00a      	beq.n	8007e40 <xTaskPriorityDisinherit+0x24>
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	b672      	cpsid	i
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	b662      	cpsie	i
 8007e3e:	e7fe      	b.n	8007e3e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e40:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007e42:	b953      	cbnz	r3, 8007e5a <xTaskPriorityDisinherit+0x3e>
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	b672      	cpsid	i
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	b662      	cpsie	i
 8007e58:	e7fe      	b.n	8007e58 <xTaskPriorityDisinherit+0x3c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e5a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8007e5c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8007e60:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e62:	4291      	cmp	r1, r2
 8007e64:	d030      	beq.n	8007ec8 <xTaskPriorityDisinherit+0xac>
 8007e66:	bb7b      	cbnz	r3, 8007ec8 <xTaskPriorityDisinherit+0xac>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e68:	1d07      	adds	r7, r0, #4
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	f7fe ff55 	bl	8006d1c <uxListRemove>
 8007e72:	b1c8      	cbz	r0, 8007ea8 <xTaskPriorityDisinherit+0x8c>
 8007e74:	4816      	ldr	r0, [pc, #88]	; (8007ed0 <xTaskPriorityDisinherit+0xb4>)
 8007e76:	4a17      	ldr	r2, [pc, #92]	; (8007ed4 <xTaskPriorityDisinherit+0xb8>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e78:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8007e7a:	2501      	movs	r5, #1
 8007e7c:	f8d2 e000 	ldr.w	lr, [r2]
 8007e80:	4639      	mov	r1, r7
 8007e82:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e86:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e8a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007e8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e90:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e94:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e96:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007e9a:	6016      	str	r6, [r2, #0]
 8007e9c:	f7fe ff14 	bl	8006cc8 <vListInsertEnd>
					xReturn = pdTRUE;
 8007ea0:	4628      	mov	r0, r5
	}
 8007ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 8007ea4:	2000      	movs	r0, #0
	}
 8007ea6:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eaa:	4809      	ldr	r0, [pc, #36]	; (8007ed0 <xTaskPriorityDisinherit+0xb4>)
 8007eac:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8007eb0:	4a08      	ldr	r2, [pc, #32]	; (8007ed4 <xTaskPriorityDisinherit+0xb8>)
 8007eb2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1de      	bne.n	8007e78 <xTaskPriorityDisinherit+0x5c>
 8007eba:	2501      	movs	r5, #1
 8007ebc:	6813      	ldr	r3, [r2, #0]
 8007ebe:	40b5      	lsls	r5, r6
 8007ec0:	ea23 0305 	bic.w	r3, r3, r5
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	e7d7      	b.n	8007e78 <xTaskPriorityDisinherit+0x5c>
	BaseType_t xReturn = pdFALSE;
 8007ec8:	2000      	movs	r0, #0
 8007eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ecc:	20003e0c 	.word	0x20003e0c
 8007ed0:	20003e18 	.word	0x20003e18
 8007ed4:	20003eb8 	.word	0x20003eb8

08007ed8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <pvTaskIncrementMutexHeldCount+0x14>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	b11a      	cbz	r2, 8007ee6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ede:	6819      	ldr	r1, [r3, #0]
 8007ee0:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8007ee2:	3201      	adds	r2, #1
 8007ee4:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8007ee6:	6818      	ldr	r0, [r3, #0]
	}
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	20003e0c 	.word	0x20003e0c

08007ef0 <__aeabi_atexit>:
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 b801 	b.w	8007efc <__cxa_atexit>
 8007efa:	bf00      	nop

08007efc <__cxa_atexit>:
 8007efc:	4613      	mov	r3, r2
 8007efe:	460a      	mov	r2, r1
 8007f00:	4601      	mov	r1, r0
 8007f02:	2002      	movs	r0, #2
 8007f04:	f000 b830 	b.w	8007f68 <__register_exitproc>

08007f08 <__libc_init_array>:
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	4e0d      	ldr	r6, [pc, #52]	; (8007f40 <__libc_init_array+0x38>)
 8007f0c:	4c0d      	ldr	r4, [pc, #52]	; (8007f44 <__libc_init_array+0x3c>)
 8007f0e:	1ba4      	subs	r4, r4, r6
 8007f10:	10a4      	asrs	r4, r4, #2
 8007f12:	2500      	movs	r5, #0
 8007f14:	42a5      	cmp	r5, r4
 8007f16:	d109      	bne.n	8007f2c <__libc_init_array+0x24>
 8007f18:	4e0b      	ldr	r6, [pc, #44]	; (8007f48 <__libc_init_array+0x40>)
 8007f1a:	4c0c      	ldr	r4, [pc, #48]	; (8007f4c <__libc_init_array+0x44>)
 8007f1c:	f000 f8fa 	bl	8008114 <_init>
 8007f20:	1ba4      	subs	r4, r4, r6
 8007f22:	10a4      	asrs	r4, r4, #2
 8007f24:	2500      	movs	r5, #0
 8007f26:	42a5      	cmp	r5, r4
 8007f28:	d105      	bne.n	8007f36 <__libc_init_array+0x2e>
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f30:	4798      	blx	r3
 8007f32:	3501      	adds	r5, #1
 8007f34:	e7ee      	b.n	8007f14 <__libc_init_array+0xc>
 8007f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f3a:	4798      	blx	r3
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	e7f2      	b.n	8007f26 <__libc_init_array+0x1e>
 8007f40:	08008430 	.word	0x08008430
 8007f44:	08008430 	.word	0x08008430
 8007f48:	08008430 	.word	0x08008430
 8007f4c:	08008438 	.word	0x08008438

08007f50 <memcpy>:
 8007f50:	b510      	push	{r4, lr}
 8007f52:	1e43      	subs	r3, r0, #1
 8007f54:	440a      	add	r2, r1
 8007f56:	4291      	cmp	r1, r2
 8007f58:	d100      	bne.n	8007f5c <memcpy+0xc>
 8007f5a:	bd10      	pop	{r4, pc}
 8007f5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f64:	e7f7      	b.n	8007f56 <memcpy+0x6>
	...

08007f68 <__register_exitproc>:
 8007f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	4d35      	ldr	r5, [pc, #212]	; (8008044 <__register_exitproc+0xdc>)
 8007f6e:	4680      	mov	r8, r0
 8007f70:	6828      	ldr	r0, [r5, #0]
 8007f72:	4699      	mov	r9, r3
 8007f74:	460f      	mov	r7, r1
 8007f76:	4692      	mov	sl, r2
 8007f78:	f000 f86c 	bl	8008054 <__retarget_lock_acquire_recursive>
 8007f7c:	4b32      	ldr	r3, [pc, #200]	; (8008048 <__register_exitproc+0xe0>)
 8007f7e:	681e      	ldr	r6, [r3, #0]
 8007f80:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8007f82:	b93c      	cbnz	r4, 8007f94 <__register_exitproc+0x2c>
 8007f84:	4b31      	ldr	r3, [pc, #196]	; (800804c <__register_exitproc+0xe4>)
 8007f86:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8007f8a:	64b4      	str	r4, [r6, #72]	; 0x48
 8007f8c:	b113      	cbz	r3, 8007f94 <__register_exitproc+0x2c>
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	2b1f      	cmp	r3, #31
 8007f98:	dd46      	ble.n	8008028 <__register_exitproc+0xc0>
 8007f9a:	4b2d      	ldr	r3, [pc, #180]	; (8008050 <__register_exitproc+0xe8>)
 8007f9c:	b933      	cbnz	r3, 8007fac <__register_exitproc+0x44>
 8007f9e:	6828      	ldr	r0, [r5, #0]
 8007fa0:	f000 f85a 	bl	8008058 <__retarget_lock_release_recursive>
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fac:	208c      	movs	r0, #140	; 0x8c
 8007fae:	f3af 8000 	nop.w
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d0f2      	beq.n	8007f9e <__register_exitproc+0x36>
 8007fb8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8007fba:	6003      	str	r3, [r0, #0]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	6042      	str	r2, [r0, #4]
 8007fc0:	64b0      	str	r0, [r6, #72]	; 0x48
 8007fc2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8007fc6:	f1b8 0f00 	cmp.w	r8, #0
 8007fca:	d021      	beq.n	8008010 <__register_exitproc+0xa8>
 8007fcc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8007fd0:	f3af 8000 	nop.w
 8007fd4:	b390      	cbz	r0, 800803c <__register_exitproc+0xd4>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007fdc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8007fe0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8007fe4:	6862      	ldr	r2, [r4, #4]
 8007fe6:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 8007fea:	2301      	movs	r3, #1
 8007fec:	4093      	lsls	r3, r2
 8007fee:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8007ff2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	f1b8 0f02 	cmp.w	r8, #2
 8007ffc:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8008000:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 8008004:	bf02      	ittt	eq
 8008006:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800800a:	4313      	orreq	r3, r2
 800800c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8008010:	6863      	ldr	r3, [r4, #4]
 8008012:	6828      	ldr	r0, [r5, #0]
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	3302      	adds	r3, #2
 8008018:	6062      	str	r2, [r4, #4]
 800801a:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 800801e:	f000 f81b 	bl	8008058 <__retarget_lock_release_recursive>
 8008022:	2000      	movs	r0, #0
 8008024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008028:	f1b8 0f00 	cmp.w	r8, #0
 800802c:	d0f0      	beq.n	8008010 <__register_exitproc+0xa8>
 800802e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008032:	2800      	cmp	r0, #0
 8008034:	d1d6      	bne.n	8007fe4 <__register_exitproc+0x7c>
 8008036:	4b06      	ldr	r3, [pc, #24]	; (8008050 <__register_exitproc+0xe8>)
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1c7      	bne.n	8007fcc <__register_exitproc+0x64>
 800803c:	6828      	ldr	r0, [r5, #0]
 800803e:	f000 f80a 	bl	8008056 <__retarget_lock_release>
 8008042:	e7af      	b.n	8007fa4 <__register_exitproc+0x3c>
 8008044:	200000a4 	.word	0x200000a4
 8008048:	08008324 	.word	0x08008324
 800804c:	08008320 	.word	0x08008320
 8008050:	00000000 	.word	0x00000000

08008054 <__retarget_lock_acquire_recursive>:
 8008054:	4770      	bx	lr

08008056 <__retarget_lock_release>:
 8008056:	4770      	bx	lr

08008058 <__retarget_lock_release_recursive>:
 8008058:	4770      	bx	lr

0800805a <abort>:
 800805a:	b508      	push	{r3, lr}
 800805c:	2006      	movs	r0, #6
 800805e:	f000 f82b 	bl	80080b8 <raise>
 8008062:	2001      	movs	r0, #1
 8008064:	f000 f854 	bl	8008110 <_exit>

08008068 <_raise_r>:
 8008068:	291f      	cmp	r1, #31
 800806a:	b538      	push	{r3, r4, r5, lr}
 800806c:	4604      	mov	r4, r0
 800806e:	460d      	mov	r5, r1
 8008070:	d904      	bls.n	800807c <_raise_r+0x14>
 8008072:	2316      	movs	r3, #22
 8008074:	6003      	str	r3, [r0, #0]
 8008076:	f04f 30ff 	mov.w	r0, #4294967295
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800807e:	b112      	cbz	r2, 8008086 <_raise_r+0x1e>
 8008080:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008084:	b94b      	cbnz	r3, 800809a <_raise_r+0x32>
 8008086:	4620      	mov	r0, r4
 8008088:	f000 f830 	bl	80080ec <_getpid_r>
 800808c:	462a      	mov	r2, r5
 800808e:	4601      	mov	r1, r0
 8008090:	4620      	mov	r0, r4
 8008092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008096:	f000 b817 	b.w	80080c8 <_kill_r>
 800809a:	2b01      	cmp	r3, #1
 800809c:	d00a      	beq.n	80080b4 <_raise_r+0x4c>
 800809e:	1c59      	adds	r1, r3, #1
 80080a0:	d103      	bne.n	80080aa <_raise_r+0x42>
 80080a2:	2316      	movs	r3, #22
 80080a4:	6003      	str	r3, [r0, #0]
 80080a6:	2001      	movs	r0, #1
 80080a8:	bd38      	pop	{r3, r4, r5, pc}
 80080aa:	2400      	movs	r4, #0
 80080ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080b0:	4628      	mov	r0, r5
 80080b2:	4798      	blx	r3
 80080b4:	2000      	movs	r0, #0
 80080b6:	bd38      	pop	{r3, r4, r5, pc}

080080b8 <raise>:
 80080b8:	4b02      	ldr	r3, [pc, #8]	; (80080c4 <raise+0xc>)
 80080ba:	4601      	mov	r1, r0
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	f7ff bfd3 	b.w	8008068 <_raise_r>
 80080c2:	bf00      	nop
 80080c4:	200000a8 	.word	0x200000a8

080080c8 <_kill_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4c07      	ldr	r4, [pc, #28]	; (80080e8 <_kill_r+0x20>)
 80080cc:	2300      	movs	r3, #0
 80080ce:	4605      	mov	r5, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	4611      	mov	r1, r2
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	f000 f813 	bl	8008100 <_kill>
 80080da:	1c43      	adds	r3, r0, #1
 80080dc:	d102      	bne.n	80080e4 <_kill_r+0x1c>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	b103      	cbz	r3, 80080e4 <_kill_r+0x1c>
 80080e2:	602b      	str	r3, [r5, #0]
 80080e4:	bd38      	pop	{r3, r4, r5, pc}
 80080e6:	bf00      	nop
 80080e8:	200045c8 	.word	0x200045c8

080080ec <_getpid_r>:
 80080ec:	f000 b800 	b.w	80080f0 <_getpid>

080080f0 <_getpid>:
 80080f0:	4b02      	ldr	r3, [pc, #8]	; (80080fc <_getpid+0xc>)
 80080f2:	2258      	movs	r2, #88	; 0x58
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	f04f 30ff 	mov.w	r0, #4294967295
 80080fa:	4770      	bx	lr
 80080fc:	200045c8 	.word	0x200045c8

08008100 <_kill>:
 8008100:	4b02      	ldr	r3, [pc, #8]	; (800810c <_kill+0xc>)
 8008102:	2258      	movs	r2, #88	; 0x58
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	f04f 30ff 	mov.w	r0, #4294967295
 800810a:	4770      	bx	lr
 800810c:	200045c8 	.word	0x200045c8

08008110 <_exit>:
 8008110:	e7fe      	b.n	8008110 <_exit>
	...

08008114 <_init>:
 8008114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008116:	bf00      	nop
 8008118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800811a:	bc08      	pop	{r3}
 800811c:	469e      	mov	lr, r3
 800811e:	4770      	bx	lr

08008120 <_fini>:
 8008120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008122:	bf00      	nop
 8008124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008126:	bc08      	pop	{r3}
 8008128:	469e      	mov	lr, r3
 800812a:	4770      	bx	lr
